bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stripCustom.append(FIELD_FE).append(start);  [CE]  cannot  find  symbol  FIELD_FE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_FE).append(start);	  stripCustom.append(FINAL_FE).append(start);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	2	None	replace
2	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start);	  stripCustom.append(FINAL_FE).append(start);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	4	replace
3	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start);	  stripCustom.append(FINAL_FE).append(start);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	4	replace
4	[BUG]  [BUGGY]  if(start  <  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	167	None	replace
5	[BUG]  [BUGGY]  if(start  >=  0)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	167	None	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  stripCustom.append(END_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	167	5	replace
7	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  stripCustom.append(END_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	167	5	replace
8	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	148	None	replace
9	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	156	None	replace
10	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayStoreException  	186	5	replace
11	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayStoreException  	186	5	replace
12	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayStoreException  	186	5	replace
13	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayStoreException  	186	5	replace
14	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayStoreException  	186	5	replace
15	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayStoreException  	186	5	replace
16	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(FIELD_QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]          ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(FIELD_QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(FIELD_QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	186	None	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	193	5	add
18	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	193	5	add
19	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	193	5	add
20	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	193	5	add
21	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	193	5	add
22	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	193	5	add
23	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	70	None	replace
24	[BUG]  [BUGGY]  stripCustom.append(FIELD_QUOTE).append(start);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_QUOTE).append(start);	  stripCustom.append(END_FE).append(start);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	47	None	replace
25	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	30	None	replace
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
27	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
28	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
29	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
31	[BUG]  [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
33	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(start,  index  +  1);	  int    fmtCount    =    readArgumentIndex(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
35	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  +  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(start,  index  +  2);	  int    fmtCount    =    readArgumentIndex(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
36	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(start,  index  -  1);	  int    fmtCount    =    readArgumentIndex(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
37	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(pattern,  start  +  1);	  int    fmtCount    =    readArgumentCount(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
38	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(start,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(start,  index  +  1);	  int    fmtCount    =    readArgumentCount(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
39	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index  +  1,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index  +  1,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(pattern,  index  +  1,  start);	  int    fmtCount    =    readArgumentCount(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
40	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
41	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
42	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
43	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  [CE]  orphaned  default  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  orphaned  default	25	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	5	replace
45	[BUG]  [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	5	replace
46	[BUG]  [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	121	None	replace
47	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  pos);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
48	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
49	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  2);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
50	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(start,  pattern);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(start,  pattern);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(start,  pattern);	  int    fmtCount    =    readArgumentCount(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	8	None	replace
51	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentCount(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentCount(pattern,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentCount(pattern,  start);	  int    fmtCount    =    readArgumentCount(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	8	None	replace
52	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	162	5	add
53	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	162	5	add
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	162	5	add
55	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	162	5	add
56	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
57	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  stripCustom.append(END_FE).append(index);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
58	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
59	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  stripCustom.append(START_FMT).append(index);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
60	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
61	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
62	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
63	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
64	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    pos.setIndex(index);  stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
65	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    pos.setIndex(index);  stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
66	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	120	None	add
67	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	120	5	add
68	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	120	5	add
69	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	add
70	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	120	None	add
71	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	add
72	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
73	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
74	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
75	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index    +    1);    stripCustom.append(QUOTE).append(index  +  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	126	5	add
76	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    stripCustom.append(QUOTE).append(index  +  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	126	5	add
77	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	126	None	add
78	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  pos.setIndex(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index    +    1);    pos.setIndex(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);	  	compilable	  [FE]  IllegalArgumentException  	126	5	add
79	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  pos.setIndex(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  pos.setIndex(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    pos.setIndex(index  +  1);  stripCustom.append(QUOTE).append(index  +  1);	  	compilable	  [FE]  IllegalArgumentException  	126	5	add
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	126	5	add
81	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	126	5	add
82	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	126	None	add
83	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    index;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	83	None	replace
84	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    index;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	83	None	replace
85	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	110	5	add
86	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	110	5	add
87	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	110	5	add
88	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	110	5	add
89	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	110	5	add
90	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	110	5	add
91	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	110	5	add
92	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	110	5	add
93	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    int  fmtCount  =  readArgumentIndex(pattern,  start);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	110	None	add
94	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
95	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  ')'  expected	89	None	replace
96	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	164	None	replace
97	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	108	5	add
98	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	108	5	add
99	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
100	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
102	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
103	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
104	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
106	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
107	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  ArrayStoreException  	113	5	replace
108	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  ArrayStoreException  	113	5	replace
109	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	5	replace
110	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	5	replace
111	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	5	replace
112	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	5	replace
113	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  ArrayStoreException  	113	5	replace
114	[BUG]  [BUGGY]  if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  ArrayStoreException  	113	5	replace
115	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	77	None	replace
116	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  next(pos));  }  [CE]  no  suitable  method  found  for  append(int,int,ParsePosition)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,int,ParsePosition)	77	None	replace
117	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
118	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
119	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
120	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
121	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  start,  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  start,  index);	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	172	None	replace
122	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	48	5	add
123	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	48	5	add
124	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount);    stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
125	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
126	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount);    if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
127	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
128	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  char[]  fmtCount  =  parseFormatDescription(pattern,  start,  index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  char[]  fmtCount  =  parseFormatDescription(pattern,  start,  index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    char[]  fmtCount  =  parseFormatDescription(pattern,  start,  index);  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	48	None	add
129	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  char[]  fmtCount  =  pattern.toCharArray();  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  char[]  fmtCount  =  pattern.toCharArray();  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    char[]  fmtCount  =  pattern.toCharArray();  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	48	None	add
130	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
131	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
132	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
133	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
134	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(START_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
135	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(START_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
136	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	23	None	add
137	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	23	None	add
138	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(END_FE);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(END_FE);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(END_FE);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
139	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
140	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
141	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
142	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  stripCustom.append(END_FE).append(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	13	5	add
143	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  stripCustom.append(END_FE).append(index);  stripCustom.append(QUOTE).append(index);  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  stripCustom.append(END_FE).append(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	13	5	add
144	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
145	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
146	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	13	5	add
147	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	13	5	add
148	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
149	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
150	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	13	5	add
151	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(START_FE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	13	5	add
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	5	replace
153	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	5	replace
154	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	94	5	replace
155	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	94	5	replace
156	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	94	5	replace
157	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	94	5	replace
158	[BUG]  [BUGGY]  char[]  c  =  getFormat(start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(start,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(start,  index  +  1);	  char[]    c    =    getFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	64	None	replace
159	[BUG]  [BUGGY]  char[]  c  =  getFormat(pos,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(pos,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(pos,  index);	  char[]    c    =    getFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	64	None	replace
160	[BUG]  [BUGGY]  char[]  c  =  getFormat(start,  index  -  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(start,  index  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(start,  index  -  1);	  char[]    c    =    getFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	64	None	replace
161	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	166	5	add
162	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	166	5	add
163	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	166	5	add
164	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	166	5	add
165	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	166	None	add
166	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	166	None	add
167	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	166	None	add
168	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
169	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	149	None	replace
170	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	149	None	replace
171	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  orphaned  default	154	None	replace
172	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	190	None	replace
173	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	190	5	replace
174	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	190	5	replace
175	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	72	None	replace
176	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	188	None	replace
177	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	44	None	replace
178	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	191	5	add
179	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	191	5	add
180	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	191	None	add
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	174	5	replace
182	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	174	5	replace
183	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	174	5	replace
184	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	174	5	replace
185	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index    +    1);    stripCustom.append(END_FE).append(index  +  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	50	5	add
186	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  stripCustom.append(END_FE).append(index  +  1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    stripCustom.append(END_FE).append(index  +  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	50	5	add
187	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.setIndex(index  +  1);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index    +    1);    pos.setIndex(index  +  1);  stripCustom.append(END_FE).append(index  +  1);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
188	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.setIndex(index  +  1);  stripCustom.append(END_FE).append(index  +  1);  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.setIndex(index  +  1);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    pos.setIndex(index  +  1);  stripCustom.append(END_FE).append(index  +  1);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
189	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.setIndex(index);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index    +    1);    pos.setIndex(index);  stripCustom.append(END_FE).append(index  +  1);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
190	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.setIndex(index);  stripCustom.append(END_FE).append(index  +  1);  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.setIndex(index);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    pos.setIndex(index);  stripCustom.append(END_FE).append(index  +  1);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
191	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.getIndex()  +  1;  stripCustom.append(END_FE).append(index  +  1);  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  pos.getIndex()  +  1;  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    pos.getIndex()  +  1;  stripCustom.append(END_FE).append(index  +  1);	  	non-compiled	[CE]  not  a  statement	50	None	add
192	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index  +  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	50	None	add
193	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	15	None	replace
194	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	5	replace
195	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	5	replace
196	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append(c);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append(c);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	5	replace
197	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append(c);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append(c);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append(c);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	5	replace
198	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	118	5	add
199	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	118	5	add
200	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
201	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
202	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
203	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(START_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
204	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  2);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index  +  2);	  stripCustom.append(START_FE).append(index    +    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	5	replace
205	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  2);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  2);	  stripCustom.append(START_FE).append(index    +    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	5	replace
206	[BUG]  [BUGGY]  char[]  c  =  parseFormat(pattern,  start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(pattern,  start,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(pattern,  start,  index  +  1);	  char[]    c    =    parseFormat(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	198	None	replace
207	[BUG]  [BUGGY]  char[]  c  =  parseFormat(pattern,  index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(pattern,  index,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(pattern,  index,  start);	  char[]    c    =    parseFormat(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	198	None	replace
208	[BUG]  [BUGGY]  char[]  c  =  parseFormat(pattern,  start,  index  -  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(pattern,  start,  index  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(pattern,  start,  index  -  1);	  char[]    c    =    parseFormat(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	198	None	replace
209	[BUG]  [BUGGY]  char[]  c  =  parseFormat(pattern,  start,  index  +  2);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(pattern,  start,  index  +  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(pattern,  start,  index  +  2);	  char[]    c    =    parseFormat(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	198	None	replace
210	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	84	None	replace
211	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	84	None	replace
212	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
213	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
214	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	61	None	add
215	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	61	None	add
216	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	61	None	add
217	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	61	None	add
218	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(fmtCount);	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	49	5	replace
219	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(fmtCount);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(fmtCount);	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	49	5	replace
220	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
221	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	5	replace
222	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	5	replace
223	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	138	None	replace
224	[BUG]  [BUGGY]  char[]  c  =  getChars(start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getChars(start,  index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getChars(start,  index  +  1);	          char[]    c    =    getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	180	None	replace
225	[BUG]  [BUGGY]  char[]  c  =  getChars(index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getChars(index,  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getChars(index,  start);	          char[]    c    =    getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	180	None	replace
226	[BUG]  [BUGGY]  char[]  c  =  getChars(start,  index  +  2);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getChars(start,  index  +  2);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getChars(start,  index  +  2);	          char[]    c    =    getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	180	None	replace
227	[BUG]  [BUGGY]  char[]  c  =  getChars(start,  index  +  1,  pattern.length);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getChars(start,  index  +  1,  pattern.length);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getChars(start,  index  +  1,  pattern.length);	          char[]    c    =    getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	180	None	replace
228	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
229	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
230	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	5	add
231	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	5	add
232	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	26	None	add
233	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
234	[BUG]  [BUGGY]  char[]  c  =  getFormat(start,  end);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(start,  end);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(start,  end);	  char[]    c    =    getFormat(end);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	137	None	replace
235	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	88	None	replace
236	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ';'  expected	88	None	replace
237	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	33	5	add
238	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	33	5	add
239	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	33	5	add
240	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	33	5	add
241	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
242	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
243	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(start,  next(pos));	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
244	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  start,  next(pos),  fmtCount);	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos),    fmtCount);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	170	None	replace
245	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos),    fmtCount);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	170	None	replace
246	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
247	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
248	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
249	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
250	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
251	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
252	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
253	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
254	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,	  	non-compiled	[CE]  ')'  expected	21	None	add
255	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	183	5	replace
256	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	183	5	replace
257	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	37	5	add
258	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	37	5	add
259	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	37	None	add
260	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    }    	non-compiled	[CE]  ';'  expected	107	None	replace
261	[BUG]  [BUGGY]  char[]  c  =  getFormat(index,  start,  fmtCount);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(index,  start,  fmtCount);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(index,  start,  fmtCount);	  char[]    c    =    getFormat(index,    start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	66	None	replace
262	[BUG]  [BUGGY]  char[]  c  =  getFormat(pos,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(pos,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(pos,  start);	  char[]    c    =    getFormat(index,    start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	66	None	replace
263	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	112	5	add
264	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	112	5	add
265	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	112	5	add
266	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  IllegalArgumentException  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	112	5	add
267	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	112	5	add
268	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	112	5	add
269	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	112	5	add
270	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	112	5	add
271	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundDescriptions.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundDescriptions.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	112	None	add
272	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	5	replace
273	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	5	replace
274	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	5	replace
275	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	5	replace
276	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	98	None	replace
277	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	98	None	replace
278	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +(next(pos));  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +(next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +(next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos));    	non-compiled	[CE]  ')'  expected	161	None	replace
279	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index  +(next(pos));  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index  +(next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  index  +(next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos));    	non-compiled	[CE]  ')'  expected	161	None	replace
280	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +(index  <  next(pos));  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +(index  <  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +(index  <  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos));    	non-compiled	[CE]  ')'  expected	161	None	replace
281	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +(next(pos));  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +(next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start  +(next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos));    	non-compiled	[CE]  ')'  expected	161	None	replace
282	[BUG]  [BUGGY]  stripCustom.append(FIELD_FE).append(start  +  1);  [CE]  cannot  find  symbol  FIELD_FE  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_FE).append(start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_FE).append(start  +  1);	  stripCustom.append(FIELD_FE).append(index    +    1);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	92	None	replace
283	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	5	replace
284	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	5	replace
285	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	117	5	replace
286	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	117	5	replace
287	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  ArrayStoreException  	117	5	replace
288	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  ArrayStoreException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  ArrayStoreException  	117	5	replace
289	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	117	5	replace
290	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	117	5	replace
291	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  ArrayStoreException  	117	5	replace
292	[BUG]  [BUGGY]  if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  ArrayStoreException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  ArrayStoreException  	117	5	replace
293	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  toPattern.toCharArray();	          char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	179	None	replace
294	[BUG]  [BUGGY]  char[]  c  =  start.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  start.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  start.toCharArray();	          char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	179	None	replace
295	[BUG]  [BUGGY]  char[]  c  =  pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  pattern.toPattern();  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  pattern.toPattern();	          char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	179	None	replace
296	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	5	add
297	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	5	add
298	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	93	5	add
299	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	93	5	add
300	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	5	add
301	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	5	add
302	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  ==  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  ==  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	93	5	add
303	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  ==  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  ==  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  ==  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	93	5	add
304	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	93	5	add
305	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	93	5	add
306	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
307	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
308	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(START_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
309	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(START_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
310	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
311	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
313	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
314	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
315	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
316	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  end);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  end);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(start,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	168	None	replace
317	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	178	None	replace
318	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
319	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
320	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
321	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
322	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	5	replace
323	[BUG]  [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	5	replace
324	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	5	replace
325	[BUG]  [BUGGY]  if(start  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	5	replace
326	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	5	replace
327	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	5	replace
328	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	175	None	replace
329	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	175	None	replace
330	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	175	None	replace
331	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	175	None	replace
332	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    pattern.length()    -    start,    fmtCount    	non-compiled	[CE]  ')'  expected	177	None	replace
333	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    pattern.length()    -    start,    fmtCount    	non-compiled	[CE]  ')'  expected	177	None	replace
334	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    pattern.length()    -    start,    fmtCount    	non-compiled	[CE]  ')'  expected	177	None	replace
335	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    pattern.length()    -    start,    fmtCount    	non-compiled	[CE]  ')'  expected	177	None	replace
336	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	152	None	replace
337	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	152	None	replace
338	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	194	1	replace
339	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	194	1	replace
340	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  stripCustom.append(END_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(start);    stripCustom.append(END_FE).append(start);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	46	5	add
341	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  stripCustom.append(END_FE).append(start);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  stripCustom.append(END_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    stripCustom.append(END_FE).append(start);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	46	5	add
342	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  pos.setIndex(index);  stripCustom.append(END_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(start);    pos.setIndex(index);  stripCustom.append(END_FE).append(start);	  	compilable	  [FE]  IllegalArgumentException  	46	5	add
343	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  pos.setIndex(index);  stripCustom.append(END_FE).append(start);  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  pos.setIndex(index);  stripCustom.append(END_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    pos.setIndex(index);  stripCustom.append(END_FE).append(start);	  	compilable	  [FE]  IllegalArgumentException  	46	5	add
344	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(start);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	46	None	add
345	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(start);    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	46	5	add
346	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	46	5	add
347	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	46	None	add
348	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	5	add
349	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	5	add
350	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(start  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	124	5	add
351	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(start  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	124	5	add
352	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	add
353	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  char[]  c  =  pattern.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	124	None	add
354	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1,  pattern.length());  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1,  pattern.length());  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	add
355	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }	  if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	56	None	replace
356	[BUG]  [BUGGY]  if(start  <  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  orphaned  default	76	None	replace
357	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	40	None	replace
358	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
359	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	144	5	add
360	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	144	5	add
361	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
362	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
363	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FMT).append(index);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
364	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	192	5	replace
365	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	192	5	replace
366	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	192	5	replace
367	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	192	5	replace
368	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  start);	  char    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	52	None	replace
369	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(start,  index);	  char    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	52	None	replace
370	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
371	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
372	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
373	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
374	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
375	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	32	None	replace
376	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	189	None	replace
377	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	189	None	replace
378	[BUG]  [BUGGY]  stripCustom.append(FIELD_NAME).append(start);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_NAME).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_NAME).append(start);	  stripCustom.append(FIELD_NAME).append(index);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
379	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  END_FE)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0  ||  start  >  END_FE)  {  stripCustom.append(END_FE).append(index);  }	  if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	5	replace
380	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  END_FE)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  END_FE)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0  ||  start  >  END_FE)  {  stripCustom.append(END_FE).append(index);  }	  if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	5	replace
381	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	100	1	add
382	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	100	1	add
383	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  If(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  If(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    If(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  ';'  expected	100	None	add
384	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
385	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
386	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
387	[BUG]  [BUGGY]  if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
388	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
389	[BUG]  [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
390	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
391	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
392	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
393	[BUG]  [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  possible  loss  of  precision	146	None	replace
394	[BUG]  [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  END_FE  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
395	[BUG]  [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  END_FE  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
396	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	int  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	146	5	replace
397	[BUG]  [BUGGY]  int  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  END_FE  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	146	5	replace
398	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	59	None	add
399	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	59	None	add
400	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	59	None	add
401	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_	  	non-compiled	[CE]  ')'  expected	59	None	add
402	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	add
403	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	add
404	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	75	5	add
405	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	75	5	add
406	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	75	5	add
407	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	75	5	add
408	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
409	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
410	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  ')'  expected	14	None	replace
411	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
412	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE).append(END_FE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
413	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE).append(END_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE).append(END_FE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
414	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    stripCustom.append(QUOTE).append(start);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
415	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(start);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    stripCustom.append(QUOTE).append(start);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
416	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    pos.setIndex(index);  stripCustom.append(QUOTE).append(start);	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
417	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(start);  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    pos.setIndex(index);  stripCustom.append(QUOTE).append(start);	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
418	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(start);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	53	None	add
419	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
420	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
421	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
422	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
423	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	add
424	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	add
425	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	add
426	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	add
427	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	102	5	add
428	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	102	5	add
429	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  index,  next(pos));  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [CE]  no  suitable  method  found  for  append(int,int,int,ParsePosition)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  index,  next(pos));  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  index,  next(pos));  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index,    next(pos));    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,int,int,ParsePosition)	80	None	replace
430	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  index,  next(pos));  }  [CE]  no  suitable  method  found  for  append(int,int,int,ParsePosition)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  index,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index,  start,  index,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index,    next(pos));    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,int,int,ParsePosition)	80	None	replace
431	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
432	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
433	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
434	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
435	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
436	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
437	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	95	None	add
438	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
439	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
440	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	116	5	add
441	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	116	5	add
442	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
443	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
444	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
445	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
446	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
447	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  IllegalArgumentException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
448	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	116	None	add
449	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	155	None	replace
450	[BUG]  [BUGGY]  char[]  c  =  findFormat(start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  findFormat(start,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  findFormat(start,  index  +  1);	  char[]    c    =    findFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	136	None	replace
451	[BUG]  [BUGGY]  char[]  c  =  findFormat(index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  findFormat(index,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  findFormat(index,  start);	  char[]    c    =    findFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	136	None	replace
452	[BUG]  [BUGGY]  char[]  c  =  findFormat(fmtCount,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  findFormat(fmtCount,  start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  findFormat(fmtCount,  start,  index);	  char[]    c    =    findFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	136	None	replace
453	[BUG]  [BUGGY]  char[]  c  =  findFormat(start,  index  +  2);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  findFormat(start,  index  +  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  findFormat(start,  index  +  2);	  char[]    c    =    findFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	136	None	replace
454	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
455	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
456	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(index));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  start,  index,  next(index));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
457	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(index));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  index,  next(index));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
458	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(start));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  index,  next(start));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
459	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(pos));  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  index,  next(pos));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
460	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	157	None	replace
461	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.getChars(start,    index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	20	None	replace
462	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.getChars(start,    index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	20	None	replace
463	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.getChars(start,    index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  ')'  expected	20	None	replace
464	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  [CE]  orphaned  default  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.getChars(start,    index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  orphaned  default	20	None	replace
465	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
466	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
467	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
468	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
469	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
470	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".toString());  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
471	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
472	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
473	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
474	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
475	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
476	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
477	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
478	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	196	5	add
479	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1).append(END_FE);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1).append(END_FE);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	196	None	add
480	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	5	replace
481	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	5	replace
482	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	99	None	replace
483	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  }  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  '.class'  expected	176	None	replace
484	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  }  [CE]  '.class'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  '.class'  expected	176	None	replace
485	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  orphaned  default	176	None	replace
486	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [CE]  '.class'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  '.class'  expected	176	None	replace
487	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
488	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
489	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	5	add
490	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	5	add
491	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	114	5	add
492	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	114	5	add
493	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	114	5	add
494	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  ==  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	114	5	add
495	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	114	None	add
496	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1).append(START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index  +  1).append(START_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  IllegalArgumentException  	197	5	replace
497	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1).append(START_FE);  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1).append(START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  1).append(START_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  IllegalArgumentException  	197	5	replace
498	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index  +  2).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	197	5	replace
499	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2).append(END_FE);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index  +  2).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	197	5	replace
500	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE,  start);  [CE]  no  suitable  method  found  for  append(char,int)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE,  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index  +  1).append(END_FE,  start);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	197	None	replace
501	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	139	None	replace
502	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start  +  1);	  stripCustom.append(QUOTE).append(index    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	5	replace
503	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start  +  1);	  stripCustom.append(QUOTE).append(index    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	5	replace
504	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentCount(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  String  fmtCount  =  readArgumentCount(pattern,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	String  fmtCount  =  readArgumentCount(pattern,  index);	  char    fmtCount    =    readArgumentCount(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	159	None	replace
505	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentCount(start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentCount(start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentCount(start,  index);	  char    fmtCount    =    readArgumentCount(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	159	None	replace
506	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentCount(pattern,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentCount(pattern,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentCount(pattern,  index  +  1);	  char    fmtCount    =    readArgumentCount(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	159	None	replace
507	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +(next(pos)));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +(next(pos)));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +(next(pos)));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos)));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	195	None	replace
508	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +(index  <  next(pos)));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +(index  <  next(pos)));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +(index  <  next(pos)));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos)));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	195	None	replace
509	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index  +(next(pos)));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index  +(next(pos)));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  index  +(next(pos)));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos)));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	195	None	replace
510	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +(next(pos)));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +(next(pos)));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start  +(next(pos)));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos)));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	195	None	replace
511	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  next(pos));  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  next(pos));	  appendQuotedString(pattern,    start,    next(pos));    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	79	None	replace
512	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  next(start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  next(start));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  next(start));	  appendQuotedString(pattern,    start,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	79	None	replace
513	[BUG]  [BUGGY]  appendQuotedString(pattern,  index,  next(pos));  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  index,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  index,  next(pos));	  appendQuotedString(pattern,    start,    next(pos));    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	79	None	replace
514	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
515	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	82	None	replace
516	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	82	None	replace
517	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	18	None	add
518	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	18	None	add
519	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	18	None	add
520	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	18	None	add
521	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	18	5	add
522	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	18	5	add
523	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  stripCustom.append(END_FE).append(index);    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	147	None	replace
524	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  stripCustom.append(END_FE).append(index);    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	147	None	replace
525	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	5	replace
526	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(foundDescriptions!=  null)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	5	replace
527	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	173	5	add
528	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	173	5	add
529	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	173	5	add
530	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	173	5	add
531	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	173	5	add
532	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	173	5	add
533	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index  +  1);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	173	None	add
534	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	173	None	add
535	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	add
536	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	add
537	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	5	add
538	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	5	add
539	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	143	1	replace
540	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	143	1	replace
541	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	5	replace
542	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	5	replace
543	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(start  +  1);	  stripCustom.append(END_FE).append(index    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	5	replace
544	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start  +  1);	  stripCustom.append(END_FE).append(index    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	5	replace
545	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount  +  1);	  stripCustom.append(END_FE).append(index    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	5	replace
546	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount  +  1);	  stripCustom.append(END_FE).append(index    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	5	replace
547	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(start);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
548	[BUG]  [BUGGY]  pos.setIndex(start);  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(start);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
549	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
550	[BUG]  [BUGGY]  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(index);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
551	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(index);  stripCustom.append(START_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
552	[BUG]  [BUGGY]  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(index);  stripCustom.append(START_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
553	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(start);  stripCustom.append(START_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
554	[BUG]  [BUGGY]  pos.setIndex(start);  stripCustom.append(START_FE).append(index);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  stripCustom.append(START_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(start);  stripCustom.append(START_FE).append(index);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
555	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(start,  index,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    index,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
556	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    index,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
557	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }	  if(index    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	57	None	replace
558	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	140	5	add
559	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	140	5	add
560	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	140	5	add
561	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	140	5	add
562	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >>  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >>  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >>  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  incompatible  types	140	None	add
563	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	140	5	add
564	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	140	5	add
565	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(index,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(index,  start);	  int    fmtCount    =    readArgumentIndex(start,    pattern);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	158	None	replace
566	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
567	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  ')'  expected	130	None	replace
568	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	6	None	replace
569	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	6	None	replace
570	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  2);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    2);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
571	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
572	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
573	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	35	None	add
574	[BUG]  [BUGGY]  char[]  c  =  parseFormat(pattern,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(pattern,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(pattern,  start);	  char[]    c    =    parseFormat(pattern,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	199	None	replace
575	[BUG]  [BUGGY]  char[]  c  =  parseFormat(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(start,  index);	  char[]    c    =    parseFormat(pattern,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	199	None	replace
576	[BUG]  [BUGGY]  char[]  c  =  parseFormat(pattern,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormat(pattern,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormat(pattern,  index  +  1);	  char[]    c    =    parseFormat(pattern,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	199	None	replace
577	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(start);  stripCustom.append(QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
578	[BUG]  [BUGGY]  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(start);  stripCustom.append(QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
579	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(index);  stripCustom.append(QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
580	[BUG]  [BUGGY]  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(index);  stripCustom.append(QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
581	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(index);  stripCustom.append(QUOTE).append(start);	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
582	[BUG]  [BUGGY]  pos.setIndex(index);  stripCustom.append(QUOTE).append(start);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(index);  stripCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(index);  stripCustom.append(QUOTE).append(start);	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
583	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(pattern,  start,  index  +  1);	  int    fmtCount    =    readArgumentCount(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
584	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(pattern,  index,  start);	  int    fmtCount    =    readArgumentCount(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
585	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start,  index  +  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(pattern,  start,  index  +  2);	  int    fmtCount    =    readArgumentCount(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
586	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentCount(pattern,  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentCount(pattern,  start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentCount(pattern,  start,  index);	  int    fmtCount    =    readArgumentCount(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
587	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(index,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(index,  next(pos));	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
588	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index));	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  ';'  expected	86	None	replace
589	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    appendQuotedString(pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	97	None	replace
590	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    appendQuotedString(pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	97	None	replace
591	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	41	None	replace
592	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  2);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	41	None	replace
593	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	142	5	add
594	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	142	5	add
595	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	142	5	add
596	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	142	5	add
597	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >>  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >>  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >>  0)  {  stripCustom.append(START_FE).append(index);  }	  	non-compiled	[CE]  incompatible  types	142	None	add
598	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  ==  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  ==  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	142	5	add
599	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  ==  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  ==  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  ==  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	142	5	add
600	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  index);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
601	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
602	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	129	None	replace
603	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	163	5	replace
604	[BUG]  [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	163	5	replace
605	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	163	5	replace
606	[BUG]  [BUGGY]  if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	163	5	replace
607	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	134	None	replace
608	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(index,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(index,  start);	  int    fmtCount    =    readArgumentCount(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
609	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(start,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(start,  index  +  2);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(start,  index  +  2);	  int    fmtCount    =    readArgumentCount(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
610	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
611	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
612	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	182	5	add
613	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	182	5	add
614	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
615	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
616	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
617	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
618	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	185	None	add
619	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	185	None	add
620	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [CE]  orphaned  default  [FE]          ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	non-compiled	[CE]  orphaned  default	185	None	add
621	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  [CE]  ')'  expected  [FE]            ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,	  	non-compiled	[CE]  ')'  expected	185	None	add
622	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	160	None	replace
623	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	160	None	replace
624	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	160	None	replace
625	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	5	add
626	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	5	add
627	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    2);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }	  	compilable	  [FE]  IllegalArgumentException  	90	5	add
628	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }	  	compilable	  [FE]  IllegalArgumentException  	90	5	add
629	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	90	None	add
630	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
631	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
632	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	171	1	add
633	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	171	1	add
634	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  If(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  If(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    If(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  ';'  expected	171	None	add
635	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
636	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	5	add
637	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	5	add
638	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
639	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	28	None	add
640	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	28	None	add
641	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	5	replace
642	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	5	replace
643	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  pattern);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  pattern);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(start,  pattern);	  char    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	52	None	replace
644	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.getChars(start,    index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	20	None	replace
645	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index,  start);  [CE]  no  suitable  method  found  for  append(int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index,  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index,  start);	  stripCustom.append(QUOTE).append(index);    if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,int)	122	None	replace
646	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
647	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
648	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
649	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
650	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]            IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
651	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
652	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
653	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
654	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	172	5	replace
655	[BUG]  [BUGGY]  stripCustom.append(FINAL_FE).append(index  +  1);  [CE]  cannot  find  symbol  FINAL_FE  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FINAL_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FINAL_FE).append(index  +  1);	  stripCustom.append(FIELD_FE).append(index    +    1);    	non-compiled	[CE]  cannot  find  symbol  FINAL_FE	92	None	replace
656	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(start);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(start);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
657	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(start);  stripCustom.append(END_FE).append(index);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(start);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(start);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
658	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(FIELD_PATTERN).append(start);  [CE]  cannot  find  symbol  FIELD_PATTERN  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(FIELD_PATTERN).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(FIELD_PATTERN).append(start);	  	non-compiled	[CE]  cannot  find  symbol  FIELD_PATTERN	23	None	add
659	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(next(pos));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  start,  index,  next(next(pos));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  ')'  expected	78	None	replace
660	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(pos));  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  start,  index,  next(pos));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
661	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(p));  [CE]  cannot  find  symbol  p  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  next(p));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  start,  index,  next(p));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  p	78	None	replace
662	[BUG]  [BUGGY]  char[]  c  =  getFormat(start  +  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(start  +  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(start  +  index);	  char[]    c    =    getFormat(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	65	None	replace
663	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(QUOTE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	191	5	add
664	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(QUOTE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(QUOTE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	191	5	add
665	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
666	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
667	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
668	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
669	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
670	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  	compilable	  [FE]  ArrayStoreException  	185	5	add
671	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	add
672	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	add
673	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	59	None	add
674	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	59	None	add
675	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  >  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
676	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  >  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
677	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
678	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
679	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
680	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  IllegalArgumentException  	108	5	add
681	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
682	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	5	add
683	[BUG]  [BUGGY]  char[]  c  =  findFormat(start,  index  -  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  findFormat(start,  index  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  findFormat(start,  index  -  1);	  char[]    c    =    findFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	136	None	replace
684	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	134	None	replace
685	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(DUMMY_PATTERN).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(DUMMY_PATTERN).append(index);	  stripCustom.append(FIELD_NAME).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	5	replace
686	[BUG]  [BUGGY]  stripCustom.append(DUMMY_PATTERN).append(index);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(DUMMY_PATTERN).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(DUMMY_PATTERN).append(index);	  stripCustom.append(FIELD_NAME).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	5	replace
687	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
688	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
689	[BUG]  [BUGGY]  if(index  >=  -1)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  pos);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	160	None	replace
690	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	168	None	replace
691	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	5	add
692	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	5	add
693	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	90	5	add
694	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	90	5	add
695	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
696	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
697	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
698	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	178	None	replace
699	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	178	None	replace
700	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
701	[BUG]  [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
702	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
703	[BUG]  [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
704	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
705	[BUG]  [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
706	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
707	[BUG]  [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE).append( "n ");  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
708	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
709	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
710	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(START_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
711	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
712	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
713	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
714	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(QUOTE).append(start);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
715	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	5	replace
716	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	5	replace
717	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  posCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  posCustom  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  posCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    posCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  posCustom	48	None	add
718	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
719	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
720	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
721	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
722	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(start,  index));	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  ';'  expected	86	None	replace
723	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  IllegalArgumentException  	117	5	replace
724	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  IllegalArgumentException  	117	5	replace
725	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append(start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	117	4	replace
726	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append(start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	117	4	replace
727	[BUG]  [BUGGY]  if(start  ==  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  orphaned  default	76	None	replace
728	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  orphaned  default	76	None	replace
729	[BUG]  [BUGGY]  if(start  ==  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  orphaned  default	76	None	replace
730	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
731	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
732	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
733	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
734	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
735	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
736	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	114	None	add
737	[BUG]  [BUGGY]  if(start  >  0)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	167	None	replace
738	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	5	replace
739	[BUG]  [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	5	replace
740	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	5	replace
741	[BUG]  [BUGGY]  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	5	replace
742	[BUG]  [BUGGY]  char[]  c  =  getFormat(end,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(end,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(end,  index);	  char[]    c    =    getFormat(end);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	137	None	replace
743	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
744	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1).append(END_FE);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1).append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index!=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1).append(END_FE);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	196	None	add
745	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	98	None	replace
746	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
747	[BUG]  [BUGGY]  stripCustom.append(FIELD_QUOTE).append(fmtCount);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_QUOTE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_QUOTE).append(fmtCount);	  stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	49	None	replace
748	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(fmtCount);	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	5	replace
749	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(fmtCount);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(fmtCount);	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	5	replace
750	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	15	None	replace
751	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	15	None	replace
752	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  else  {  [CE]  orphaned  default  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  else  {  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  else  {	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  orphaned  default	15	None	replace
753	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	126	5	add
754	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	126	5	add
755	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  1);  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	126	None	add
756	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	112	5	add
757	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	112	5	add
758	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	112	None	add
759	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  next(p));  [CE]  cannot  find  symbol  p  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  next(p));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  next(p));	  appendQuotedString(pattern,    start,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  p	79	None	replace
760	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
761	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  >  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(start  >  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(start  >  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
762	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
763	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
764	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
765	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
766	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
767	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
768	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
769	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  start,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
770	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(	  	non-compiled	[CE]  ')'  expected	166	None	add
771	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	166	5	add
772	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	166	5	add
773	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append	  	non-compiled	[CE]  not  a  statement	166	None	add
774	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	139	None	replace
775	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  stripCustom.append(END_FE).append(index);    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	147	None	replace
776	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
777	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
778	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
779	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append('n');  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
780	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    	non-compiled	[CE]  ';'  expected	106	None	replace
781	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(QUOTE).append(index);    if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	5	replace
782	[BUG]  [BUGGY]  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(QUOTE).append(index);    if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	5	replace
783	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    if(index  >=  -1)  {  stripCustom.append(QUOTE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
784	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(start);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  -1)  {  stripCustom.append(QUOTE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    if(index  >=  -1)  {  stripCustom.append(QUOTE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
785	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  posCustom.append(QUOTE).append(start);  [CE]  cannot  find  symbol  posCustom  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  posCustom.append(QUOTE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    posCustom.append(QUOTE).append(start);	  	non-compiled	[CE]  cannot  find  symbol  posCustom	53	None	add
786	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index  +  1).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	197	5	replace
787	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1).append(END_FE);  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index  +  1).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	197	5	replace
788	[BUG]  [BUGGY]  stripCustom.append(FIELD_QUOTE).append(index  +  1).append(END_FE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_QUOTE).append(index  +  1).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_QUOTE).append(index  +  1).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	197	None	replace
789	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    appendQuotedString(pattern,    start,    index    +    1);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
790	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  posCustom.append(END_FE).append(start);  [CE]  cannot  find  symbol  posCustom  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  posCustom.append(END_FE).append(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    posCustom.append(END_FE).append(start);	  	non-compiled	[CE]  cannot  find  symbol  posCustom	46	None	add
791	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(start);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	46	5	add
792	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	46	5	add
793	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(start);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(start);  }	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	46	None	add
794	[BUG]  [BUGGY]  char[]  c  =  getChars(start,  index,  pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getChars(start,  index,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getChars(start,  index,  pos);	          char[]    c    =    getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	180	None	replace
795	[BUG]  [BUGGY]  char[]  c  =  getChars(start,  index,  fmtCount);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getChars(start,  index,  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getChars(start,  index,  fmtCount);	          char[]    c    =    getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	180	None	replace
796	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
797	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
798	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(FIELD_QUOTE).append(index);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(FIELD_QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(FIELD_QUOTE).append(index);	  	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	16	None	add
799	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(start);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
800	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  pos.setIndex(start);  stripCustom.append(QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    pos.setIndex(start);  stripCustom.append(QUOTE).append(index);	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
801	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	190	None	replace
802	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    index,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
803	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	149	None	replace
804	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start,  index  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  start,  index  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(pattern,  start,  index  -  1);	  int    fmtCount    =    readArgumentCount(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
805	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	88	None	replace
806	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
807	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
808	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  [CE]  orphaned  default  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  orphaned  default	25	None	replace
809	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
810	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
811	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  posCustom.append(END_FE).append(index  +  1);  [CE]  cannot  find  symbol  posCustom  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  posCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    posCustom.append(END_FE).append(index  +  1);	  	non-compiled	[CE]  cannot  find  symbol  posCustom	50	None	add
812	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index    +    1);    if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	50	5	add
813	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index    +    1);    if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	50	5	add
814	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
815	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
816	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
817	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
818	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append	  	non-compiled	[CE]  ';'  expected	26	None	add
819	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  StripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  StripCustom  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  StripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  StripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  StripCustom	104	None	add
820	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	189	None	replace
821	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  orphaned  default	74	None	replace
822	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	replace
823	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	replace
824	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    index);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
825	[BUG]  [BUGGY]  if(index  >=  -1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom[i]  =  parseFormatDescription(pattern,  index);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom[i]    =    parseFormatDescription(pattern,    index);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
826	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(start,  index  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentCount(start,  index  -  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentCount(start,  index  -  1);	  int    fmtCount    =    readArgumentCount(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
827	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos),    fmtCount);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	170	None	replace
828	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	95	None	add
829	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	95	None	add
830	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
831	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }	  	compilable	  [FE]  IllegalArgumentException  	95	5	add
832	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
833	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
834	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
835	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
836	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  IllegalArgumentException  	115	5	replace
837	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    	compilable	  [FE]  IllegalArgumentException  	115	5	replace
838	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	155	None	replace
839	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
840	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
841	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
842	[BUG]  [BUGGY]  if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
843	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  stripCustom.append(QUOTE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
844	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  stripCustom.append(QUOTE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  stripCustom.append(QUOTE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
845	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
846	[BUG]  [BUGGY]  if(start  ==  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  -1)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(QUOTE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
847	[BUG]  [BUGGY]  char[]  c  =  parseFormatDescription(pattern,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormatDescription(pattern,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormatDescription(pattern,  index);	  char[]    c    =    parseFormat(pattern,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	199	None	replace
848	[BUG]  [BUGGY]  char[]  c  =  parseFormatDescription(pattern,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormatDescription(pattern,  start);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormatDescription(pattern,  start);	  char[]    c    =    parseFormat(pattern,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	199	None	replace
849	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	18	None	add
850	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	18	None	add
851	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	18	None	add
852	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
853	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FMT).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
854	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FMT).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(END_FMT).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(END_FMT).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
855	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +(next(index)));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +(next(index)));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +(next(index)));	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos)));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	195	None	replace
856	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append('.');  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append('.');  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append('.');  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	175	None	replace
857	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	124	5	add
858	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	124	5	add
859	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	5	add
860	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	5	add
861	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	124	None	add
862	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	124	None	add
863	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	124	None	add
864	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
865	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
866	[BUG]  [BUGGY]  char[]  c  =  getFormat(index,  start,  pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(index,  start,  pos);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(index,  start,  pos);	  char[]    c    =    getFormat(index,    start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	66	None	replace
867	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    If(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	63	None	replace
868	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
869	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
870	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
871	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
872	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
873	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >=  -1)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
874	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,	  	non-compiled	[CE]  ')'  expected	13	None	add
875	[BUG]  [BUGGY]  stripCustom.append(FINAL_QUOTE).append(index);  [CE]  cannot  find  symbol  FINAL_QUOTE  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FINAL_QUOTE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FINAL_QUOTE).append(index);	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  cannot  find  symbol  FINAL_QUOTE	123	None	replace
876	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
877	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
878	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	173	None	add
879	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	173	None	add
880	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	173	None	add
881	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	173	None	add
882	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
883	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  pattern.toCharArray(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  pattern.toCharArray(start);	          char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	179	None	replace
884	[BUG]  [BUGGY]  char[]  c  =  it.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  it.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  it.toCharArray();	          char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	179	None	replace
885	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	5	replace
886	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	5	replace
887	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	156	None	replace
888	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	186	5	replace
889	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	186	5	replace
890	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	192	5	replace
891	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	192	5	replace
892	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	192	5	replace
893	[BUG]  [BUGGY]  if(start  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	192	5	replace
894	[BUG]  [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  END_FE  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
895	[BUG]  [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  END_FE  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
896	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >=  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	120	None	add
897	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  continue;  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  continue;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  continue;  }	  	non-compiled	[CE]  orphaned  default	120	None	add
898	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index	  	non-compiled	[CE]  ')'  expected	120	None	add
899	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index));  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  ';'  expected	84	None	replace
900	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(')');  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(')');  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(')');  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    pattern.length()    -    start,    fmtCount    	non-compiled	[CE]  ')'  expected	177	None	replace
901	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	193	5	add
902	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >=  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >=  0)  {  stripCustom.append(END_FE).append( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	193	5	add
903	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	93	None	add
904	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	93	None	add
905	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	93	None	add
906	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	138	None	replace
907	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	142	5	add
908	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	142	5	add
909	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
910	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
911	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +(next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	161	None	replace
912	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(START_FE).append(start);  }	  if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	103	5	replace
913	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(start);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(start);  }	  if(start    <    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	103	5	replace
914	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  '.class'  expected	176	None	replace
915	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	pos.setIndex(start);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
916	[BUG]  [BUGGY]  pos.setIndex(start);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  pos.setIndex(start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	pos.setIndex(start);	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
917	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	5	replace
918	[BUG]  [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  ==  -1)  {  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	5	replace
919	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	5	replace
920	[BUG]  [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	5	replace
921	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	5	replace
922	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	5	replace
923	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	77	None	replace
924	[BUG]  [BUGGY]  char[]  c  =  parseFormatDescription(pattern,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  parseFormatDescription(pattern,  start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  parseFormatDescription(pattern,  start,  index);	  char[]    c    =    parseFormat(pattern,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	199	None	replace
925	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	81	None	replace
926	[BUG]  [BUGGY]  char[]  c  =  findFormat(pattern,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  findFormat(pattern,  start,  index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  findFormat(pattern,  start,  index);	  char[]    c    =    findFormat(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	136	None	replace
927	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  stripCustom.append(QUOTE).append(index);    if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	189	None	replace
928	[BUG]  [BUGGY]  stripCustom.append(FIELD_FE).append(index  +  2);  [CE]  cannot  find  symbol  FIELD_FE  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(FIELD_FE).append(index  +  2);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(FIELD_FE).append(index  +  2);	  stripCustom.append(START_FE).append(index    +    2);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	91	None	replace
929	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(start);    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	compilable	  [FE]  IllegalArgumentException  	46	5	add
930	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(start);  if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(start);    if(index  <  0)  {  stripCustom.append(END_FE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	compilable	  [FE]  IllegalArgumentException  	46	5	add
931	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
932	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
933	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount	  	non-compiled	[CE]  ')'  expected	21	None	add
934	[BUG]  [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
935	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(END_FE).append('n');  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
936	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append('n');  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	5	replace
937	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >  0)  {  stripCustom.append(END_FE).append(index);  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	144	None	add
938	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index  +	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    appendQuotedString(pattern,    start,    index    +    1);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
939	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
940	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
941	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
942	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
943	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
944	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  stripCustom.append(END_FE).append('n');  }	  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	5	replace
945	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
946	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	48	5	add
947	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    if(index  <  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	add
948	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount);  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount);    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	add
949	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	add
950	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	add
951	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START	  	non-compiled	[CE]  ')'  expected	59	None	add
952	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(')');  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(')');  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(')');  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    pattern.length()    -    start,    fmtCount    	non-compiled	[CE]  ')'  expected	177	None	replace
953	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	112	5	add
954	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	112	5	add
955	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [CE]  no  suitable  method  found  for  append(int,int)  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	non-compiled	[CE]  no  suitable  method  found  for  append(int,int)	112	None	add
956	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    >    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	28	None	add
957	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
958	[BUG]  [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  pos.setIndex(index);  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    pos.setIndex(index);    stripCustom.append(QUOTE).append(index);    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
959	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	75	None	add
960	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
961	[BUG]  [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  END_FE  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  END_FE  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);	  stripCustom.append(END_FE).append(index);    char    END_FE    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
962	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount  -  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(fmtCount  -  start);	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	5	replace
963	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(fmtCount  -  start);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(fmtCount  -  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(fmtCount  -  start);	  stripCustom.append(END_FE).append(fmtCount);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	5	replace
964	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  pos,  pattern,  start,  index  +  1,  fmtCount);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    pos,    pattern,    start,    index    +    1);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	98	None	replace
965	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	124	5	add
966	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	124	5	add
967	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(start    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	124	5	add
968	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	124	5	add
969	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	124	None	add
970	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	124	None	add
971	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(start  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(start    +    1);    if(index  >=  0)  {  stripCustom.append(END_FE).append(start  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  	non-compiled	[CE]  ')'  expected	124	None	add
972	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
973	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
974	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length  [CE]  ')'  expected  [FE]    ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length	  	non-compiled	[CE]  ')'  expected	185	None	add
975	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c  [CE]  ')'  expected  [FE]      ArrayStoreException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c.length);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    c.length);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  c	  	non-compiled	[CE]  ')'  expected	185	None	add
976	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  '.class'  expected	176	None	replace
977	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [CE]  '.class'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    	non-compiled	[CE]  '.class'  expected	176	None	replace
978	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(FINAL_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  FINAL_QUOTE  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(FINAL_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(FINAL_QUOTE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  FINAL_QUOTE	31	None	replace
979	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
980	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
981	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	82	None	replace
982	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
983	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	73	None	add
984	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
985	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	25	None	replace
986	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(pattern,  start,  fmtCount  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(pattern,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(pattern,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  ')'  expected	25	None	replace
987	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	95	None	add
988	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	95	None	add
989	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	5	replace
990	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append('n');  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	5	replace
991	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >  0)  {  stripCustom.append(END_FE).append('n');  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE).append('n');    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
992	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	122	None	replace
993	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	108	None	add
994	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	108	None	add
995	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	108	None	add
996	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
997	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(END_FE).append(index    +    1);    }    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  if(index!=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
998	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
999	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
1000	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
1001	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
1002	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(start);    if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
1003	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(start);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(start);    if(index  >=  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	53	5	add
1004	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append( ", ");  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos),    fmtCount);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	170	None	replace
1005	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(charAt(index  +  1));  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(charAt(index  +  1));  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(charAt(index  +  1));  }  else  {  appendQuotedString(pattern,  start,  next(pos),  fmtCount);  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos),    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
1006	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	157	None	replace
1007	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
1008	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  <  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
1009	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
1010	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >=  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	add
1011	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  [CE]  '.class'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  stripCustom.append(QUOTE).append(index);  }  else  {  System.arraycopy(c,  start,  char[]	  	non-compiled	[CE]  '.class'  expected	13	None	add
1012	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1,  pattern.length());  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [CE]  no  suitable  method  found  for  append(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1,  pattern.length());  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1,  pattern.length());  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,int)	117	None	replace
1013	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	5	replace
1014	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	5	replace
1015	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [CE]  orphaned  default  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(START_FE).append(index  +  1);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	non-compiled	[CE]  orphaned  default	93	None	add
1016	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	37	5	add
1017	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	37	5	add
1018	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	37	5	add
1019	[BUG]  [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	37	5	add
1020	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.getChars(start,  index);  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.getChars(start,    index);    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	20	None	replace
1021	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    >    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  >  0)  {  stripCustom.append(QUOTE).append(index);  if(start  >  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
1022	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }	          if(index    <    0)    {    for(int    i    =    start;    i    <    index;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	83	None	replace
1023	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  ==  0)  {  stripCustom.append(QUOTE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	88	None	replace
1024	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(fmtCount));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  index,  next(fmtCount));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  index,  next(fmtCount));	  appendQuotedString(pattern,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
1025	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	175	None	replace
1026	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	5	replace
1027	[BUG]  [BUGGY]  if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	5	replace
1028	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	15	None	replace
1029	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	15	None	replace
1030	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  char[]  c  =  pattern.toCharArray();  stripCustom.append(QUOTE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(QUOTE).append(index);    char[]    c    =    pattern.toCharArray();    stripCustom.append(QUOTE).append(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	15	None	replace
1031	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FMT).append(index);    if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
1032	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FMT).append(index);  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FMT).append(index);    if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	5	add
1033	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	40	None	replace
1034	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  pos);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	40	None	replace
1035	[BUG]  [BUGGY]  char[]  c  =  getFormat(quotePattern(start,  index));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(quotePattern(start,  index));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(quotePattern(start,  index));	  char[]    c    =    getFormat(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	65	None	replace
1036	[BUG]  [BUGGY]  char[]  c  =  getFormat(quotePattern(start));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  getFormat(quotePattern(start));  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  getFormat(quotePattern(start));	  char[]    c    =    getFormat(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	65	None	replace
1037	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	5	replace
1038	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    <    0)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	5	replace
1039	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  ArrayStoreException  	116	5	add
1040	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  <  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  ArrayStoreException  	116	5	add
1041	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  ArrayStoreException  	116	5	add
1042	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  ArrayStoreException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  ArrayStoreException  	116	5	add
1043	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
1044	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    pattern.length());    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  pattern.length());  }	  	compilable	  [FE]  IllegalArgumentException  	116	5	add
1045	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  stripCustom.append(END_FE).append(index);    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	147	None	replace
1046	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  END_FE);  [BUGGY]      stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
1047	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FMT).append('.');  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FMT).append('.');  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FMT).append('.');  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  stripCustom.append(END_FE).append(index);    if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    System.arraycopy(c,    start,    char[]    c,    start,    fmtCount    	non-compiled	[CE]  '.class'  expected	184	None	replace
1048	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >>  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >>  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >>  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	162	None	add
1049	[BUG]  [BUGGY]  if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  stripCustom.append(QUOTE).append(index);    if(start    >    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
1050	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >>  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(index  >>  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(index  >>  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	193	None	add
1051	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	166	5	add
1052	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	166	5	add
1053	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	166	5	add
1054	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(START_FMT).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	166	5	add
1055	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	166	5	add
1056	[BUG]  [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index    <    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(START_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index        <        0)        {        stripCustom.append(START_FE).append(index);        }        if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  if(index!=  0)  {  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	166	5	add
1057	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	char[]  c  =  this.pattern.toCharArray();	          char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	179	None	replace
1058	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index  +  1).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	197	5	replace
1059	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index  +  1).append(END_FE);  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index  +  1).append(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index  +  1).append(END_FE);	  stripCustom.append(START_FE).append(index    +    1).append(END_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	197	5	replace
1060	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1061	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	171	5	add
1062	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [FE]  IllegalArgumentException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  >=  0)  {  stripCustom.append(QUOTE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	171	5	add
1063	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(START_FE).append(index);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1064	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	18	None	add
1065	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(QUOTE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(QUOTE).append(index);  if(start  >  fmtCount)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	18	None	add
1066	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	5	replace
1067	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(START_FE).append(index);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >  0)  {  stripCustom.append(START_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >  0)  {  stripCustom.append(START_FE).append(index);  }	  if(index    >=    0)    {    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	5	replace
1068	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
1069	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  if(index  >  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index);        if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    if(index  >  0)  {  stripCustom.append(QUOTE).append(index);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index);  }	  	non-compiled	[CE]  orphaned  default	187	None	add
1070	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
1071	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(START_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(START_FMT).append(index);	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
1072	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(END_FMT).append(index);  [CE]  cannot  find  symbol  END_FMT  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FE).append(index);  pos.setIndex(index);  stripCustom.append(END_FMT).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        pos.setIndex(index);    stripCustom.append(END_FE).append(index);    pos.setIndex(index);  stripCustom.append(END_FMT).append(index);	  	non-compiled	[CE]  cannot  find  symbol  END_FMT	23	None	add
1073	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FMT).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  <  fmtCount)  {  stripCustom.append(END_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
1074	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(start    <    fmtCount)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  fmtCount)  {  stripCustom.append(END_FE).append(index);  if(start  >=  fmtCount)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
1075	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	114	5	add
1076	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  <  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	114	5	add
1077	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
1078	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  IllegalArgumentException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    fmtCount);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  IllegalArgumentException  	114	5	add
1079	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [CE]  no  suitable  method  found  for  append(int,int)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index,    next(pos));    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,int)	80	None	replace
1080	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  index,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    appendQuotedString(pattern,    start,    index,    next(pos));    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
1081	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index,  pos);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [CE]  no  suitable  method  found  for  append(int,ParsePosition)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(index,  pos);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(index,  pos);  }  else  {  appendQuotedString(pattern,  start,  next(pos));  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    appendQuotedString(pattern,    start,    next(pos));    }    	non-compiled	[CE]  no  suitable  method  found  for  append(int,ParsePosition)	148	None	replace
1082	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
1083	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
1084	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
1085	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(index);  stripCustom.append(END_FE).append(index);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stripCustom.append(END_FE).append(index);    pos.setIndex(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  IllegalArgumentException  	24	5	replace
1086	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(QUOTE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	126	5	add
1087	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  >=  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    if(index  >=  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	126	5	add
1088	[BUG]  [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(QUOTE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(QUOTE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(QUOTE).append(index  +  1);  }  else  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	126	None	add
1089	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  next(index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  appendQuotedString(pattern,  pos,  next(index));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	appendQuotedString(pattern,  pos,  next(index));	  appendQuotedString(pattern,    start,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	79	None	replace
1090	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length);  }  [CE]  cannot  find  symbol  length  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    1).append(END_FE);    if(index  >=  -1)  {  stripCustom.append(START_FE).append(index  +  1).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	196	None	add
1091	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1092	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1093	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1094	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(START_FE);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1095	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1096	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  stripCustom.append(END_FE).append(index);  }  else  {  stripCustom.append(END_FE);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1097	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1098	[BUG]  [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount);  }	  stripCustom.append(END_FE).append(index);    stripCustom.append(END_FE).append(index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	5	replace
1099	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	90	5	add
1100	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  >=  0)  {  stripCustom.append(END_FE).append(index  +  2);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	90	5	add
1101	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [CE]  '.class'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  fmtCount	  	non-compiled	[CE]  '.class'  expected	90	None	add
1102	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [CE]  '.class'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  <  0)  {  stripCustom.append(START_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  char[]  c,  start,	  	non-compiled	[CE]  '.class'  expected	90	None	add
1103	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index  +  2);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index    +    2);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  2);  }  else  {  System.arraycopy(c,  start,  fmtCount,  pattern.length()  -  start,  fmtCount	  	non-compiled	[CE]  ')'  expected	90	None	add
1104	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	173	5	add
1105	[BUG]  [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(START_FE).append(index    +    1);    if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(START_FE).append(index        +        1);        if(index    <    0)    {    stripCustom.append(END_FE).append(index    +    1);    }    stripCustom.append(END_FE).append(index  +  1);  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	173	5	add
1106	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	192	5	replace
1107	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE).append(start);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(index    <    0)    {    stripCustom.append(QUOTE).append(index);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	192	5	replace
1108	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	5	replace
1109	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  >=  -1)  {  stripCustom.append(END_FE).append(index  +  1);  }	  stripCustom.append(START_FE).append(index    +    1);    if(index    >=    -1)    {    stripCustom.append(START_FE).append(index    +    1);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	5	replace
1110	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(START_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
1111	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FMT).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FMT).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  if(index  <  0)  {  stripCustom.append(END_FMT).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
1112	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FMT).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  stripCustom.append(END_FE).append(index);    if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  <  0)  {  stripCustom.append(END_FMT).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	stripCustom.append(END_FE).append(index);        if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  <  0)  {  stripCustom.append(END_FMT).append(index);  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	182	None	add
1113	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	add	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	100	5	add
1114	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	100	5	add
1115	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	168	168	1	replace	if(index  <  0)  {  stripCustom.append(END_FE).append(index  +  1);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos	  if(index    <    0)    {    stripCustom.append(END_FE).append(index);    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos    	non-compiled	[CE]  ')'  expected	87	None	replace
