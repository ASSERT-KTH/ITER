projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(pattern.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),toPattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(fmtCount);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()*foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),foundDescriptions);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<char[]>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(8);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions,pattern.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Ilerator<String>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=this.foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats==null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(4);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<char>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats,foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
