projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(pattern.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),toPattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(fmtCount);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()*foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),foundDescriptions);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<char[]>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(8);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions,pattern.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Ilerator<String>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=this.foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats==null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats==null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(4);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<char>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats,foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions,foundFormats.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(stripCustom,foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats,foundDescriptions.length(),toPattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats,foundDescriptions.length(),pattern.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,0,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length+2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length+3);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),toPattern.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),pattern.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length+2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Ilerator<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length-2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size()+2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),toPattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),description);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size(),foundDescriptions);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(toPattern.length(),foundDescriptions);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),pattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),toPattern,pattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size(),toPattern);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(7);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(6);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,i.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,toPattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.size-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()*foundDescriptions.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.size()-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Set<String>foundDescriptions=newHashSet<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),toPattern.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),pattern.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),foundFormats.length+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());StringBuilderstripCustom=newStringBuilder(foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());char[]foundFormats=newchar[foundFormats.size()];
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());junit.framework.AssertionFailedError:registry.registerFormat(foundDescriptions,true);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());junit.framework.AssertionFailedError:registry.assertTrue(foundFormats.size()>0);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());junit.framework.AssertionFailedError:registry.assertTrue(foundFormats.size()>1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<char>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Character>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Formats.for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153For(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());junit.framework.AssertionFailedError:registry.registerFormat(foundDescriptions,true);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());junit.framework.AssertionFailedError:registry.assertTrue(foundDescriptions.size()>0);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());junit.framework.AssertionFailedError:registry.assertTrue(foundDescriptions.size()>1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());junit.framework.AssertionFailedError:registry.registerFormat(foundDescriptions,false);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions,toPattern.length()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),origFormats);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),origFormats.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(pattern.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions,pattern.length-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+1,foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions,pattern.length-2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats,foundDescriptions.length()+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<Object>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<Object>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153For(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<Object>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(0);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){StringBuilderstripCustom=newStringBuilder(foundFormats.size());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){StringBuilderstripCustom=newStringBuilder(foundFormats.size());}else{System.arraycopy(foundDescriptions,0,foundDescriptions,0,foundDescriptions.length);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){StringBuilderstripCustom=newStringBuilder(foundFormats.size());}else{System.arraycopy(origFormats,0,foundDescriptions,0,foundDescriptions.length);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()*foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length-2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>foundFormats=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>(fmtCount);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>(1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(fmtCount+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(fmtCount*2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(fmtCount,1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<Object>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(pattern.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()*foundDescriptions.length+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()/foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Formats.for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<Object>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();toPattern.add(it.next());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<char[]>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String[]>it=foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<Object>it=foundFormats.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<Object>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(5);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.keySet().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153List<String>it=foundDescriptions.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions,foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Collections.<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=foundDescriptions.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<Object>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(entry.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundFormats.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>(0);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>(8);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=this.foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Ilerator<Object>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),foundDescriptions.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),orderedFormats.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),dataArea,foundDescriptions);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),dataArea,foundFormats);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),format);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153For(Iterator<String>it=foundFormats.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,0);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions.length*1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),toPattern,ESCAPED_QUOTE);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<Format>foundFormats=newArrayList<Format>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());ArrayList<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());ArrayList<String>foundDescriptions=newArrayList<String>(foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());Iterator<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());char[]foundDescriptions=newchar[foundDescriptions.size()];
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Ilerator<String>it=foundFormats.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(pattern.getValue(),foundDescriptions);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.values().iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153For(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.length(),foundDescriptions.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length(),orderedFormats.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length*1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());ArrayList<String>foundFormats=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());ArrayList<String>foundFormats=newArrayList<String>(foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());ArrayList<String>foundFormats=newArrayList<String>(foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());Iterator<String>it=foundDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>stripCustom=newArrayList<String>(foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>toPattern=newArrayList<String>(foundFormats.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Ilerator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(entry.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=this.foundFormats.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+1,pattern.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>(4);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundFormats=newArrayList<String>(2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions,toPattern.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){System.arraycopy(foundDescriptions,0,foundDescriptions,0,foundDescriptions.size());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size());if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,i,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=left.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size+1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(entry.getKey(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats,foundDescriptions.size());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Collection<String>foundDescriptions=newArrayList<String>();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153ArrayList<String>foundDescriptions=newArrayList<String>(fmtCount-1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.entrySet().iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size(),foundFormats);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<Object>it=discoveredDescriptions.iterator();
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.entrySet().iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,END_FE,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,d,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions==null){for(Iterator<String>it=foundFormats.iterator();it.hasNext();){toPattern.add(it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<?>it=foundDescriptions.iterator();it.hasNext();){appendString(pattern,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.length()*1);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundDescriptions!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.remove());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){applyPattern(pattern.getValue(),START_FE);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153for(Iterator<String>it=foundFormats.iterator();it.hasNext();){applyPattern(pattern.getValue(),pattern);}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());if(foundFormats!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,pos,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());if(foundFormats!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){System.arraycopy(foundFormats,0,foundDescriptions,0,foundDescriptions.size());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundFormats.size());if(foundFormats!=null){for(Iterator<String>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,i,it.next());}
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions,toPattern.length());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+foundDescriptions,pattern.toPattern());
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(length()+DUMMY_PATTERN,pattern.length);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153StringBuilderstripCustom=newStringBuilder(foundDescriptions.size()*2);
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){StringBuilderstripCustom=newStringBuilder(foundFormats.size());}else{for(Iterator<Format>it=foundDescriptions.iterator();it.hasNext();){appendQuotedString(pattern,
projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java153if(foundFormats!=null){StringBuilderstripCustom=newStringBuilder(foundFormats.size());}else{for(Iterator<Format>it=foundDescriptions.iterator();it.hasNext();){appendPattern(pattern,it.next()
