bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	2	add
2	[BUG]  [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	2	add
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()!=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	62	5	add
4	[BUG]  [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()!=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	62	5	add
5	[BUG]  [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  >>  START_FMT)  {  continue;  }  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  >>  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()  >>  START_FMT)  {  continue;  }	  	non-compiled	[CE]  incompatible  types	62	None	add
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	2	add
7	[BUG]  [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    >=    START_FMT)    {    continue;    }    if(pos.getIndex()  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	2	add
8	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos.getIndex()  -  START_FMT);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos.getIndex()  -  START_FMT);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos.getIndex()  -  START_FMT);	  char    END_FE    =    c.charAt(pos.getIndex()    -    index);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  char  END_FE  =  C[pos.getIndex()  ];  [CE]  cannot  find  symbol  C  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  C[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  C[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    char    END_FE    =    C[pos.getIndex()    ];    	non-compiled	[CE]  cannot  find  symbol  C	125	None	replace
10	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  +  1));  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  +  1));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  +  1));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    -    1));    	non-compiled	[CE]  ']'  expected	15	None	replace
11	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  start);	  int    fmtCount    =    readArgumentIndex(p,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	44	None	replace
12	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  pos);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(start,  pos);	  int    fmtCount    =    readArgumentIndex(p,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	44	None	replace
13	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN[pos.getIndex()],  ESCAPED_QUOTE);  [CE]  array  required,  but  String  found  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN[pos.getIndex()],  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN[pos.getIndex()],  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    ],    ESCAPED_QUOTE);    	non-compiled	[CE]  array  required,  but  String  found	93	None	replace
14	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ],  END_FE,  ESCAPED_QUOTE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ],  END_FE,  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ],  END_FE,  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    ],    ESCAPED_QUOTE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	93	None	replace
15	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DEFAULT_PATTERN,  c[pos.getIndex()  ],  ESCAPED_QUOTE);  [CE]  cannot  find  symbol  DEFAULT_PATTERN  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DEFAULT_PATTERN,  c[pos.getIndex()  ],  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DEFAULT_PATTERN,  c[pos.getIndex()  ],  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    ],    ESCAPED_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PATTERN	93	None	replace
16	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ],  START_FMT);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ],  START_FMT);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ],  START_FMT);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    ],    ESCAPED_QUOTE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	93	None	replace
17	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(start,  pos.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(start,  pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(start,  pos.getIndex()  -  start);	  char    END_FE    =    c.charAt(pos,    start.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
18	[BUG]  [BUGGY]  char  END_FE  =  start.charAt(pos,  c.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  start.charAt(pos,  c.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  start.charAt(pos,  c.getIndex()  -  start);	  char    END_FE    =    c.charAt(pos,    start.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
19	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos,  start.getIndex()  -  index);  [CE]  int  cannot  be  dereferenced  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos,  start.getIndex()  -  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos,  start.getIndex()  -  index);	  char    END_FE    =    c.charAt(pos,    start.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
20	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos,  start.getIndex()  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos,  start.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos,  start.getIndex()  -  1);	  char    END_FE    =    c.charAt(pos,    start.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
21	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start)+  1);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start)+  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start)+  1);	  formatDescription    =    parseFormatDescription(c,    pos)+    1);    	non-compiled	[CE]  ';'  expected	123	None	replace
22	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index)+  1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index)+  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index)+  1);	  formatDescription    =    parseFormatDescription(c,    pos)+    1);    	non-compiled	[CE]  ';'  expected	123	None	replace
23	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)+  2);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)+  2);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos)+  2);	  formatDescription    =    parseFormatDescription(c,    pos)+    1);    	non-compiled	[CE]  ';'  expected	123	None	replace
24	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	57	5	replace
25	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  continue;  }  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	57	5	replace
26	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  start]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  -  start]  ==  START_FMT)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	57	5	replace
27	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  start]  ==  START_FMT)  {  continue;  }  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  start]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  start]  ==  START_FMT)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	57	5	replace
28	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	57	5	replace
29	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	57	5	replace
30	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  START_FMT)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	70	None	replace
31	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	70	None	replace
32	[BUG]  [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  >=  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	70	None	replace
33	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  index.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  index.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  index.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos.getIndex()));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
35	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
36	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos[pos.getIndex()  -  1]);  [CE]  array  required,  but  ParsePosition  found  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pos[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    pos[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  ParsePosition  found	40	None	replace
37	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos[pos.getIndex()]);  [CE]  array  required,  but  ParsePosition  found  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos[pos.getIndex()]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos[pos.getIndex()]);	  formatDescription    =    parseFormatDescription(c,    pos[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  ParsePosition  found	40	None	replace
38	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  end,  pos[pos.getIndex()  -  1]);  [CE]  cannot  find  symbol  end  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  end,  pos[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  end,  pos[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    pos[pos.getIndex()    -    1]);    	non-compiled	[CE]  cannot  find  symbol  end	40	None	replace
39	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start[pos.getIndex()  -  1]);  [CE]  array  required,  but  int  found  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    pos[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  int  found	40	None	replace
40	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(index,  start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(index,  start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  next(index,  start));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
41	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(start,  index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(start,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  next(start,  index));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
42	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  next(start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  next(start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index,  next(start));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
43	[BUG]  [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  cannot  find  symbol  FormatDescription  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  FormatDescription	82	None	replace
44	[BUG]  [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1]);  [CE]  cannot  find  symbol  FormatDescription  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  FormatDescription	82	None	replace
45	[BUG]  [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  ESCAPED_QUOTE);  [CE]  cannot  find  symbol  FormatDescription  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  FormatDescription	82	None	replace
46	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    index,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	4	None	replace
47	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  pos,  next(index));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  pos,  next(index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  pos,  next(index));	  Format    formatDescription    =    parseFormatDescription(c,    index,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	4	None	replace
48	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_	  	non-compiled	[CE]  ')'  expected	67	None	add
49	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
50	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
51	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START	  	non-compiled	[CE]  ')'  expected	67	None	add
52	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_	  	non-compiled	[CE]  ')'  expected	67	None	add
53	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
54	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	67	5	add
55	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  start.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	12	None	replace
56	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	12	None	replace
57	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	12	None	replace
58	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  >  START_FMT)  {  continue;  }	  if(pos.getIndex()    >=    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	63	5	replace
59	[BUG]  [BUGGY]  if(pos.getIndex()  >  START_FMT)  {  continue;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  >  START_FMT)  {  continue;  }	  if(pos.getIndex()    >=    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	63	5	replace
60	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()!=  START_FMT)  {  continue;  }	  if(pos.getIndex()    >=    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	63	5	replace
61	[BUG]  [BUGGY]  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()!=  START_FMT)  {  continue;  }	  if(pos.getIndex()    >=    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	63	5	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	129	5	add
63	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	129	5	add
64	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	129	None	add
65	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [CE]  orphaned  default  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	non-compiled	[CE]  orphaned  default	129	None	add
66	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	129	None	add
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription!=  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription!=  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	129	5	add
68	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription!=  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription!=  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription!=  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	129	5	add
69	[BUG]  [BUGGY]  String  END_FE  =  format.charAt(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  format.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  format.charAt(pos.getIndex()  -  1);	  char    END_FE    =    format.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
70	[BUG]  [BUGGY]  char  END_FE  =  format.charAt(pos,  pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  format.charAt(pos,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  format.charAt(pos,  pos.getIndex()  -  1);	  char    END_FE    =    format.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
71	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos,  start));	  formatDescription    =    parseFormatDescription(c,    next(start,    pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
72	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  next(start,  pos));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  next(start,  pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index,  next(start,  pos));	  formatDescription    =    parseFormatDescription(c,    next(start,    pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
73	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos,  fmtCount));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos,  fmtCount));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  next(pos,  fmtCount));	  formatDescription    =    parseFormatDescription(c,    next(start,    pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
74	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMM  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMM  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMM	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  ')'  expected	131	None	replace
75	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  orphaned  default	131	None	replace
76	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  ')'  expected	131	None	replace
77	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  ';'  expected	131	None	replace
78	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos,  pos.getIndex()  -  index);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos,  pos.getIndex()  -  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos,  pos.getIndex()  -  index);	  char    END_FE    =    c.charAt(pos,    pos.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
79	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  next(index));	  formatDescription    =    parseFormatDescription(c,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	8	None	replace
80	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  index,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  index,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c,  index,  next(pos));	  formatDescription    =    parseFormatDescription(c,    index,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	8	None	replace
81	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    char    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  incompatible  types	45	None	replace
82	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  String  END_FE  =  c[pos.getIndex()  -  1];  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  String  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  -  1];  String  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    char    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  incompatible  types	45	None	replace
83	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  char  END_FE  =  c[pos.getIndex()  -  1];  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  char  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  -  1];  char  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    char    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  incompatible  types	45	None	replace
84	[BUG]  [BUGGY]  char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  1);	  char    END_FE    =    fmtCount.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	105	None	replace
85	[BUG]  [BUGGY]  char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  index);  [CE]  int  cannot  be  dereferenced  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  index);	  char    END_FE    =    fmtCount.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	105	None	replace
86	[BUG]  [BUGGY]  char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  start,  index);  [CE]  int  cannot  be  dereferenced  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  fmtCount.charAt(pos.getIndex()  -  start,  index);	  char    END_FE    =    fmtCount.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	105	None	replace
87	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	115	None	replace
88	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	115	None	replace
89	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos),  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos),  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  next(pos),  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
90	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  ESCAPED_QUOTE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos),  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
91	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  ESCAPED_QUOTE,  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  ESCAPED_QUOTE,  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos),  ESCAPED_QUOTE,  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
92	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
93	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
94	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
95	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
96	[BUG]  [BUGGY]  if(next(c.getIndex())  ==  START_FMT)  {  continue;  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(next(c.getIndex())  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(next(c.getIndex())  ==  START_FMT)  {  continue;  }	  if(next(pos.getIndex())    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
97	[BUG]  [BUGGY]  if(next(pos.getIndex()  -  1)  ==  START_FMT)  {  continue;  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(next(pos.getIndex()  -  1)  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(next(pos.getIndex()  -  1)  ==  START_FMT)  {  continue;  }	  if(next(pos.getIndex())    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	replace
98	[BUG]  [BUGGY]  if(next(pos.getIndex())  ==  START_FE)  {  continue;  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(next(pos.getIndex())  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(next(pos.getIndex())  ==  START_FE)  {  continue;  }	  if(next(pos.getIndex())    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	replace
99	[BUG]  [BUGGY]  char  END_FE  =  format.charAt(pos.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  format.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  format.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	compilable	  [FE]  NullPointerException  	106	5	replace
101	[BUG]  [BUGGY]  char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  start);  [FE]  NullPointerException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	compilable	  [FE]  NullPointerException  	106	5	replace
102	[BUG]  [BUGGY]  char  END_FE  =  START_FE.charAt(pos.getIndex()  -  start);  [CE]  char  cannot  be  dereferenced  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  START_FE.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  START_FE.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  char  cannot  be  dereferenced	106	None	replace
103	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  START_FMT));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  START_FMT));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  START_FMT));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
104	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  start));  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  start));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
105	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  end));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  end));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  end));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
106	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  DEFAULT_QUOTE));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  DEFAULT_QUOTE));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  DEFAULT_QUOTE));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
107	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  DUMMY_PATTERN[pos.getIndex()  ]);  [CE]  array  required,  but  String  found  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  DUMMY_PATTERN[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  DUMMY_PATTERN[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  String  found	87	None	replace
108	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start[pos.getIndex()  ]);  [CE]  array  required,  but  int  found  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  int  found	87	None	replace
109	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  DUMMY_PATTERN[pos.getIndex()  ]);  [CE]  array  required,  but  String  found  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  DUMMY_PATTERN[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  DUMMY_PATTERN[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  String  found	87	None	replace
110	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex(),  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex(),  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex(),  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
111	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
112	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  start.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  start.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  start.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
113	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
114	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex()  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	13	None	replace
115	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
116	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(start,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
117	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex())-    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	139	None	replace
118	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex())-  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex())-  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex())-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex())-    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	139	None	replace
119	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex())/  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex())/  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex())/  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex())-    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	139	None	replace
120	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  next(pos.getIndex())-  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  next(pos.getIndex())-  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(start,  next(pos.getIndex())-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex())-    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	139	None	replace
121	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos,  index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  next(pos,  index));	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
122	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index),  stripCustom);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index),  stripCustom);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos,  index),  stripCustom);	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
123	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(start,  index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(start,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(start,  index));	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
124	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index  +  1));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index  +  1));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos,  index  +  1));	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
125	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  ==  START_FMT)  {  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  orphaned  default	66	None	replace
126	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	107	None	replace
127	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	107	None	replace
128	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  next(c));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  next(c));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  next(c));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	107	None	replace
129	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	107	None	replace
130	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  index,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  index,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  index,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    index,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	26	None	replace
131	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    Char    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  incompatible  types	48	None	replace
132	[BUG]  [BUGGY]  Character  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Character  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Character  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    Char    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
133	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN[pos.getIndex()  -  1]);  [CE]  array  required,  but  String  found  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    path[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  String  found	42	None	replace
134	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  QUOTE[pos.getIndex()  -  1]);  [CE]  array  required,  but  char  found  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  QUOTE[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  QUOTE[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    path[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  char  found	42	None	replace
135	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  char[pos.getIndex()  -  1]);  [CE]  ']'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  char[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  char[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    path[pos.getIndex()    -    1]);    	non-compiled	[CE]  ']'  expected	42	None	replace
136	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	81	None	replace
137	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1]);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	81	None	replace
138	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  ESCAPED_QUOTE);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	81	None	replace
139	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	81	None	replace
140	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  pos,  start(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  pos,  start(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  pos,  start(pos));	  Format    formatDescription    =    parseFormatDescription(c,    start,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	3	None	replace
141	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index,  start  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  index,  start  +  1);	  int    fmtCount    =    readArgumentIndex(c,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	32	None	replace
142	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  -  1]  ==  END_FE)  {  continue;  }	  if(c[pos.getIndex()    1]    ==    END_FE)    {    continue;    }    	compilable	  [FE]  NullPointerException  	118	5	replace
143	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  continue;  }  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1]  ==  END_FE)  {  continue;  }	  if(c[pos.getIndex()    1]    ==    END_FE)    {    continue;    }    	compilable	  [FE]  NullPointerException  	118	5	replace
144	[BUG]  [BUGGY]  if(c[pos.getIndex()  1]  ==  QUOTE)  {  continue;  }  [CE]  ']'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  1]  ==  QUOTE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  1]  ==  QUOTE)  {  continue;  }	  if(c[pos.getIndex()    1]    ==    END_FE)    {    continue;    }    	non-compiled	[CE]  ']'  expected	118	None	replace
145	[BUG]  [BUGGY]  String  END_FE  =  format[pos.getIndex()  -  1];  [CE]  array  required,  but  Format  found  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  format[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  format[pos.getIndex()  -  1];	  char    END_FE    =    format[pos.getIndex()    -    1];    	non-compiled	[CE]  array  required,  but  Format  found	120	None	replace
146	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pos,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pos,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pos,  index);	  int    fmtCount    =    readArgumentIndex(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	30	None	replace
147	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(start,  index  +  1);	  int    fmtCount    =    readArgumentIndex(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	30	None	replace
148	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  index);	  int    fmtCount    =    readArgumentIndex(p,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	31	None	replace
149	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  start]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  -  start]  ==  START_FE)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    	compilable	  [FE]  NullPointerException  	114	5	replace
150	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  start]  ==  START_FE)  {  continue;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  start]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  start]  ==  START_FE)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    	compilable	  [FE]  NullPointerException  	114	5	replace
151	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  continue;  }  [CE]  ']'  expected  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1)  {  continue;  }	  if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    	non-compiled	[CE]  ']'  expected	114	None	replace
152	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	110	None	replace
153	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  end(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  end(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatIndex(pattern,  end(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	110	None	replace
154	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos.getIndex()  -  1));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos.getIndex()  -  1));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos.getIndex()  -  1));	  formatDescription    =    parseFormatDescription(c,    pos.getIndex()));    	non-compiled	[CE]  ';'  expected	124	None	replace
155	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos.getIndex()  +  1));  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos.getIndex()  +  1));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos.getIndex()  +  1));	  formatDescription    =    parseFormatDescription(c,    pos.getIndex()));    	non-compiled	[CE]  ';'  expected	124	None	replace
156	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start.getIndex()));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start.getIndex()));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start.getIndex()));	  formatDescription    =    parseFormatDescription(c,    pos.getIndex()));    	non-compiled	[CE]  ';'  expected	124	None	replace
157	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos.getIndex()));  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos.getIndex()));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pos.getIndex()));	  formatDescription    =    parseFormatDescription(c,    pos.getIndex()));    	non-compiled	[CE]  ';'  expected	124	None	replace
158	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  pos,  start);	  int    fmtCount    =    readArgumentIndex(c,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
159	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  index,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  index,  start);	  int    fmtCount    =    readArgumentIndex(c,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
160	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  format,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  format,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  format,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	137	None	replace
161	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  c,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  c,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  start,  c,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	137	None	replace
162	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  start,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	137	None	replace
163	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  next(c));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  next(c));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  pos,  next(c));	  formatDescription    =    parseFormatDescription(format,    c,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	137	None	replace
164	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  index,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  index,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  index,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(p,    start,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	90	None	replace
165	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  END_FE)  {  continue;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  END_FE)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  END_FE)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
166	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  START_FE)  {  continue;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  START_FE)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  START_FE)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
167	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  START_FE)  {  continue;  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  START_FE)  {  continue;  }	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
168	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  start)  {  continue;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  start)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  start)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
169	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
170	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
171	[BUG]  [BUGGY]  char  END_FE  =  START_FE.charAt(pos.getIndex()  -  1);  [CE]  char  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  START_FE.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  START_FE.charAt(pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  char  cannot  be  dereferenced	96	None	replace
172	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	compilable	  [FE]  NullPointerException  	96	5	replace
173	[BUG]  [BUGGY]  char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  1);  [FE]  NullPointerException  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  formatDescription.charAt(pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	compilable	  [FE]  NullPointerException  	96	5	replace
174	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  format.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  format.length);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  format.length);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    c.length);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
175	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  c.length  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  c.length  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  c.length  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    c.length);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
176	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  c.length  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  c.length  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  c.length  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    c.length);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
177	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  start,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  start,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatIndex(pattern,  start,  next(pos));	  int    fmtCount    =    parseFormatIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
178	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatIndex(pattern,  index);	  int    fmtCount    =    parseFormatIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
179	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  index,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatIndex(pattern,  index,  next(pos));	  int    fmtCount    =    parseFormatIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
180	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  start);	  int    fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
181	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos);	  int    fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
182	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  c);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  c);	  int    fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
183	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  start.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	77	None	replace
184	[BUG]  [BUGGY]  String  END_FE  =  pos.charAt(c.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  pos.charAt(c.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  pos.charAt(c.getIndex()  -  1);	  char    END_FE    =    pos.charAt(c.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
185	[BUG]  [BUGGY]  char  END_FE  =  pattern.charAt(c.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pattern.charAt(c.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  pattern.charAt(c.getIndex()  -  1);	  char    END_FE    =    pos.charAt(c.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
186	[BUG]  [BUGGY]  String  END_FE  =  format[pos.getIndex()];  [CE]  array  required,  but  Format  found  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  format[pos.getIndex()];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  format[pos.getIndex()];	  char    END_FE    =    format[pos.getIndex()];    	non-compiled	[CE]  array  required,  but  Format  found	75	None	replace
187	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Character  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	Character  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    Character    END_FE    =    c[pos.getIndex()    ];    	compilable	  [FE]  NullPointerException  	54	5	replace
188	[BUG]  [BUGGY]  Character  END_FE  =  c[pos.getIndex()  ];  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Character  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Character  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    Character    END_FE    =    c[pos.getIndex()    ];    	compilable	  [FE]  NullPointerException  	54	5	replace
189	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  start.getIndex());	  int    fmtCount    =    readArgumentIndex(p,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	78	None	replace
190	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(p,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(p,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	78	None	replace
191	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	29	None	replace
192	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	29	None	replace
193	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  end);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  end);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(start,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	136	None	replace
194	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  end);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  end);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	136	None	replace
195	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  first(pos));  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  first(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  first(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    first(pos));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
196	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  first(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  first(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  first(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    first(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	83	None	replace
197	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
198	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
199	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]  ==  START_FMT)  {  continue;	  	non-compiled	[CE]  orphaned  default	56	None	add
200	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]!=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
201	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]!=  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]!=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
202	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
203	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  >=  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()]  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()]  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
204	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index  +  1));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index  +  1));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index  +  1));	  formatDescription    =    parseFormatDescription(c,    index));    	non-compiled	[CE]  ';'  expected	17	None	replace
205	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex()  -  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex()  -  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start.getIndex()  -  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
206	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
207	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  -  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  -  start);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
208	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START	  	non-compiled	[CE]  ')'  expected	64	None	add
209	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_	  	non-compiled	[CE]  ')'  expected	64	None	add
210	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)	  	compilable	  [FE]  NullPointerException  	64	5	add
211	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)	  	compilable	  [FE]  NullPointerException  	64	5	add
212	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT	  	non-compiled	[CE]  ')'  expected	64	None	add
213	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;	  	non-compiled	[CE]  orphaned  default	64	None	add
214	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start  +  1));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start  +  1));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start  +  1));	  formatDescription    =    parseFormatDescription(c,    start));    	non-compiled	[CE]  ';'  expected	16	None	replace
215	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  index));	  formatDescription    =    parseFormatDescription(c,    start));    	non-compiled	[CE]  ';'  expected	16	None	replace
216	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  format[pos.getIndex()  -  1]);  [CE]  array  required,  but  Format  found  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  format[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  format[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    p[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  Format  found	39	None	replace
217	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	5	add
218	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	5	add
219	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	79	None	add
220	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  cannot  find  symbol  FormatDescription  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	non-compiled	[CE]  cannot  find  symbol  FormatDescription	79	None	add
221	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	79	None	add
222	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(0));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(0));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(0));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	79	None	add
223	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());	  char    fmtCount    =    readArgumentIndex(c,    start,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	89	None	replace
224	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  start,  index.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  start,  index.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  start,  index.getIndex());	  char    fmtCount    =    readArgumentIndex(c,    start,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	89	None	replace
225	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	5	add
226	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	5	add
227	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  [CE]  orphaned  default  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription	  	non-compiled	[CE]  orphaned  default	127	None	add
228	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDe  [CE]  orphaned  default  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDe  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDe	  	non-compiled	[CE]  orphaned  default	127	None	add
229	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [CE]  orphaned  default  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	non-compiled	[CE]  orphaned  default	127	None	add
230	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	127	None	add
231	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  [CE]  cannot  find  symbol  STRING_FMT  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  cannot  find  symbol  STRING_FMT	128	None	replace
232	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(START_FMT,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(START_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(START_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	128	None	replace
233	[BUG]  [BUGGY]  Format  format  =  parseFormatDescription(START_FMT,  next(pos));  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  format  =  parseFormatDescription(START_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  format  =  parseFormatDescription(START_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	128	None	replace
234	[BUG]  [BUGGY]  Format  format  =  parseFormatDescription(STRING_FMT,  next(pos));  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  format  =  parseFormatDescription(STRING_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  format  =  parseFormatDescription(STRING_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	128	None	replace
235	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_	  	non-compiled	[CE]  ')'  expected	69	None	add
236	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
237	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
238	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START	  	non-compiled	[CE]  ')'  expected	69	None	add
239	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_	  	non-compiled	[CE]  ')'  expected	69	None	add
240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
241	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
242	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FE.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FE.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FE.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
243	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FMT.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FMT.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FMT.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
244	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
245	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  start.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(p,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	100	None	replace
246	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  stripCustom.next(pos));  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  stripCustom.next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  stripCustom.next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c.next(pos));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
247	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  stripCustom.next(pos));  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  stripCustom.next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  stripCustom.next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c.next(pos));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
248	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	28	None	replace
249	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  format[pos.getIndex()  ]);  [CE]  array  required,  but  Format  found  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  format[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  format[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(format,    DUMMY_PATTERN,    c[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  Format  found	134	None	replace
250	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  start,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(format,    DUMMY_PATTERN,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	134	None	replace
251	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(dest,  pos,  DUMMY_PATTERN,  c[pos.getIndex()  ]);  [CE]  cannot  find  symbol  dest  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(dest,  pos,  DUMMY_PATTERN,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(dest,  pos,  DUMMY_PATTERN,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(format,    DUMMY_PATTERN,    c[pos.getIndex()    ]);    	non-compiled	[CE]  cannot  find  symbol  dest	134	None	replace
252	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  pos,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(format,    DUMMY_PATTERN,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	134	None	replace
253	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  ==  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    If(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	109	5	replace
254	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  ==  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    If(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	109	5	replace
255	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    index,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	84	None	replace
256	[BUG]  [BUGGY]  String  END_FE  =  c.charAt(pos.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c.charAt(pos.getIndex()  -  start);	  char    END_FE    =    pos.charAt(c.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
257	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pattern[pos.getIndex()  -  1]);  [CE]  array  required,  but  String  found  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pattern[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pattern[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    pattern[pos.getIndex()    -    1]);    	non-compiled	[CE]  array  required,  but  String  found	41	None	replace
258	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  char[pos.getIndex()  ]);  [CE]  ']'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  char[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  char[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    pattern[pos.getIndex()    -    1]);    	non-compiled	[CE]  ']'  expected	41	None	replace
259	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  char  END_FE  =  c[pos.getIndex()  +  1];  [CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  char  END_FE  =  c[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char    END_FE    =    c[pos.getIndex()    +    1];    char  END_FE  =  c[pos.getIndex()  +  1];	  	non-compiled	[CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)	72	None	add
260	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  Character  END_FE  =  c[pos.getIndex()  +  1];  [CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  Character  END_FE  =  c[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char    END_FE    =    c[pos.getIndex()    +    1];    Character  END_FE  =  c[pos.getIndex()  +  1];	  	non-compiled	[CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)	72	None	add
261	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  String  END_FE  =  c[pos.getIndex()  +  1];  [CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  String  END_FE  =  c[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char    END_FE    =    c[pos.getIndex()    +    1];    String  END_FE  =  c[pos.getIndex()  +  1];	  	non-compiled	[CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)	72	None	add
262	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  Char  END_FE  =  c[pos.getIndex()  +  1];  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  Char  END_FE  =  c[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char    END_FE    =    c[pos.getIndex()    +    1];    Char  END_FE  =  c[pos.getIndex()  +  1];	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
263	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    start,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	88	None	replace
264	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  index,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  index,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  index,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    start,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	88	None	replace
265	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  pos,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  pos,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  pos,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    start,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	88	None	replace
266	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos.getIndex()  -  start,  index  +  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos.getIndex()  -  start,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos.getIndex()  -  start,  index  +  1);	  char    END_FE    =    c.charAt(pos.getIndex()    -    start,    index);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
267	[BUG]  [BUGGY]  String  END_FE  =  c.charAt(pos.getIndex()  -  start,  index);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c.charAt(pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c.charAt(pos.getIndex()  -  start,  index);	  char    END_FE    =    c.charAt(pos.getIndex()    -    start,    index);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
268	[BUG]  [BUGGY]  char  END_FE  =  START_FE.charAt(pos.getIndex()  -  start,  index);  [CE]  char  cannot  be  dereferenced  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  START_FE.charAt(pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  START_FE.charAt(pos.getIndex()  -  start,  index);	  char    END_FE    =    c.charAt(pos.getIndex()    -    start,    index);    	non-compiled	[CE]  char  cannot  be  dereferenced	2	None	replace
269	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  index);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	101	None	replace
270	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	101	None	replace
271	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(start,  index);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	101	None	replace
272	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(start,  pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(start,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(start,  pos.getIndex()  -  1);	  char    END_FE    =    c.charAt(pos,    pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
273	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos,  index.getIndex()  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos,  index.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos,  index.getIndex()  -  1);	  char    END_FE    =    c.charAt(pos,    pos.getIndex()    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
274	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  pos,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  pos,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  pos,  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    pos,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	5	None	replace
275	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(pattern,  pos,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(pattern,  pos,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(pattern,  pos,  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    pos,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	5	None	replace
276	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  stripCustom);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  stripCustom);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  stripCustom);	  Format    formatDescription    =    parseFormatDescription(c,    pos,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	5	None	replace
277	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos,  index));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  next(pos,  index));	  Format    formatDescription    =    parseFormatDescription(format,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	6	None	replace
278	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos),  c);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos),  c);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  next(pos),  c);	  Format    formatDescription    =    parseFormatDescription(format,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	6	None	replace
279	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(c,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatDescription(c,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatDescription(c,  next(pos));	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	51	None	replace
280	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  start,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  start,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  start,  next(pos));	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	51	None	replace
281	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  index,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  index,  next(pos));	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	51	None	replace
282	[BUG]  [BUGGY]  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	80	None	replace
283	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
284	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  +  1];  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  +  1];	  String    END_FE    =    c[pos.getIndex()    ];    	non-compiled	[CE]  incompatible  types	71	None	replace
285	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos  +  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos  +  1);	  formatDescription    =    parseFormatDescription(c,    pos    +    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
286	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos),  END_FE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos),  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  next(pos),  END_FE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
287	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  DUMMY_PATTERN,  END_FE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  DUMMY_PATTERN,  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos),  DUMMY_PATTERN,  END_FE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
288	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  START_FMT);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  START_FMT);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos),  START_FMT);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
289	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  END_FE,  stripCustom);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  END_FE,  stripCustom);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos),  END_FE,  stripCustom);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
290	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Character  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	Character  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    Character    END_FE    =    c[pos.getIndex()    -    1];    	compilable	  [FE]  NullPointerException  	47	5	replace
291	[BUG]  [BUGGY]  Character  END_FE  =  c[pos.getIndex()  -  1];  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Character  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Character  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    Character    END_FE    =    c[pos.getIndex()    -    1];    	compilable	  [FE]  NullPointerException  	47	5	replace
292	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
293	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
294	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start(pos.getIndex()));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
295	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	60	1	add
296	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	60	1	add
297	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()!=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	60	5	add
298	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()!=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()!=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	60	5	add
299	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	60	2	add
300	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	60	2	add
301	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  [CE]  orphaned  default  [FE]          NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  START_FMT)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()  ==  START_FMT)  {  continue;	  	non-compiled	[CE]  orphaned  default	60	None	add
302	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
303	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  ];  Char  END_FE  =  c[pos.getIndex()  ];  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  ];  Char  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  ];  Char  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    Char    END_FE    =    c[pos.getIndex()    ];    	non-compiled	[CE]  incompatible  types	55	None	replace
304	[BUG]  [BUGGY]  Character  END_FE  =  c[pos.getIndex()  ];  Char  END_FE  =  c[pos.getIndex()  ];  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Character  END_FE  =  c[pos.getIndex()  ];  Char  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Character  END_FE  =  c[pos.getIndex()  ];  Char  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    Char    END_FE    =    c[pos.getIndex()    ];    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
305	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  DUMMY_PATTERN,  next(pos));	  Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	102	None	replace
306	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  next(pos));	  Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	102	None	replace
307	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  start,  c,  next(pos));	  Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	102	None	replace
308	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start,  next(pos));	  Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	102	None	replace
309	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	76	None	replace
310	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  <  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    <    START_FMT)    {    continue;    }    if(pos.getIndex()  <  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	58	5	add
311	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  <  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  <  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    <    START_FMT)    {    continue;    }    if(pos.getIndex()  <  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	58	5	add
312	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  <  START_FMT)  {  continue;  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  <  START_FMT)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    <    START_FMT)    {    continue;    }    if(pos.getIndex()  <  START_FMT)  {  continue;	  	non-compiled	[CE]  orphaned  default	58	None	add
313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()    <    START_FMT)    {    continue;    }    if(pos.getIndex()  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	58	5	add
314	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  if(pos.getIndex()  >=  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    <    START_FMT)    {    continue;    }    if(pos.getIndex()  >=  START_FMT)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	58	5	add
315	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  If(pos.getIndex()  <  START_FMT)  {  continue;  }  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  If(pos.getIndex()  <  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    <    START_FMT)    {    continue;    }    If(pos.getIndex()  <  START_FMT)  {  continue;  }	  	non-compiled	[CE]  ';'  expected	58	None	add
316	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos)+  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pos)+  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1;    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
317	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  START_FMT)+  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  START_FMT)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  START_FMT)+  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1;    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
318	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start)+  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start)+  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1;    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
319	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  start)+  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  start)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  start)+  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1;    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
320	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	replace
321	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	replace
322	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  start,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	replace
323	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	add
324	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	add
325	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  [CE]  orphaned  default  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]  ==  START_FE)  {  continue;	  	non-compiled	[CE]  orphaned  default	113	None	add
326	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]!=  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]!=  START_FE)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	113	5	add
327	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]!=  START_FE)  {  continue;  }  [FE]  IllegalArgumentException  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]!=  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]!=  START_FE)  {  continue;  }	  	compilable	  [FE]  IllegalArgumentException  	113	5	add
328	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  >=  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]  >=  START_FE)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	add
329	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  >=  START_FE)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  START_FE)  {  continue;  }  if(c[pos.getIndex()]  >=  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]    ==    START_FE)    {    continue;    }    if(c[pos.getIndex()]  >=  START_FE)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	add
330	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FMT,  c[pos.getIndex()  -  1]);  [CE]  cannot  find  symbol  DUMMY_FMT  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FMT,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_FMT,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(duMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  cannot  find  symbol  DUMMY_FMT	92	None	replace
331	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(START_FE,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(START_FE,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(START_FE,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(duMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	92	None	replace
332	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FE,  c[pos.getIndex()  -  1]);  [CE]  cannot  find  symbol  DUMMY_FE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FE,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_FE,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(duMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  cannot  find  symbol  DUMMY_FE	92	None	replace
333	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos,  index.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos,  index.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos,  index.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    start,    index.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	27	None	replace
334	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  index  +  1,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  index  +  1,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  start,  index  +  1,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    start,    index    +    2);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	35	None	replace
335	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  index  +  3);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  index  +  3);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(c,  start,  index  +  3);	  int    fmtCount    =    readArgumentIndex(c,    start,    index    +    2);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	35	None	replace
336	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  start,  index,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  start,  index,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c,  start,  index,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
337	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  start,  next(c));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  start,  next(c));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  pos,  start,  next(c));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
338	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  format,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  format,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  format,  start,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
339	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  index,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  index,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  index,  start,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
340	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c[pos.getIndex()]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c[pos.getIndex()]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c[pos.getIndex()]);	  formatDescription    =    parseFormatDescription(format,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	117	None	replace
341	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  pos,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(format,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	117	None	replace
342	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  <  END_FE)  {  continue;  }	  if(pos.getIndex()    <    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	59	5	replace
343	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  continue;  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  END_FE)  {  continue;  }	  if(pos.getIndex()    <    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	59	5	replace
344	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FMT,  next(pos));  [CE]  cannot  find  symbol  DUMMY_FMT  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_FMT	130	None	replace
345	[BUG]  [BUGGY]  Format  format  =  parseFormatDescription(DUMMY_FMT,  next(pos));  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  format  =  parseFormatDescription(DUMMY_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  format  =  parseFormatDescription(DUMMY_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	130	None	replace
346	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  start,  index  +  1);	  int    fmtCount    =    readArgumentIndex(p,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	98	None	replace
347	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  index,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  index,  start);	  int    fmtCount    =    readArgumentIndex(p,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	98	None	replace
348	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  ==  END_FE)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
349	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  continue;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  ==  END_FE)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
350	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  ==  START_FE)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
351	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FE)  {  continue;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  ==  START_FE)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
352	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  0)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  ==  0)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
353	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  continue;  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  0)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  ==  0)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
354	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  index,  next(start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  index,  next(start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  index,  next(start));	  formatDescription    =    parseFormatDescription(c,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
355	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  fmtCount));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  fmtCount));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  fmtCount));	  formatDescription    =    parseFormatDescription(c,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
356	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index,  start,  next(pos));	  formatDescription    =    parseFormatDescription(c,    start,    index,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
357	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  END_FE));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  END_FE));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  END_FE));	  formatDescription    =    parseFormatDescription(c,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
358	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex()  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	116	None	replace
359	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	50	None	replace
360	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  pos);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	103	None	replace
361	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  pos);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(p,  pos);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	103	None	replace
362	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(c,  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  fmtCount  =  readArgumentIndex(c,  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  fmtCount  =  readArgumentIndex(c,  start,  index);	  char    fmtCount    =    readArgumentIndex(c,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	99	None	replace
363	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  start,  index  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  start,  index  +  1);	  char    fmtCount    =    readArgumentIndex(c,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	99	None	replace
364	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  index);	  char    fmtCount    =    readArgumentIndex(c,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	99	None	replace
365	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
366	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(c,    pattern[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
367	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDe  [CE]  orphaned  default  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDe  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDe	  	non-compiled	[CE]  orphaned  default	127	None	add
368	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(	  	non-compiled	[CE]  ')'  expected	127	None	add
369	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	5	add
370	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	5	add
371	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDe  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDe  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    Format  format  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDe	  	non-compiled	[CE]  ';'  expected	127	None	add
372	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  start,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(p,  start,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(p,    start,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	90	None	replace
373	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  index));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  index));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  index));	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
374	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(QUOTE,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(QUOTE,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(QUOTE,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	130	None	replace
375	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	130	5	replace
376	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	130	5	replace
377	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);	  int    fmtCount    =    readArgumentIndex(c,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
378	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  ESCAPED_QUOTE));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  ESCAPED_QUOTE));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  index,  next(pos,  ESCAPED_QUOTE));	  formatDescription    =    parseFormatDescription(c,    start,    index,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
379	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START	  	non-compiled	[CE]  ')'  expected	67	None	add
380	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;	  	non-compiled	[CE]  orphaned  default	67	None	add
381	[BUG]  [BUGGY]  char  END_FE  =  QUOTE.charAt(pos.getIndex()  -  1);  [CE]  char  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  QUOTE.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  QUOTE.charAt(pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  char  cannot  be  dereferenced	96	None	replace
382	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  -  1);  [CE]  ']'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c[pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  ']'  expected	96	None	replace
383	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1)+  1);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1)+  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1)+  1);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    -    1));    	non-compiled	[CE]  ']'  expected	15	None	replace
384	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  QUOTE[pos.getIndex()  ]);  [CE]  array  required,  but  char  found  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  QUOTE[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  QUOTE[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  char  found	87	None	replace
385	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  ESCAPED_QUOTE[pos.getIndex()  ]);  [CE]  array  required,  but  String  found  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  ESCAPED_QUOTE[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  ESCAPED_QUOTE[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  String  found	87	None	replace
386	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	87	None	replace
387	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  posCustom[pos.getIndex()  ]);  [CE]  cannot  find  symbol  posCustom  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  posCustom[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  posCustom[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  cannot  find  symbol  posCustom	87	None	replace
388	[BUG]  [BUGGY]  if(end  >  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(end  >  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(end  >  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  orphaned  default	66	None	replace
389	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  orphaned  default	66	None	replace
390	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  ]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  ]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()  ]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  orphaned  default	66	None	replace
391	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  continue;  }  [CE]  ']'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  ']'  expected	66	None	replace
392	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  c[pos.getIndex()  ],  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  c[pos.getIndex()  ],  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  c[pos.getIndex()  ],  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    ],    ESCAPED_QUOTE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	93	None	replace
393	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos.getIndex()));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos.getIndex()));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos.getIndex()));	  formatDescription    =    parseFormatDescription(c,    pos.getIndex()));    	non-compiled	[CE]  ';'  expected	124	None	replace
394	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  >=  START_FE)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	65	5	replace
395	[BUG]  [BUGGY]  if(pos.getIndex()  >=  START_FE)  {  continue;  }  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  START_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  >=  START_FE)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	65	5	replace
396	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  END_FE)  {  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()]  ==  END_FE)  {  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()]  ==  END_FE)  {	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	65	None	replace
397	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  start,  index  +  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  start,  index  +  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  start,  index  +  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    start,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	3	None	replace
398	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
399	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  QUOTE)  {  continue;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  QUOTE)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  QUOTE)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  not  a  statement	112	None	replace
400	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  DUMMY_PATTERN)  {  continue;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  DUMMY_PATTERN)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  DUMMY_PATTERN)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  not  a  statement	112	None	replace
401	[BUG]  [BUGGY]  char  END_FE  =  format[pos.getIndex()  +  1];  [CE]  array  required,  but  Format  found  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  format[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  format[pos.getIndex()  +  1];	  char    END_FE    =    format[pos.getIndex()    -    1];    	non-compiled	[CE]  array  required,  but  Format  found	120	None	replace
402	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  next(start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  next(start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  pos,  next(start));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
403	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos,  next(next(pos));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos,  next(next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pos,  next(next(pos));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  ')'  expected	9	None	replace
404	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c.length()  ==  0)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c.length()  ==  0)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  orphaned  default	131	None	replace
405	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  ')'  expected	131	None	replace
406	[BUG]  [BUGGY]  char  END_FE  =  d.charAt(pos.getIndex()  -  start,  index);  [CE]  cannot  find  symbol  d  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  d.charAt(pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  d.charAt(pos.getIndex()  -  start,  index);	  char    END_FE    =    c.charAt(pos.getIndex()    -    start,    index);    	non-compiled	[CE]  cannot  find  symbol  d	2	None	replace
407	[BUG]  [BUGGY]  char  END_FE  =  pos.charAt(c,  pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pos.charAt(c,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  pos.charAt(c,  pos.getIndex()  -  1);	  char    END_FE    =    c.charAt(pos,    pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
408	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ]);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  ]);	  Format    formatDescription    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	132	None	replace
409	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  c,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  c,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  c,  next(pos));	  Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	102	None	replace
410	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos  +  1)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos  +  1)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos  +  1)+  1;	  formatDescription    =    parseFormatDescription(c,    pos    +    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
411	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  start)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  >=  start)  {  continue;  }	  if(pos.getIndex()    >=    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	63	5	replace
412	[BUG]  [BUGGY]  if(pos.getIndex()  >=  start)  {  continue;  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  start)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  >=  start)  {  continue;  }	  if(pos.getIndex()    >=    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	63	5	replace
413	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	13	None	replace
414	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	13	None	replace
415	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pos));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
416	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  DUMMY_PATTERN));  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  DUMMY_PATTERN));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  DUMMY_PATTERN));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
417	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  START_FMT));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  START_FMT));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  pos,  START_FMT));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
418	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  index.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
419	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos),  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos),  c);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end(pos),  c);	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	110	None	replace
420	[BUG]  [BUGGY]  char  END_FE  =  pos.charAt(c,  pos.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pos.charAt(c,  pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  pos.charAt(c,  pos.getIndex()  -  start);	  char    END_FE    =    c.charAt(pos,    pos.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
421	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  start,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  start,  index  +  2);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(c,  start,  index  +  2);	  int    fmtCount    =    readArgumentIndex(c,    start,    index    +    2);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	35	None	replace
422	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  c,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  c,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  c,  start,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
423	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  index,  c,  start,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  index,  c,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  index,  c,  start,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
424	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  parseFormatDescription(pattern,  next(pos));	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	51	None	replace
425	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  pos)+  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  pos)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c,  pos)+  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1;    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
426	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  ESCAPED_QUOTE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos,  next(pos),  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
427	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  next(pos),  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index,  next(pos),  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index,  next(pos),  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
428	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	77	None	replace
429	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	replace
430	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	replace
431	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	28	None	replace
432	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
433	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  start);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
434	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  parseFormatIndex(pattern,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  parseFormatIndex(pattern,  next(pos));	  int    fmtCount    =    parseFormatIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
435	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)+  2;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)+  2;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos)+  2;	  formatDescription    =    parseFormatDescription(c,    pos)+    1);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
436	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  continue;  }	  if(c[pos.getIndex()    1]    ==    END_FE)    {    continue;    }    	compilable	  [FE]  NullPointerException  	118	5	replace
437	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  continue;  }  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  continue;  }	  if(c[pos.getIndex()    1]    ==    END_FE)    {    continue;    }    	compilable	  [FE]  NullPointerException  	118	5	replace
438	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  next(pos),  END_FE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  next(pos),  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  next(pos),  END_FE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
439	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  END_FE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos),  END_FE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
440	[BUG]  [BUGGY]  FormatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  [CE]  cannot  find  symbol  FormatDescription  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  FormatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	FormatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  FormatDescription	82	None	replace
441	[BUG]  [BUGGY]  FormatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));  [CE]  cannot  find  symbol  FormatDescription  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  FormatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	FormatDescription  =  parseFormatDescription(ESCAPED_QUOTE,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  FormatDescription	82	None	replace
442	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(desc,  c,  next(pos));  [CE]  cannot  find  symbol  desc  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(desc,  c,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(desc,  c,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  desc	137	None	replace
443	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(dup,  pos,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(dup,  pos,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(dup,  pos,  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    pos,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	5	None	replace
444	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(dest,  pos,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(dest,  pos,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(dest,  pos,  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    pos,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	5	None	replace
445	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FIELD_NAME,  c[pos.getIndex()  -  1]);  [CE]  cannot  find  symbol  DUMMY_FIELD_NAME  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_FIELD_NAME,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_FIELD_NAME,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(duMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  cannot  find  symbol  DUMMY_FIELD_NAME	92	None	replace
446	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(c));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(c));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(c));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c.next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	138	None	replace
447	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c.next(start));  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c.next(start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c.next(start));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c.next(pos));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
448	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  0)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  <  0)  {  continue;  }	  if(pos.getIndex()    <    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	59	5	replace
449	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  continue;  }  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  0)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  0)  {  continue;  }	  if(pos.getIndex()    <    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	59	5	replace
450	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	115	None	replace
451	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	115	None	replace
452	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(i.getIndex()  -  start);  [CE]  cannot  find  symbol  i  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(i.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(i.getIndex()  -  start);	  char    END_FE    =    pos.charAt(c.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol  i	104	None	replace
453	[BUG]  [BUGGY]  char  END_FE  =  start.charAt(c.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  start.charAt(c.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  start.charAt(c.getIndex()  -  start);	  char    END_FE    =    pos.charAt(c.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
454	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
455	[BUG]  [BUGGY]  char  END_FE  =  conn.charAt(c.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  conn.charAt(c.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  conn.charAt(c.getIndex()  -  1);	  char    END_FE    =    pos.charAt(c.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
456	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(p.getIndex()  -  1);  [CE]  cannot  find  symbol  p  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(p.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(p.getIndex()  -  1);	  char    END_FE    =    pos.charAt(c.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  p	94	None	replace
457	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  0)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  >=  0)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	61	5	replace
458	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  continue;  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  >=  0)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  >=  0)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	61	5	replace
459	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  start)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  ==  start)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
460	[BUG]  [BUGGY]  if(pos.getIndex()  ==  start)  {  continue;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  start)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  ==  start)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  NullPointerException  	61	5	replace
461	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  char    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	101	None	replace
462	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  next(pos,  index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  next(pos,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  next(pos,  index));	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
463	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index),  DUMMY_PATTERN);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index),  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos,  index),  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
464	[BUG]  [BUGGY]  char  END_FE  =  QUOTE.charAt(pos.getIndex()  -  start);  [CE]  char  cannot  be  dereferenced  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  QUOTE.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  QUOTE.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  char  cannot  be  dereferenced	106	None	replace
465	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  DUMMY_PATTERN.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	char  END_FE  =  DUMMY_PATTERN.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	compilable	  [FE]  StringIndexOutOfBoundsException  	106	5	replace
466	[BUG]  [BUGGY]  char  END_FE  =  DUMMY_PATTERN.charAt(pos.getIndex()  -  start);  [FE]  StringIndexOutOfBoundsException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  DUMMY_PATTERN.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  DUMMY_PATTERN.charAt(pos.getIndex()  -  start);	  char    END_FE    =    d.charAt(pos.getIndex()    -    start);    	compilable	  [FE]  StringIndexOutOfBoundsException  	106	5	replace
467	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  ]  +  DUMMY_PATTERN;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	String  END_FE  =  c[pos.getIndex()  ]  +  DUMMY_PATTERN;	  String    END_FE    =    c[pos.getIndex()    ];    	compilable	  [FE]  NullPointerException  	71	5	replace
468	[BUG]  [BUGGY]  String  END_FE  =  c[pos.getIndex()  ]  +  DUMMY_PATTERN;  [FE]  NullPointerException  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c[pos.getIndex()  ]  +  DUMMY_PATTERN;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c[pos.getIndex()  ]  +  DUMMY_PATTERN;	  String    END_FE    =    c[pos.getIndex()    ];    	compilable	  [FE]  NullPointerException  	71	5	replace
469	[BUG]  [BUGGY]  if(start  ==  -1)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(start  ==  -1)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(start  ==  -1)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    If(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	109	None	replace
470	[BUG]  [BUGGY]  Char  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Char  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Char  END_FE  =  c[pos.getIndex()  -  1];  Char  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    Char    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
471	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos),  DUMMY_PATTERN);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos),  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  next(pos),  DUMMY_PATTERN);	  Format    formatDescription    =    parseFormatDescription(format,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	6	None	replace
472	[BUG]  [BUGGY]  if(next(c,  pos.getIndex())  ==  START_FMT)  {  continue;  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(next(c,  pos.getIndex())  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(next(c,  pos.getIndex())  ==  START_FMT)  {  continue;  }	  if(next(pos.getIndex())    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	replace
473	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  i));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  i));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  i));	  formatDescription    =    parseFormatDescription(c,    start));    	non-compiled	[CE]  ';'  expected	16	None	replace
474	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());	  char    fmtCount    =    readArgumentIndex(c,    start,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	89	None	replace
475	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  start,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  start,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(p,  start,  pos.getIndex());	  char    fmtCount    =    readArgumentIndex(c,    start,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	89	None	replace
476	[BUG]  [BUGGY]  char  END_FE  =  start.charAt(c,  pos.getIndex()  -  start);  [CE]  int  cannot  be  dereferenced  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  start.charAt(c,  pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  start.charAt(c,  pos.getIndex()  -  start);	  char    END_FE    =    c.charAt(pos,    start.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
477	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(	  	non-compiled	[CE]  ')'  expected	129	None	add
478	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  ']'  expected	128	None	replace
479	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	compilable	  [FE]  NullPointerException  	128	5	replace
480	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [FE]  NullPointerException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	compilable	  [FE]  NullPointerException  	128	5	replace
481	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	128	5	replace
482	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  ]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	128	5	replace
483	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDe  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDe  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDe	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  ';'  expected	128	None	replace
484	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
485	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
486	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START	  	non-compiled	[CE]  ')'  expected	69	None	add
487	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
488	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
489	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_	  	non-compiled	[CE]  ')'  expected	69	None	add
490	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1)-  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1)-  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1)-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex())-    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	139	None	replace
491	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start)+  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start)+  1;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start)+  1;	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
492	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start  +  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
493	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(desc,  c,  index,  next(pos));  [CE]  cannot  find  symbol  desc  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(desc,  c,  index,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(desc,  c,  index,  next(pos));	  formatDescription    =    parseFormatDescription(c,    index,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  desc	8	None	replace
494	[BUG]  [BUGGY]  int  END_FE  =  c[pos.getIndex()  ];  String  END_FE  =  c[pos.getIndex()  ];  [CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  END_FE  =  c[pos.getIndex()  ];  String  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  END_FE  =  c[pos.getIndex()  ];  String  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    String    END_FE    =    c[pos.getIndex()    ];    	non-compiled	[CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)	53	None	replace
495	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    index,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	84	None	replace
496	[BUG]  [BUGGY]  char  END_FE  =  pos.charAt(fmtCount.getIndex()  -  start);  [CE]  int  cannot  be  dereferenced  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pos.charAt(fmtCount.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  pos.charAt(fmtCount.getIndex()  -  start);	  char    END_FE    =    fmtCount.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	105	None	replace
497	[BUG]  [BUGGY]  char  END_FE  =  start.charAt(pos.getIndex()  -  start);  [CE]  int  cannot  be  dereferenced  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  start.charAt(pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  start.charAt(pos.getIndex()  -  start);	  char    END_FE    =    fmtCount.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	105	None	replace
498	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  pos,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(format,    DUMMY_PATTERN,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	134	None	replace
499	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  n(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  n(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  n(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
500	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	50	None	replace
501	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	50	None	replace
502	[BUG]  [BUGGY]  if(end  >  0)  {  if(c[pos.getIndex()  ]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(end  >  0)  {  if(c[pos.getIndex()  ]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(end  >  0)  {  if(c[pos.getIndex()  ]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	68	None	replace
503	[BUG]  [BUGGY]  if(end  >  0)  {  if(c[pos.getIndex()  -  1)  {  continue;  }  [CE]  ']'  expected  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(end  >  0)  {  if(c[pos.getIndex()  -  1)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(end  >  0)  {  if(c[pos.getIndex()  -  1)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    	non-compiled	[CE]  ']'  expected	68	None	replace
504	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(start,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	30	None	replace
505	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	116	None	replace
506	[BUG]  [BUGGY]  char  END_FE  =  pos.charAt(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pos.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  pos.charAt(pos.getIndex()  -  1);	  char    END_FE    =    format.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
507	[BUG]  [BUGGY]  char  END_FE  =  f.charAt(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  f  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  f.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  f.charAt(pos.getIndex()  -  1);	  char    END_FE    =    format.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  f	25	None	replace
508	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  index),  ESCAPED_QUOTE);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  index),  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  index),  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(c,    index));    	non-compiled	[CE]  ';'  expected	17	None	replace
509	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  END_FE)  {  continue;  }	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
510	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  QUOTE)  {  continue;  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  QUOTE)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  QUOTE)  {  continue;  }	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
511	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  DUMMY_PATTERN)  {  continue;  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  DUMMY_PATTERN)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  DUMMY_PATTERN)  {  continue;  }	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
512	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos,  pos));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  next(pos,  pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  next(pos,  pos));	  formatDescription    =    parseFormatDescription(c,    next(start,    pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
513	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  start,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  start,  next(pos));	  Format    formatDescription    =    parseFormatDescription(c,    index,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	4	None	replace
514	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DEFAULT_PATTERN,  c,  next(pos));  [CE]  cannot  find  symbol  DEFAULT_PATTERN  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DEFAULT_PATTERN,  c,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DEFAULT_PATTERN,  c,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PATTERN	107	None	replace
515	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start[pos.getIndex()  ]);  [CE]  array  required,  but  int  found  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c,  start[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    start,    c[pos.getIndex()    ]);    	non-compiled	[CE]  array  required,  but  int  found	88	None	replace
516	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  DUMMY_PATTERN,  start,  c[pos.getIndex()  ]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  DUMMY_PATTERN,  start,  c[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  DUMMY_PATTERN,  start,  c[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    start,    c[pos.getIndex()    ]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	88	None	replace
517	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	81	None	replace
518	[BUG]  [BUGGY]  char  END_FE  =  index.charAt(c.getIndex()  -  index);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  index.charAt(c.getIndex()  -  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  index.charAt(c.getIndex()  -  index);	  char    END_FE    =    c.charAt(pos.getIndex()    -    index);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
519	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c[pos.getIndex()  -  1],  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c[pos.getIndex()  -  1],  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c[pos.getIndex()  -  1],  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(format,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	117	None	replace
520	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    index,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	26	None	replace
521	[BUG]  [BUGGY]  if(pos.getIndex()  <  =  START_FMT)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  =  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  =  START_FMT)  {  continue;  }	  if(pos.getIndex()    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
522	[BUG]  [BUGGY]  char  END_FE  =  cs.charAt(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  cs  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  cs.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  cs.charAt(pos.getIndex()  -  1);	  char    END_FE    =    pos.charAt(c.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  cs	94	None	replace
523	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  c)+  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  c)+  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  pos,  c)+  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1;    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
524	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index),  END_FE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  index),  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos,  index),  END_FE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
525	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  fmtCount),  END_FE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos,  fmtCount),  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos,  fmtCount),  END_FE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    END_FE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
526	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex(),  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex(),  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex(),  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	135	None	replace
527	[BUG]  [BUGGY]  if(next(c,  start,  pos.getIndex())  ==  START_FMT)  {  continue;  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(next(c,  start,  pos.getIndex())  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(next(c,  start,  pos.getIndex())  ==  START_FMT)  {  continue;  }	  if(next(pos.getIndex())    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	replace
528	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  START_FMT));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  START_FMT));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  pos,  START_FMT));	  formatDescription    =    parseFormatDescription(c,    pos,    START_FMT));    	non-compiled	[CE]  ';'  expected	19	None	replace
529	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  start)  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  start)  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  start)  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex())-    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	139	None	replace
530	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT  ||  pos.getIndex()  >  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  <  START_FMT  ||  pos.getIndex()  >  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	compilable	  [FE]  IllegalArgumentException  	66	5	replace
531	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT  ||  pos.getIndex()  >  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT  ||  pos.getIndex()  >  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  START_FMT  ||  pos.getIndex()  >  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    	compilable	  [FE]  IllegalArgumentException  	66	5	replace
532	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(start  <  =  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(start  <  =  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
533	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos  [CE]  ']'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos	  	non-compiled	[CE]  ']'  expected	64	None	add
534	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  index);	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	51	None	replace
535	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	5	replace
536	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	5	replace
537	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  char  END_FE  =  cm[pos.getIndex()  +  1];  [CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  char  END_FE  =  cm[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char    END_FE    =    c[pos.getIndex()    +    1];    char  END_FE  =  cm[pos.getIndex()  +  1];	  	non-compiled	[CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)	72	None	add
538	[BUG]  [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  char  END_FE  =  C[pos.getIndex()  +  1];  [CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)  [FE]      NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c[pos.getIndex()  +  1];  char  END_FE  =  C[pos.getIndex()  +  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char    END_FE    =    c[pos.getIndex()    +    1];    char  END_FE  =  C[pos.getIndex()  +  1];	  	non-compiled	[CE]  variable  END_FE  is  already  defined  in  method  applyPattern(String)	72	None	add
539	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	char  END_FE  =  pattern.charAt(pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	compilable	  [FE]  NullPointerException  	96	5	replace
540	[BUG]  [BUGGY]  char  END_FE  =  pattern.charAt(pos.getIndex()  -  1);  [FE]  NullPointerException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  pattern.charAt(pos.getIndex()  -  1);	  char    END_FE    =    esc.charAt(pos.getIndex()    -    1);    	compilable	  [FE]  NullPointerException  	96	5	replace
541	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	5	add
542	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos);  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	5	add
543	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  n(pos));  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  n(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  n(pos));	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
544	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(STRING_FMT,  next(pos));  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    	non-compiled	[CE]  ']'  expected	128	None	replace
545	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)/  1);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)/  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos)/  1);	  formatDescription    =    parseFormatDescription(c,    pos)+    1);    	non-compiled	[CE]  ';'  expected	123	None	replace
546	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)/  1;  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos)/  1;  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos)/  1;	  formatDescription    =    parseFormatDescription(c,    pos)+    1);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
547	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  f[pos.getIndex()  ]);  [CE]  cannot  find  symbol  f  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  f[pos.getIndex()  ]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  f[pos.getIndex()  ]);	  formatDescription    =    parseFormatDescription(c,    DUMMY_PATTERN[pos.getIndex()    ]);    	non-compiled	[CE]  cannot  find  symbol  f	87	None	replace
548	[BUG]  [BUGGY]  String  END_FE  =  format[pos.getIndex()  1];  [CE]  ']'  expected  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  format[pos.getIndex()  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  format[pos.getIndex()  1];	  String    END_FE    =    c[pos.getIndex()    1];    	non-compiled	[CE]  ']'  expected	74	None	replace
549	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  char[pos.getIndex()  -  1]);  [CE]  ']'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  char[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  char[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(format,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  ']'  expected	117	None	replace
550	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  start,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  start,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(format,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	117	None	replace
551	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1,  ESCAPED_QUOTE);  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1,  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  c[pos.getIndex()  -  1,  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    ],    ESCAPED_QUOTE);    	non-compiled	[CE]  ']'  expected	93	None	replace
552	[BUG]  [BUGGY]  char  END_FE  =  str.charAt(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  str  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  str.charAt(pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  str.charAt(pos.getIndex()  -  1);	  char    END_FE    =    d.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  str	95	None	replace
553	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos,  next(pos));  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  start,  pos,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  start,  pos,  next(pos));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
554	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  next(start));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  pos,  next(start));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  pos,  next(start));	  formatDescription    =    parseFormatDescription(c,    pos,    next(start));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
555	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos.getIndex()));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos.getIndex()));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos.getIndex()));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	81	None	replace
556	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  pos,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  parseFormatIndex(pattern,  pos,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  parseFormatIndex(pattern,  pos,  next(pos));	  int    fmtCount    =    parseFormatIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
557	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  c.length)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  <  c.length)  {  continue;  }	  if(pos.getIndex()    <    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	59	5	replace
558	[BUG]  [BUGGY]  if(pos.getIndex()  <  c.length)  {  continue;  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  c.length)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  c.length)  {  continue;  }	  if(pos.getIndex()    <    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	59	5	replace
559	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	136	None	replace
560	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  -  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end  -  start);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	136	None	replace
561	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  pos.getIndex());  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    index,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	26	None	replace
562	[BUG]  [BUGGY]  char  END_FE  =  fmtCount.charAt(pos,  pos.getIndex()  -  start);  [CE]  int  cannot  be  dereferenced  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  fmtCount.charAt(pos,  pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  fmtCount.charAt(pos,  pos.getIndex()  -  start);	  char    END_FE    =    fmtCount.charAt(pos.getIndex()    -    start);    	non-compiled	[CE]  int  cannot  be  dereferenced	105	None	replace
563	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  orphaned  default	131	None	replace
564	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(c[pos.getIndex()  -  1)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  getFormat(formatDescription);  }	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(    	non-compiled	[CE]  ']'  expected	131	None	replace
565	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos,  pos.getIndex()  -  start,  index);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos,  pos.getIndex()  -  start,  index);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos,  pos.getIndex()  -  start,  index);	  char    END_FE    =    c.charAt(pos.getIndex()    -    start,    index);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
566	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos.getIndex()));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(format,  next(pos.getIndex()));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(format,  next(pos.getIndex()));	  Format    formatDescription    =    parseFormatDescription(format,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	6	None	replace
567	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  c.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  c.length);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	28	None	replace
568	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(c.next(pos));  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(c.next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(c.next(pos));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c.next(pos));    	non-compiled	[CE]  ')'  expected	138	None	replace
569	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos.getIndex())-  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos.getIndex())-  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos.getIndex())-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	115	None	replace
570	[BUG]  [BUGGY]  CharType  END_FE  =  c[pos.getIndex()  ];  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  CharType  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	CharType  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    Character    END_FE    =    c[pos.getIndex()    ];    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
571	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos.getIndex()));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
572	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start  +  1,  c.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start  +  1,  c.length);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  start  +  1,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    start    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
573	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos.getIndex()  +  1);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos.getIndex()  +  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos.getIndex()  +  1);	  formatDescription    =    parseFormatDescription(c,    pos.getIndex()));    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	replace
574	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  format  [CE]  orphaned  default  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  format  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    else    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  else  {  format	  	non-compiled	[CE]  orphaned  default	127	None	add
575	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  next(start,  pos));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  next(start,  pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c,  next(start,  pos));	  formatDescription    =    parseFormatDescription(c,    next(start,    pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
576	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  END_FE,  START_FMT)  {  continue;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  END_FE,  START_FMT)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  END_FE,  START_FMT)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  not  a  statement	112	None	replace
577	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  START_FMT,  END_FE)  {  continue;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  START_FMT,  END_FE)  {  continue;  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  START_FMT,  END_FE)  {  continue;	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    	non-compiled	[CE]  not  a  statement	112	None	replace
578	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  start,  index  +  1);  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(c,  start,  index  +  1);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(c,  start,  index  +  1);	  Format    formatDescription    =    parseFormatDescription(c,    start,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	3	None	replace
579	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos  +  1,  END_FE);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  pos  +  1,  END_FE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  pos  +  1,  END_FE);	  formatDescription    =    parseFormatDescription(c,    pos    +    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
580	[BUG]  [BUGGY]  Char  END_FE  =  c[pos.getIndex()  ];  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Char  END_FE  =  c[pos.getIndex()  ];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Char  END_FE  =  c[pos.getIndex()  ];	          char    END_FE    =    c[pos.getIndex()    ];    Char    END_FE    =    c[pos.getIndex()    ];    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
581	[BUG]  [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  STRICT_FMT)  {  continue;  }  [CE]  cannot  find  symbol  STRICT_FMT  [FE]    NullPointerException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  ==  START_FMT)  {  continue;  }  if(pos.getIndex()  ==  STRICT_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()    ==    START_FMT)    {    continue;    }    if(pos.getIndex()  ==  STRICT_FMT)  {  continue;  }	  	non-compiled	[CE]  cannot  find  symbol  STRICT_FMT	60	None	add
582	[BUG]  [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  }  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription        =        parseFormatDescription(DUMMY_PATTERN,        next(pos));        if(formatDescription    ==    null)    {    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    }    if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos));  if(formatDescription  ==  null)  {  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos	  	non-compiled	[CE]  ')'  expected	129	None	add
583	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FMT.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FMT.length);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  START_FMT.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
584	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START	  	non-compiled	[CE]  ')'  expected	69	None	add
585	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_	  	non-compiled	[CE]  ')'  expected	69	None	add
586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
587	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)	  	compilable	  [FE]  IllegalArgumentException  	69	5	add
588	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >>  START  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >>  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]    >=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  >>  START	  	non-compiled	[CE]  ')'  expected	69	None	add
589	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  DUMMY_PATTERN,  c[pos.getIndex()  -  1]);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  DUMMY_PATTERN,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  DUMMY_PATTERN,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
590	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  next(pos,  index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  next(pos,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  next(pos,  index));	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
591	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  next(pos,  index));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  c,  next(pos,  index));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  c,  next(pos,  index));	  formatDescription    =    parseFormatDescription(c,    next(pos,    index));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
592	[BUG]  [BUGGY]  char  END_FE  =  c.charAt(pos,  start,  pos.getIndex()  -  start);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  char  END_FE  =  c.charAt(pos,  start,  pos.getIndex()  -  start);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	char  END_FE  =  c.charAt(pos,  start,  pos.getIndex()  -  start);	  char    END_FE    =    c.charAt(pos,    start.getIndex()    -    start);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
593	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(STRING_FMT,  c[pos.getIndex()  -  1]);  [CE]  cannot  find  symbol  STRING_FMT  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(STRING_FMT,  c[pos.getIndex()  -  1]);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(STRING_FMT,  c[pos.getIndex()  -  1]);	  formatDescription    =    parseFormatDescription(duMMY_PATTERN,    c[pos.getIndex()    -    1]);    	non-compiled	[CE]  cannot  find  symbol  STRING_FMT	92	None	replace
594	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  start,  next(c));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  pos,  start,  next(c));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  pos,  start,  next(c));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
595	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(format,  d,  c,  start,  next(pos));  [CE]  cannot  find  symbol  d  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(format,  d,  c,  start,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(format,  d,  c,  start,  next(pos));	  formatDescription    =    parseFormatDescription(format,    c,    start,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  d	10	None	replace
596	[BUG]  [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  next(pos));  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  next(pos));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	Format  formatDescription  =  parseFormatDescription(DUMMY_PATTERN,  pos,  next(pos));	  Format    formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    c,    next(pos));    	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	102	None	replace
597	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    If(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  orphaned  default	109	None	replace
598	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	add	if(pos.getIndex()  <  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    If(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	109	5	replace
599	[BUG]  [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  if(pos.getIndex()  <  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	if(pos.getIndex()  <  START_FMT)  {  continue;  }  else  if(c[pos.getIndex()]  ==  START_FMT)  {  continue;  }	          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    If(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    	compilable	  [FE]  IllegalArgumentException  	109	5	replace
600	[BUG]  [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos.getIndex()));  [CE]  cannot  find  symbol  FormatDescription  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos.getIndex()));  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	FormatDescription  =  parseFormatDescription(DUMMY_PATTERN,  next(pos.getIndex()));	  formatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    FormatDescription    =    parseFormatDescription(DUMMY_PATTERN,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  FormatDescription	82	None	replace
601	[BUG]  [BUGGY]  c[pos.getIndex()  ]  ==  END_FE,  START_FMT)  {  continue;  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  c[pos.getIndex()  ]  ==  END_FE,  START_FMT)  {  continue;  }  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	c[pos.getIndex()  ]  ==  END_FE,  START_FMT)  {  continue;  }	  c[pos.getIndex()]    ==    START_FMT)    {    continue;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
602	[BUG]  [BUGGY]  String  END_FE  =  c.charAt(pos,  pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  String  END_FE  =  c.charAt(pos,  pos.getIndex()  -  1);  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	String  END_FE  =  c.charAt(pos,  pos.getIndex()  -  1);	  char    END_FE    =    c.charAt(pos,    pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
603	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	50	None	replace
604	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  next(pos),  DUMMY_PATTERN);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(pattern,  next(pos),  DUMMY_PATTERN);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(pattern,  next(pos),  DUMMY_PATTERN);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
605	[BUG]  [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  DUMMY_PATTERN,  ESCAPED_QUOTE);  [CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  formatDescription  =  parseFormatDescription(c,  next(pos),  DUMMY_PATTERN,  ESCAPED_QUOTE);  [BUGGY]      next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	formatDescription  =  parseFormatDescription(c,  next(pos),  DUMMY_PATTERN,  ESCAPED_QUOTE);	  formatDescription    =    parseFormatDescription(c,    next(pos),    DUMMY_PATTERN);    	non-compiled	[CE]  method  parseFormatDescription  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
606	[BUG]  [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]          if(c[pos.getIndex()    -    1]    ==    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	                if(c[pos.getIndex()        -        1]        ==        START_FMT)        {        continue;        }        if(c[pos.getIndex()    -    1]!=    START_FMT)    {    continue;    }    if(c[pos.getIndex()  -  1]  ==  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START_FMT)  {  continue;  }  if(c[pos.getIndex()  -  1]!=  START	  	non-compiled	[CE]  ')'  expected	67	None	add
607	[BUG]  [BUGGY]  CharType  END_FE  =  c[pos.getIndex()  -  1];  String  END_FE  =  c[pos.getIndex()  -  1];  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {      [BUGGY]  CharType  END_FE  =  c[pos.getIndex()  -  1];  String  END_FE  =  c[pos.getIndex()  -  1];  [BUGGY]      formatDescription  =  parseFormatDescription(pattern,        next(pos));  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	173	174	1	replace	CharType  END_FE  =  c[pos.getIndex()  -  1];  String  END_FE  =  c[pos.getIndex()  -  1];	          char    END_FE    =    c[pos.getIndex()    -    1];    String    END_FE    =    c[pos.getIndex()    -    1];    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
