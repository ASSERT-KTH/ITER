bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  saving);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
7	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	17	None	replace
11	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
13	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
14	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
15	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
16	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
17	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	13	None	replace
19	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  saving);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  savingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  savingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  savingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	11	None	replace
30	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
33	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(reduction,  addingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  addingRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(reduction,  saving);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  saving);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(reduction,  reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  reduction);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  newChild.addChildrenToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToBack(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reduction);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  contributingRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  eliminatingRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  reducer.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducer.addChildToFront(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  reducer.removeChild(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducer.removeChild(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  reducer.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducer.addChildToBack(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  reduction.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reduction.addChildToBack(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  reducer.removeChild(addedRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducer.removeChild(addedRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(addedRoot);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  addChildToFront(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addChildToFront(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	14	None	replace
49	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducers.add(reduction,  addingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  reducers.add(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducers.add(reduction,  saving);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  saving);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducers.add(reduction,  contributingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  reductions.add(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reductions.add(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.add(reduction);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  reducers.addAll(reductions);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducers.addAll(reductions);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(reductions);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  reducers.remove(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducers.remove(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(reduction);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  saving);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	9	None	replace
63	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
66	[BUG]  [BUGGY]  newChild.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToFront(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(reduction);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(reduction,  reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  reduction);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  eliminatingRoot);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(reduction,  savings);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  savings);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  contributingRoot);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
73	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
74	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
75	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
76	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
77	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
78	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
80	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
81	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
82	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
83	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
84	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
86	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
87	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
88	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  saving);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
93	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
94	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
95	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	12	None	replace
96	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
98	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	12	None	replace
99	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
100	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
101	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
102	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
105	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
106	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
109	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
110	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(addedRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
111	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCode);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
112	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
113	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
114	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(addedRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
115	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
116	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
118	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
120	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducer.addChildrenToFront(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
121	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
122	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  }  else  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  }  else  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction);  }  else  {  reducer.addChildrenToFront(reduction);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
123	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
124	[BUG]  [BUGGY]  newChild.addChildToBack(addedRoot);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(addedRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(addedRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
125	[BUG]  [BUGGY]  newChild.addChildToBack(savedRoot);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(savedRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(savedRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
126	[BUG]  [BUGGY]  newChild.addChildToBack(addingRoot);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(addingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(addingRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  newChild.addChildToBack(new  ReductionGatherer());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildToBack(new  ReductionGatherer());  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(new  ReductionGatherer());	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
128	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
129	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
130	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
131	[BUG]  [BUGGY]  reducers.add(addedRoot);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  reducers.add(addedRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(addedRoot);	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
132	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
133	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
134	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
135	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
136	[BUG]  [BUGGY]  newChild.addChildrenToFront(addedRoot);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(addedRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(addedRoot);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
137	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(null);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
138	[BUG]  [BUGGY]  newChild.addChildrenToFront(addingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(addingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(addingRoot);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
140	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
141	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	9	None	replace
142	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
143	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
144	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
145	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
146	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
147	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	18	None	replace
148	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
149	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
150	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
151	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
152	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducedr.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
153	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	13	None	replace
154	[BUG]  [BUGGY]  newChild.removeChild(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.removeChild(reduction);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.removeChild(reduction);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
155	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildAfter(reduction,  addingRoot);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot);	  newChild.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
156	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	17	None	replace
157	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
158	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
159	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
160	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
161	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
162	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
163	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.iterator().next();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Reducer  reducer  =  reductions.iterator().next();  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.iterator().next();	  reducers.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
164	[BUG]  [BUGGY]  newChild.addChildrenToFront(reducing);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  newChild.addChildrenToFront(reducing);  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reducing);	  newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
165	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
166	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
167	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
168	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
169	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
170	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	19	None	replace
171	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
172	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
173	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.removeChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
174	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
175	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	11	None	replace
176	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
177	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }    [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
