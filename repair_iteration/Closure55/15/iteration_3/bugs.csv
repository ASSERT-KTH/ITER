bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
2	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
3	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
4	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
5	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
6	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
7	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
8	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  helperCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  helperCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
9	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  aiderCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  aiderCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  aiderCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
10	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  helperCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
11	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  helperCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  helperCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
12	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	84	None	replace
13	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
14	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
15	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
16	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
17	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	156	None	replace
18	[BUG]  [BUGGY]  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(ReductionGatherer    helperCodeCost    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
19	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);AddingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);AddingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);AddingRoot.addChildrenToFront(helperCodeCost);	  for(ReductionGatherer    helperCodeCost    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
20	[BUG]  [BUGGY]  ReductionGatherer  reductionCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reductionCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  reductionCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reductionCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  reductionCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reductionCodeCost);	  for(ReductionGatherer    helperCodeCost    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
21	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
22	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.applyToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
23	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduction.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduction.applyToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduction.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
24	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
25	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.applyToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
26	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
27	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
28	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
29	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
30	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	96	None	replace
31	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
32	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
33	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
34	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.  [CE]  <identifier>  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	96	None	replace
35	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
36	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
37	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
38	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
39	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
40	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
41	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
42	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
43	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
44	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
45	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
46	[BUG]  [BUGGY]  reducers.remove(reduction.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(reduction.getFirstChild());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(reduction.getFirstChild());	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
47	[BUG]  [BUGGY]  reducers.remove(reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(reduction.getChildCount());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(reduction.getChildCount());	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
48	[BUG]  [BUGGY]  reducers.remove(reduction.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(reduction.getChildCount()  -  1);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(reduction.getChildCount()  -  1);	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
49	[BUG]  [BUGGY]  reducers.remove(reduction.getString());  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(reduction.getString());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(reduction.getString());	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
50	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	7	None	replace
51	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  reducers.addAll(reductions,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addAll(reductions,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(reductions,  savings);	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
53	[BUG]  [BUGGY]  reducers.addAll(savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addAll(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(savings);	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
54	[BUG]  [BUGGY]  reductions.addAll(reductions);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.addAll(reductions);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.addAll(reductions);	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
55	[BUG]  [BUGGY]  reducers.addAll(reductions.values());  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addAll(reductions.values());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(reductions.values());	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
56	[BUG]  [BUGGY]  reducers.addAll(reductions.size());  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addAll(reductions.size());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(reductions.size());	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
57	[BUG]  [BUGGY]  reducers.addAll(reductions,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addAll(reductions,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(reductions,  addingRoot);	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
58	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  eliminatingRoot,  savings);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
59	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot,  savings);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
60	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  eliminatingRoot,  saving);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
61	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  eliminatingRoot,  reduction);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
62	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,reducingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,reducingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,reducingRoot,  savings);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
63	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
64	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
65	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
66	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
67	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
68	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addingRoot.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addingRoot.addChildrenToFront(reduction);	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
69	[BUG]  [BUGGY]  ingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
70	[BUG]  [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
71	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildrenToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
72	[BUG]  [BUGGY]  reduction.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
73	[BUG]  [BUGGY]  reduction.addChildToBack(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
74	[BUG]  [BUGGY]  Corrections.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Corrections.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Corrections.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
75	[BUG]  [BUGGY]  Corrections.checkState(reduction.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Corrections.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Corrections.checkState(reduction.getType()  ==  Token.NAME);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
76	[BUG]  [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
77	[BUG]  [BUGGY]  reducer.removeChild(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(reduction);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
78	[BUG]  [BUGGY]  reducer.addChildrenToFront(savings);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(savings);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(savings);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
79	[BUG]  [BUGGY]  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(reduction);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  reducer.addChildToBack(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(reduction);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
81	[BUG]  [BUGGY]  reducer.addChildrenToFront(reducingRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reducingRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reducingRoot);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  reducer.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(addedRoot);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
83	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(reduction);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
84	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(helperCode);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
85	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(null,  reduction);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
86	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
87	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(root);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
88	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(null,  savings);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
89	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(savings);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
90	[BUG]  [BUGGY]  newChild.removeChild(reduction.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.removeChild(reduction.getFirstChild());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.removeChild(reduction.getFirstChild());	  newChild.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
91	[BUG]  [BUGGY]  newChild.removeChild(addedRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.removeChild(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.removeChild(addedRoot);	  newChild.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
92	[BUG]  [BUGGY]  reduction.removeChild(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.removeChild(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.removeChild(reduction);	  newChild.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
93	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(reduction,  addingRoot);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
94	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(reduction,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(reduction,  saving);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
95	[BUG]  [BUGGY]  reducer.addChildToBack(savedRoot);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(savedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(savedRoot);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
96	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(reduction,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(reduction,  contributingRoot);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
97	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(reduction,  addingRoot);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
98	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(reduction,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(reduction,  saving);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
99	[BUG]  [BUGGY]  reducer.addChildToFront(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(savings);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
100	[BUG]  [BUGGY]  reducer.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(savings);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
101	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reduction,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction,  savings);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
102	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction,  addingRoot);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
103	[BUG]  [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(new  ReductionGatherer(),  reduction);	  newChild.addChildToBack(new    ReductionGatherer());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
104	[BUG]  [BUGGY]  newChild.addChildToBack(reduction.getReductionGatherer());  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction.getReductionGatherer());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction.getReductionGatherer());	  newChild.addChildToBack(new    ReductionGatherer());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
105	[BUG]  [BUGGY]  newChild.addChildToBack(reductionGatherer);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reductionGatherer);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reductionGatherer);	  newChild.addChildToBack(new    ReductionGatherer());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
106	[BUG]  [BUGGY]  reducer.removeChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChildrenToFront(reduction);	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
107	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
108	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
109	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  null);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Preconditions.checkState(reduction!=  null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Preconditions.checkState(reduction!=  null);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(savings!=  null);  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Preconditions.checkState(savings!=  null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Preconditions.checkState(savings!=  null);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(savings  ==  null);  [CE]  illegal  start  of  expression  [FE]                                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Preconditions.checkState(savings  ==  null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Preconditions.checkState(savings  ==  null);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
113	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  saving,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  saving,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  saving,  reduction);	  newChild.addChildToBack(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
114	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  pruning);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  pruning);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  pruning);	  newChild.addChildToBack(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
115	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,reducing);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,reducing);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,reducing);	  newChild.addChildToBack(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
116	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  contributingRoot,  savings);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
117	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  contributingRoot,  reduction);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
118	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  contributingRoot,  saving);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
119	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  addingRoot,  savings);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
120	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChild(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
121	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.removeChild(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChild(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
122	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.removeChild(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChild(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
123	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChild(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
124	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.replaceChild(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.replaceChild(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.replaceChild(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChild(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
125	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
126	[BUG]  [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
127	[BUG]  [BUGGY]  for(ReductionGatherer  helpingRoot  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helpingRoot  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helpingRoot  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
128	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
129	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
130	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
131	[BUG]  [BUGGY]  newChild.addChildToBack(root);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(root);	  newChild.addChildToBack(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
132	[BUG]  [BUGGY]  newChild.addChildToBack(addedRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(addedRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(addedRoot,  reduction);	  newChild.addChildToBack(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
133	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.applyTo(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
134	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyTo(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyTo(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.applyTo(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.applyTo(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
135	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.applyTo(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
136	[BUG]  [BUGGY]  reducer.applyTo(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.applyTo(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.applyTo(reduction);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    reducer.applyTo(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
137	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
138	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
139	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
140	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
141	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
142	[BUG]  [BUGGY]  Pentru(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	166	None	replace
143	[BUG]  [BUGGY]  For(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	166	None	replace
144	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
145	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
146	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
147	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
148	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	153	None	replace
149	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	153	None	replace
150	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	153	None	replace
151	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
152	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
153	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
154	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
155	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
156	[BUG]  [BUGGY]  reducers.add(addedRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(addedRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(addedRoot,  reduction);	  reducers.add(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
157	[BUG]  [BUGGY]  reductions.add(addedRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.add(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.add(addedRoot);	  reducers.add(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
158	[BUG]  [BUGGY]  reducings.add(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducings.add(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducings.add(reduction);	  reducers.add(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
159	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
160	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
161	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	87	None	replace
162	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
163	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
164	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
165	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	62	None	replace
166	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	62	None	replace
167	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	62	None	replace
168	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
169	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
170	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
171	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
172	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
173	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  savingRoot);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
174	[BUG]  [BUGGY]  newChild.addChildToBack(savedRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(savedRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(savedRoot,  reduction);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
175	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  savingRoot);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
176	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  savedRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  savedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  savedRoot);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
177	[BUG]  [BUGGY]  newChild.addChildToBack(reducer);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reducer);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reducer);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
178	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot,  reduction);	  newChild.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
179	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot,  helperCode);	  newChild.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
180	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  saver);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  saver);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot,  saver);	  newChild.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
181	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  reducer);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  reducer);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot,  reducer);	  newChild.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
182	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
183	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reduction,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction,  contributingRoot);	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
184	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot,  helperCode);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot,  helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot,  helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
185	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction,  reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
186	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  ')'  expected	176	None	replace
187	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
188	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
189	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
190	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.clone())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.clone())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.clone())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
191	[BUG]  [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  pruningRoot.values())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
192	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reduction.values())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
193	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.getChildren())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.getChildren())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.getChildren())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
194	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
195	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reduction.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
196	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasing.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  decreasing.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  decreasing.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
197	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.clone())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.clone())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.clone())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
198	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.getChildren())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.getChildren())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.getChildren())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
199	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
200	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
201	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reduction,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction,  savingRoot);	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
202	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  root);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  root);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  root);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
203	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
204	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	13	None	replace
205	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
206	[BUG]  [BUGGY]  newChild.addChildToFront(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToFront(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(reduction,  addingRoot);	  newChild.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
207	[BUG]  [BUGGY]  newChild.addChildToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToFront(reduction,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(reduction,  reduction);	  newChild.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
208	[BUG]  [BUGGY]  newChild.addChildToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToFront(reduction,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(reduction,  saving);	  newChild.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
209	[BUG]  [BUGGY]  newChild.addChildToFront(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToFront(reduction,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(reduction,  contributingRoot);	  newChild.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
210	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
211	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
212	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
213	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
214	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	10	None	replace
215	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	10	None	replace
216	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	10	None	replace
217	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,reducings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,reducings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,reducings);	  newChild.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
218	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  reductions);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  reductions);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  reductions);	  newChild.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
219	[BUG]  [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :reducings.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
220	[BUG]  [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  pruningRoot.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
221	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasing.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  decreasing.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  decreasing.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
222	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reduction.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
223	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	65	None	replace
224	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
225	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCode  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCode  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCode  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
226	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
227	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
228	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
229	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
230	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
231	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildIntoFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildIntoFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildIntoFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
232	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot,  saving);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
233	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot,  savings);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
234	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot,  helperCode);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
235	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot,  reduction);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
236	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
237	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
238	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(savings.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(savings.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(savings.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
239	[BUG]  [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelperCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
240	[BUG]  [BUGGY]  helperCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  helperCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	helperCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
241	[BUG]  [BUGGY]  aiderCodeCost.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCodeCost.addChildToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCodeCost.addChildToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
242	[BUG]  [BUGGY]  HelperCodeCost.addChildrenToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelperCodeCost.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelperCodeCost.addChildrenToFront(reduction,  reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
243	[BUG]  [BUGGY]  addChildToFront(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addChildToFront(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addChildToFront(reduction,  addingRoot);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
244	[BUG]  [BUGGY]  addChildToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addChildToFront(reduction,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addChildToFront(reduction,  reduction);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
245	[BUG]  [BUGGY]  addChildToFront(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addChildToFront(reduction,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addChildToFront(reduction,  contributingRoot);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
246	[BUG]  [BUGGY]  addChildToFront(reduction,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addChildToFront(reduction,  eliminatingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addChildToFront(reduction,  eliminatingRoot);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
247	[BUG]  [BUGGY]  addChildToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addChildToFront(reduction,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addChildToFront(reduction,  savings);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
248	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
249	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
250	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.removeChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	173	None	replace
251	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
252	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  addingRoot,  helperCode);	  newChild.addChildToBack(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
253	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  addingRoot,  reduction);	  newChild.addChildToBack(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
254	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  addingRoot,  saving);	  newChild.addChildToBack(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
255	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  saver);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  addingRoot,  saver);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  addingRoot,  saver);	  newChild.addChildToBack(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
256	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
257	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
258	[BUG]  [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
259	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
260	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
261	[BUG]  [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
262	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
263	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
264	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
265	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
266	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
267	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
268	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
269	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
270	[BUG]  [BUGGY]  Node  helpingRoot  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
271	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
272	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
273	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
274	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
275	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  savingRoot);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  savingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  savingRoot);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
276	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
277	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
278	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
279	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
280	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(savings);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(savings);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(savings);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(helperCode);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
281	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(helperCode);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
282	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(helperCode);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
283	[BUG]  [BUGGY]  reductions.add(reduction.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.add(reduction.getChildCount()  -  1);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.add(reduction.getChildCount()  -  1);	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
284	[BUG]  [BUGGY]  reductions.add(reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.add(reduction.getChildCount());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.add(reduction.getChildCount());	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
285	[BUG]  [BUGGY]  reductions.add(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.add(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.add(reduction,  addingRoot);	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
286	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  }	  For(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	86	None	replace
287	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }	  For(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	86	None	replace
288	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
289	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
290	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
291	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
292	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
293	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
294	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
295	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
296	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
297	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
298	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	175	None	replace
299	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	175	None	replace
300	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	175	None	replace
301	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
302	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
303	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
304	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
305	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
306	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
307	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	107	None	replace
308	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	107	None	replace
309	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
310	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(savings);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildrenToFront(savings);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildrenToFront(savings);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
311	[BUG]  [BUGGY]  aiderCode.removeChild(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.removeChild(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.removeChild(reduction);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
312	[BUG]  [BUGGY]  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
313	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
314	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
315	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
316	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
317	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
318	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
319	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  	172	None	replace
320	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
321	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  	172	None	replace
322	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode  ==  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode  ==  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
323	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helpingRoot.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helpingRoot.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helpingRoot.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
324	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	88	None	replace
325	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
326	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	88	None	replace
327	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
328	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  &&  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  &&  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  &&  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
329	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
330	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
331	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	146	None	replace
332	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
333	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
334	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.get(helperCodeCost).iterator().next();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.get(helperCodeCost).iterator().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.get(helperCodeCost).iterator().next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
335	[BUG]  [BUGGY]  Reducer  reducer  =  reductionMap.iterator().next();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductionMap.iterator().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductionMap.iterator().next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
336	[BUG]  [BUGGY]  Reducer  reducer  =reducings.iterator().next();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =reducings.iterator().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =reducings.iterator().next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
337	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.iterator().next();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reduction.iterator().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reduction.iterator().next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
338	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.get(helperCodeCost).next();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.get(helperCodeCost).next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.get(helperCodeCost).next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
339	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.get(0).next();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.get(0).next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.get(0).next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
340	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
341	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
342	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
343	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
344	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  reduction);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
345	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  helperCode);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
346	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  savings);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
347	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  reducer);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  reducer);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  reducer);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
348	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  saving);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
349	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  saver);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  saver);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  saver);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
350	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  contributingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  contributingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  contributingRoot,  reduction);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
351	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
352	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
353	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  savings.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  savings.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  savings.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
354	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
355	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
356	[BUG]  [BUGGY]  Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
357	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
358	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
359	[BUG]  [BUGGY]  Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
360	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
361	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
362	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
363	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
364	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
365	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
366	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
367	[BUG]  [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
368	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(savings);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
369	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
370	[BUG]  [BUGGY]  Node  helpingRoot  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
371	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
372	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
373	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
374	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(savings);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(savings);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(savings);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
375	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  saver  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(reducer);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  saver  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(reducer);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  saver  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(reducer);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
376	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
377	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
378	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
379	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
380	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
381	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
382	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
383	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
384	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductionMap.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
385	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
386	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
387	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
388	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
389	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	162	None	replace
390	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
391	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
392	[BUG]  [BUGGY]  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
393	[BUG]  [BUGGY]  newChild.addChildToBack(addingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(addingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(addingRoot,  reduction);	  newChild.addChildToBack(addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
394	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction,  reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
395	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
396	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
397	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
398	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savings.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
399	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
400	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
401	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
402	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
403	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(reduction,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(reduction,  savingRoot);	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
404	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  root);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  root);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  root);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
405	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
406	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
407	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
408	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	91	None	replace
409	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
410	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	47	None	replace
411	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
412	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
413	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
414	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
415	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
416	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
417	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
418	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  ')'  expected	130	None	replace
419	[BUG]  [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
420	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
421	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
422	[BUG]  [BUGGY]  Node  savingRoot  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
423	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(false);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
424	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reduction.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
425	[BUG]  [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :reducings.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
426	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasing.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  decreasing.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  decreasing.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
427	[BUG]  [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  pruningRoot.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
428	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
429	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
430	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
431	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
432	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
433	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(root);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
434	[BUG]  [BUGGY]  Node  savingRoot  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
435	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
436	[BUG]  [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
437	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
438	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
439	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
440	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  SavingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
441	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	9	None	replace
442	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot,  saving);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
443	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  saving);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
444	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
445	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
446	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
447	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
448	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
449	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  &&  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  &&  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  &&  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
450	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
451	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
452	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
453	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  &&  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  &&  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  &&  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
454	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
455	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
456	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
457	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
458	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
459	[BUG]  [BUGGY]  reducer.removeChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChildToBack(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChildToBack(reduction);	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
460	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
461	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
462	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
463	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
464	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
465	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
466	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
467	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
468	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction,  reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
469	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot,  helperCode);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot,  helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot,  helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
470	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
471	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
472	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
473	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
474	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
475	[BUG]  [BUGGY]  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
476	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(savings);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
477	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
478	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(parent);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
479	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.applyChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
480	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedRoot.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedRoot.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducedRoot.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
481	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
482	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  >=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  >=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  >=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()!=    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
483	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()!=    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
484	[BUG]  [BUGGY]  reducer.removeChild(addingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(addingRoot);	  reducer.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
485	[BUG]  [BUGGY]  reducer.removeChild(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(reduction,  addingRoot);	  reducer.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
486	[BUG]  [BUGGY]  reducer.removeChild(creator);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(creator);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(creator);	  reducer.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
487	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
488	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
489	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
490	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
491	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	100	None	replace
492	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	100	None	replace
493	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
494	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
495	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  NodeHelperCode  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	NodeHelperCode  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
496	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
497	[BUG]  [BUGGY]  reducers.addChildrenToFront(reduction.getReductionGatherer());  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addChildrenToFront(reduction.getReductionGatherer());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addChildrenToFront(reduction.getReductionGatherer());	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
498	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();reducings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();reducings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();reducings.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
499	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
500	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildrenToFront(helperCodeCost,  reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
501	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EXPR_RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
502	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EXPR_RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
503	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	99	None	replace
504	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	99	None	replace
505	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  eliminatingRoot,  savings);	  newChild.addChildToBack(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
506	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  eliminatingRoot,  saving);	  newChild.addChildToBack(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
507	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  eliminatingRoot,  reduction);	  newChild.addChildToBack(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
508	[BUG]  [BUGGY]  newChild.addChildToBack(savingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(savingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(savingRoot,  reduction);	  newChild.addChildToBack(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
509	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
510	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
511	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
512	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	158	None	replace
513	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	158	None	replace
514	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
515	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
516	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(parent);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(parent);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(parent);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
517	[BUG]  [BUGGY]  SavingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  SavingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	SavingRoot.addChildrenToFront(reduction.getNodeForCodeInsertion(null));	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
518	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  addingRoot,  saving);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  addingRoot,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  addingRoot,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
519	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
520	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
521	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.applyChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
522	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
523	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  helping);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  helping);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  helping);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
524	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
525	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  SavingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
526	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  SavingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
527	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
528	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	29	None	replace
529	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	29	None	replace
530	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  addingRoot.addChildrenToFront(helperCodeCost);	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
531	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
532	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducing.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
533	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  addingRoot.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  addingRoot.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  addingRoot.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducing.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
534	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduction.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduction.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduction.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducing.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
535	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(reduction,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(reduction,  saving);	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
536	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot,  saving);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
537	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  saving);  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
538	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
539	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
540	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(savings);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(savings);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(savings);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
541	[BUG]  [BUGGY]  reducers.add(reduction,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  eliminatingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  eliminatingRoot);	  reducers.add(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
542	[BUG]  [BUGGY]  réduirs.add(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  réduirs.add(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	réduirs.add(reduction,  addingRoot);	  reducers.add(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
543	[BUG]  [BUGGY]  reducers.add(reduction,  eliminating);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  eliminating);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  eliminating);	  reducers.add(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
544	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
545	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
546	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
547	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
548	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
549	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
550	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
551	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
552	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
553	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
554	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
555	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
556	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  saving);	  newChild.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
557	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,reducing);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,reducing);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,reducing);	  newChild.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
558	[BUG]  [BUGGY]  reduction.addChildToBack(savedRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(savedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(savedRoot);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
559	[BUG]  [BUGGY]  reduction.addChildToBack(addedRoot);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(addedRoot);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
560	[BUG]  [BUGGY]  reduction.addChildToBack(savings);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(savings);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
561	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
562	[BUG]  [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
563	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	95	None	replace
564	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	95	None	replace
565	[BUG]  [BUGGY]  for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
566	[BUG]  [BUGGY]  Pentru(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	132	None	replace
567	[BUG]  [BUGGY]  RecductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
568	[BUG]  [BUGGY]  reductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
569	[BUG]  [BUGGY]  for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(help  [CE]  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(help  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(help	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  	132	None	replace
570	[BUG]  [BUGGY]  newChild.addChildrenToFront(addedRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(addedRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(addedRoot,  reduction);	  newChild.addChildrenToFront(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
571	[BUG]  [BUGGY]  newChild.addChildrenToFront(root);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(root);	  newChild.addChildrenToFront(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
572	[BUG]  [BUGGY]  newChild.addChildrenToFront(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(null);	  newChild.addChildrenToFront(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
573	[BUG]  [BUGGY]  newChild.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(savings);	  newChild.addChildrenToFront(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
574	[BUG]  [BUGGY]  reducer.removeChild(root);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(root);	  reducer.removeChild(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
575	[BUG]  [BUGGY]  reducer.removeChild(addedRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(addedRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(addedRoot,  reduction);	  reducer.removeChild(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
576	[BUG]  [BUGGY]  reducer.replaceChild(root,  reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.replaceChild(root,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.replaceChild(root,  reduction);	  reducer.removeChild(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
577	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
578	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
579	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
580	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
581	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
582	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
583	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction,  reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
584	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  contributingRoot.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
585	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot,  helperCode);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot,  helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot,  helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
586	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
587	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
588	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(savings);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(savings);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(savings);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
589	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(root);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(root);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(root);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
590	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  contributingRoot,  savings);	  newChild.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
591	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  contributingRoot,  reduction);	  newChild.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
592	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  contributingRoot,  saving);	  newChild.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
593	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  addingRoot,  contributingRoot);	  newChild.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
594	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  saving.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  saving.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  saving.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
595	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
596	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  saving.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  saving.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  saving.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
597	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	168	None	replace
598	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  saving.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  saving.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  saving.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
599	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildrenToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.addChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
600	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  addingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot,  helperCode);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
601	[BUG]  [BUGGY]  reducings.add(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducings.add(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducings.add(reduction,  addingRoot);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
602	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  addingRoot,  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot,  savings);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
603	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  addingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot,  saving);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
604	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot,  saver);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  addingRoot,  saver);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot,  saver);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
605	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
606	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
607	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduction.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduction.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduction.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
608	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
609	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
610	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
611	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
612	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aidCode.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
613	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
614	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saver.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saver.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saver.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
615	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
616	[BUG]  [BUGGY]  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
617	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
618	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChild(reduction);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
619	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChild(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
620	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  reducer.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChild(reduction);    }    	non-compiled	[CE]  ')'  expected	27	None	replace
621	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  	141	None	replace
622	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [CE]  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  	141	None	replace
623	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  	141	None	replace
624	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  	141	None	replace
625	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	141	None	replace
626	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
627	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
628	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
629	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
630	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	160	None	replace
631	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	160	None	replace
632	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
633	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
634	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	105	None	replace
635	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
636	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
637	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	139	None	replace
638	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
639	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
640	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
641	[BUG]  [BUGGY]  newChild.addChildrenToFront(addingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(addingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(addingRoot,  reduction);	  newChild.addChildrenToFront(addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
642	[BUG]  [BUGGY]  newChild.addChildrenToFront(externs);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(externs);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(externs);	  newChild.addChildrenToFront(addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
643	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducedr.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducedr.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducedr.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducedr.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
644	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducedr.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducedr.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
645	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducedr.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
646	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducedr.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
647	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
648	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToBack(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
649	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  savingRoot);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  savingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  savingRoot);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
650	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
651	[BUG]  [BUGGY]  newChild.addChildrenToFront(reductions);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reductions);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reductions);	  newChild.addChildrenToFront(reducing);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
652	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
653	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
654	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [CE]  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	48	None	replace
655	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelper();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
656	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
657	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
658	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings);  [CE]  ';'  expected  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  ';'  expected	119	None	replace
659	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer();  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
660	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  savings;  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  savings;  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
661	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
662	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  savingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  savingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  savingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
663	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
664	[BUG]  [BUGGY]  newChild.addChildrenToBack(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(reduction,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reduction,  reduction);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
665	[BUG]  [BUGGY]  newChild.addChildrenToBack(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reduction,  addingRoot);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
666	[BUG]  [BUGGY]  newChild.addChildrenToBack(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(reduction,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reduction,  saving);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
667	[BUG]  [BUGGY]  newChild.addChildrenToBack(reduction,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(reduction,  eliminatingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reduction,  eliminatingRoot);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
668	[BUG]  [BUGGY]  newChild.addChildrenToBack(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(reduction,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reduction,  contributingRoot);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
669	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,reducingRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,reducingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,reducingRoot);	  newChild.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
670	[BUG]  [BUGGY]  reducers.remove(addedRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(addedRoot);	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
671	[BUG]  [BUGGY]  reducers.put(helperCode,  reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.put(helperCode,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.put(helperCode,  reduction);	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
672	[BUG]  [BUGGY]  Reducer  reducer  =  reducers.get(reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reducers.get(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reducers.get(reduction);	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
673	[BUG]  [BUGGY]  reducers.remove(helperCode);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(helperCode);	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
674	[BUG]  [BUGGY]  reducers.remove(reduction.getName());  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.remove(reduction.getName());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.remove(reduction.getName());	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
675	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	166	None	replace
676	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
677	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.getNodeForCodeInsertion(null);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.getNodeForCodeInsertion(null);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.getNodeForCodeInsertion(null);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.applyTo(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
678	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(root);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
679	[BUG]  [BUGGY]  Node  helpingRoot  =  mapping.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  mapping.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  mapping.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
680	[BUG]  [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
681	[BUG]  [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
682	[BUG]  [BUGGY]  reducer.addChildrenToFront(addedRoot);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(addedRoot);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
683	[BUG]  [BUGGY]  reducer.addChildrenToFront(addingRoot);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(addingRoot);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
684	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Preconditions.checkState(helperCodeCost!=  null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Preconditions.checkState(helperCodeCost!=  null);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
686	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
687	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FOR)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FOR)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FOR)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
688	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  root);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  root);	  newChild.addChildToBack(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
689	[BUG]  [BUGGY]  newChild.addChildToBack(reducingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reducingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reducingRoot,  saving);	  newChild.addChildToBack(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
690	[BUG]  [BUGGY]  reducer.addChildToBack(addedRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(addedRoot);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
691	[BUG]  [BUGGY]  reducer.addChildToBack(null);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(null);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
692	[BUG]  [BUGGY]  reducer.addChildToBack(new  ReductionGatherer());  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToBack(new  ReductionGatherer());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToBack(new  ReductionGatherer());	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
693	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
694	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
695	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
696	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
697	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
698	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
699	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChild(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
700	[BUG]  [BUGGY]  for(Reduction  contributingRoot  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  contributingRoot  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  contributingRoot  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
701	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
702	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
703	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
704	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.keySet())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.keySet())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.keySet())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
705	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
706	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
707	[BUG]  [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
708	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
709	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(addedRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
710	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
711	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
712	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
713	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
714	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
715	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
716	[BUG]  [BUGGY]  if(reduction!=  null)  {  addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction!=  null)  {  addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  addChildToFront(reduction);  }	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
717	[BUG]  [BUGGY]  saver.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  saver.addChildToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	saver.addChildToFront(reduction);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
718	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
719	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
720	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
721	[BUG]  [BUGGY]  for(Reduction  reduction  :  remainingRoot.values())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  remainingRoot.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  remainingRoot.values())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
722	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
723	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
724	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitReduction();  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitReduction();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getImplicitReduction();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
725	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReduction();  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReduction();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReduction();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
726	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	62	None	replace
727	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	62	None	replace
728	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
729	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
730	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
731	[BUG]  [BUGGY]  for(Reduction  reduction  :  remainingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  remainingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  remainingRoot.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
732	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot  -  1);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot  -  1);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
733	[BUG]  [BUGGY]  reducers.add(reducingRoot,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reducingRoot,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reducingRoot,  contributingRoot);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
734	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot,  aiderCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot,  aiderCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot,  aiderCode);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
735	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  contributingRoot,  helperCode);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
736	[BUG]  [BUGGY]  newChild.addChildToBack(reducingRoot,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reducingRoot,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reducingRoot,  contributingRoot);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
737	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
738	[BUG]  [BUGGY]  reduction  =  helperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction  =  helperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction  =  helperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
739	[BUG]  [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
740	[BUG]  [BUGGY]  aiderCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
741	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  }	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
742	[BUG]  [BUGGY]  reduction  =  helperCodeCost.getChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction  =  helperCodeCost.getChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction  =  helperCodeCost.getChildrenToFront(reduction);  compiler.reportCodeChange();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
743	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
744	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
745	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
746	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCode  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCode  =  compiler.getNodeForCodeInsertion(null);	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
747	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
748	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
749	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [CE]  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
750	[BUG]  [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),  reducer);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),  reducer);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(new  ReductionGatherer(),  reducer);	  newChild.addChildToBack(new    ReductionGatherer());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
751	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
752	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
753	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  helping);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  helping);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToBack(reduction,  helping);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
754	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
755	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
756	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
757	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
758	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  réduir.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  réduir.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY)  {  réduir.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
759	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  >=  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  >=  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  >=  Token.EMPTY)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
760	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  SavingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
761	[BUG]  [BUGGY]  SavingRoot.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  SavingRoot.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	SavingRoot.addChildrenToFront(reduction);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
762	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
763	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
764	[BUG]  [BUGGY]  newChild.addChildToFront(new  ReductionGathererReducer());  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToFront(new  ReductionGathererReducer());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(new  ReductionGathererReducer());	  newChild.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
765	[BUG]  [BUGGY]  newChild.addChildToFront(addedRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToFront(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToFront(addedRoot);	  newChild.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
766	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(null);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(null);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(null);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(helperCode);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
767	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer();  reducers.addChildToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
768	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  reducers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  reducers.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  reducers.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
769	[BUG]  [BUGGY]  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addChildrenToFront(reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
770	[BUG]  [BUGGY]  gerCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  gerCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	gerCode.addChildrenToFront(reduction);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
771	[BUG]  [BUGGY]  reducerCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducerCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducerCode.addChildrenToFront(reduction);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
772	[BUG]  [BUGGY]  aiderCode.addChildToBack(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildToBack(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildToBack(reduction);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
773	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	98	None	replace
774	[BUG]  [BUGGY]  Node  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
775	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
776	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
777	[BUG]  [BUGGY]  newChild.addChildToBack(null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(null);	  newChild.addChildToBack(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
778	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducing.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
779	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.addToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducing.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
780	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
781	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
782	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
783	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
784	[BUG]  [BUGGY]  Node  helperCodeCost  =reducings.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =reducings.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =reducings.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
785	[BUG]  [BUGGY]  newChild.addChildToBack(reducingRoot,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reducingRoot,  eliminatingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reducingRoot,  eliminatingRoot);	  newChild.addChildToBack(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
786	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
787	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
788	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
789	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
790	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
791	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(helperCode,  reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(helperCode,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(helperCode,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
792	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
793	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
794	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	174	None	replace
795	[BUG]  [BUGGY]  newChild.addChildrenToFront(creator);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(creator);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(creator);	  newChild.addChildrenToFront(reducing);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
796	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
797	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  continue;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  continue;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
798	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	13	None	replace
799	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.keySet())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.keySet())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.keySet())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
800	[BUG]  [BUGGY]  newChild.addChildToBack(creator,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(creator,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(creator,  reduction);	  newChild.addChildToBack(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
801	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
802	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
803	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
804	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(addedRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(addedRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToFront(addedRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
805	[BUG]  [BUGGY]  newChild.addChildToBack(externs);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(externs);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(externs);	  newChild.addChildToBack(addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
806	[BUG]  [BUGGY]  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
807	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
808	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
809	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
810	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
811	[BUG]  [BUGGY]  Afin(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Afin(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Afin(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	156	None	replace
812	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
813	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	158	None	replace
814	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	158	None	replace
815	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
816	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  helperCode.addChildrenToFront(reduction,  reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  helperCode.addChildrenToFront(reduction,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  helperCode.addChildrenToFront(reduction,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
817	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildrenToFront(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildrenToFront(reduction,  addingRoot);	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
818	[BUG]  [BUGGY]  reductions.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.addChildrenToFront(reduction);	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
819	[BUG]  [BUGGY]  réductions.add(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  réductions.add(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	réductions.add(reduction);	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
820	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
821	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
822	[BUG]  [BUGGY]  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  contributingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
823	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
824	[BUG]  [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
825	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
826	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	99	None	replace
827	[BUG]  [BUGGY]  for(Reduction  reduction  :  remainingRoots.values())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  remainingRoots.values())  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  remainingRoots.values())  {  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
828	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.getNodeForCodeInsertion(null);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.getNodeForCodeInsertion(null);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.getNodeForCodeInsertion(null);  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
829	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
830	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
831	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
832	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
833	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
834	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	153	None	replace
835	[BUG]  [BUGGY]  if(savings!=  null)  {  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(savings!=  null)  {  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(savings!=  null)  {  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
836	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
837	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
838	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
839	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducedr.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducedr.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducedr.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducedr.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
840	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	175	None	replace
841	[BUG]  [BUGGY]  CorrectionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
842	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
843	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
844	[BUG]  [BUGGY]  reduction  =  helperCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction  =  helperCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction  =  helperCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
845	[BUG]  [BUGGY]  HelferCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelferCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelferCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
846	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
847	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
848	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  SavingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
849	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  helping);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  helping);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  helping);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
850	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
851	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
852	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
853	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  caregiver.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  caregiver.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  caregiver.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
854	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
855	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helper.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helper.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helper.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
856	[BUG]  [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
857	[BUG]  [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  compiler.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  compiler.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
858	[BUG]  [BUGGY]  reducer.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(helperCode);	  reducer.removeChild(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
859	[BUG]  [BUGGY]  Reduction  reduction  :  reduction.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reduction.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reduction.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	141	None	replace
860	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  oldChild  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  oldChild  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  oldChild  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	141	None	replace
861	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	141	None	replace
862	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	141	None	replace
863	[BUG]  [BUGGY]  reduction.addChildToBack(addingRoot);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(addingRoot);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
864	[BUG]  [BUGGY]  reduction.addChildToBack(null);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(null);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
865	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
866	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(newChild);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
867	[BUG]  [BUGGY]  for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(ReductionGatherer    helperCodeCost    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
868	[BUG]  [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(ReductionGatherer  helperCodeCost  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  for(ReductionGatherer    helperCodeCost    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
869	[BUG]  [BUGGY]  newChild.removeChild(addingRoot);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.removeChild(addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.removeChild(addingRoot);	  newChild.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
870	[BUG]  [BUGGY]  newChild.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(helperCode);	  newChild.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
871	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(newChild);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
872	[BUG]  [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
873	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(reduction,  addingRoot);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
874	[BUG]  [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  compiler.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
875	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  aiderCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  aiderCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  aiderCode);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
876	[BUG]  [BUGGY]  reducers.add(null,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(null,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(null,  addingRoot);	  reducers.add(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
877	[BUG]  [BUGGY]  reducers.add(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(null);	  reducers.add(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
878	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
879	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	85	None	replace
880	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelperCode.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelperCode.addChildrenToFront(reduction);	  For(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
881	[BUG]  [BUGGY]  reducer.removeChild(removingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(removingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(removingRoot);	  reducer.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
882	[BUG]  [BUGGY]  newChild.addChildToBack(creatingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(creatingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(creatingRoot,  reduction);	  newChild.addChildToBack(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
883	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
884	[BUG]  [BUGGY]  for(Reduction  contributingRoot  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  contributingRoot  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  contributingRoot  :  reductions.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
885	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
886	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoots.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoots.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoots.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
887	[BUG]  [BUGGY]  for(Reduction  reduction  :  remainingRoots.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  remainingRoots.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  remainingRoots.values())  {  reduced.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
888	[BUG]  [BUGGY]  newChild.addChildToBack(reducingRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reducingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reducingRoot);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
889	[BUG]  [BUGGY]  newChild.addChildToBack(savedRoot,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(savedRoot,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(savedRoot,  addingRoot);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
890	[BUG]  [BUGGY]  newChild.addChildToBack(removingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(removingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(removingRoot);	  newChild.addChildToBack(savedRoot);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
891	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduced.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
892	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
893	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  else  {  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  else  {  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  else  {	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
894	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost  [CE]  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  	80	None	replace
895	[BUG]  [BUGGY]  reducing  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducing  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducing  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
896	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
897	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.re	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	159	None	replace
898	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
899	[BUG]  [BUGGY]  for(Reduction  contributingRoot  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  contributingRoot  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  contributingRoot  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
900	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
901	[BUG]  [BUGGY]  HelferCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelferCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelferCode.addChildrenToFront(reduction);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
902	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.report  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.report  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.report	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	96	None	replace
903	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(null,  contributingRoot);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
904	[BUG]  [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild  =  compiler.getNodeForCodeInsertion(null,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild  =  compiler.getNodeForCodeInsertion(null,  savingRoot);	  newChild    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
905	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
906	[BUG]  [BUGGY]  reductions.add(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.add(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.add(reduction);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
907	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(addedRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
908	[BUG]  [BUGGY]  reducer.addChildToFront(addedRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(addedRoot);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
909	[BUG]  [BUGGY]  reducer.addChildToFront(new  ReductionGatherer());  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(new  ReductionGatherer());  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(new  ReductionGatherer());	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
910	[BUG]  [BUGGY]  reducer.addChildToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildToFront(helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildToFront(helperCode);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
911	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.keySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
912	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
913	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helpingRoot.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helpingRoot.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
914	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	73	None	replace
915	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
916	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.applyToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
917	[BUG]  [BUGGY]  reductions.removeChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.removeChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.removeChildrenToFront(reduction);	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
918	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
919	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.removeChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
920	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCode,  reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCode,  reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(helperCode,  reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
921	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
922	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Reduction  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
923	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
924	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	95	None	replace
925	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
926	[BUG]  [BUGGY]  reductions.removeChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.removeChildToBack(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.removeChildToBack(reduction);	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
927	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.values().next();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.values().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.values().next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
928	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.iterator();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.iterator();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.iterator();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
929	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
930	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  addingRoot  -  1);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot  -  1);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
931	[BUG]  [BUGGY]  reducers.add(reduction,  addingRoot  +  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  addingRoot  +  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  addingRoot  +  helperCode);	  reducers.add(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
932	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
933	[BUG]  [BUGGY]  Für(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Für(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Für(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
934	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  contributingRoot,  helperCode);	  newChild.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
935	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	48	None	replace
936	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	48	None	replace
937	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
938	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
939	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
940	[BUG]  [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
941	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
942	[BUG]  [BUGGY]  newChild.addChildrenToBack(addedRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(addedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(addedRoot);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
943	[BUG]  [BUGGY]  newChild.addChildrenToBack(addingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(addingRoot);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
944	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
945	[BUG]  [BUGGY]  for(Reduction  reduction  :  remainingRoot.values())  {  reduced.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  remainingRoot.values())  {  reduced.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  remainingRoot.values())  {  reduced.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
946	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.GETPROP  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.GETPROP  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.GETPROP  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
947	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
948	[BUG]  [BUGGY]  Für(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Für(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Für(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
949	[BUG]  [BUGGY]  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
950	[BUG]  [BUGGY]  Node  helpingCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
951	[BUG]  [BUGGY]  Node  helpingCodeCost  =reducing.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =reducing.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =reducing.getNodeForCodeInsertion(root);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
952	[BUG]  [BUGGY]  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
953	[BUG]  [BUGGY]  reducers.addAll(reductions,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addAll(reductions,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addAll(reductions,  contributingRoot);	  reducers.addAll(reductions);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
954	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  	29	None	replace
955	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	29	None	replace
956	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
957	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  aiderCode.addChildrenToFront(reduction,  contributingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
958	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
959	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.applyToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.applyToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducing.applyToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.applyToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
960	[BUG]  [BUGGY]  newChild.addChildrenToFront(parent);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(parent);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(parent);	  newChild.addChildrenToFront(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
961	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savings.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
962	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
963	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  assistCode.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  assistCode.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  assistCode.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    aiderCode.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
964	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
965	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(less);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(less);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(less);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
966	[BUG]  [BUGGY]  Node  helperCodeCost  =reducings.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =reducings.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =reducings.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
967	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
968	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
969	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange()  [CE]  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange()  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange()	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  	174	None	replace
970	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
971	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
972	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Collection  <  Reduction>  reductions  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Collection  <  Reduction>  reductions  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	141	None	replace
973	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
974	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
975	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =reducing.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =reducing.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =reducing.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
976	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  helping);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  contributingRoot,  helping);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  contributingRoot,  helping);	  newChild.addChildToBack(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
977	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	177	None	replace
978	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  helpingRoot);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  helpingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  helpingRoot);	  newChild.addChildToBack(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
979	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.addChildrenToFront(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildrenToFront(reduction,    addingRoot);    }    	non-compiled	[CE]  ')'  expected	130	None	replace
980	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducing.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducing.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducing.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
981	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduction.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reduction.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reduction.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reduced.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
982	[BUG]  [BUGGY]  aiderCode.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
983	[BUG]  [BUGGY]  reducer  =  reductions.iterator().next();  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer  =  reductions.iterator().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer  =  reductions.iterator().next();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
984	[BUG]  [BUGGY]  reducer  =  reductions.iterator().next().getNext();  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer  =  reductions.iterator().next().getNext();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer  =  reductions.iterator().next().getNext();	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    else    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
985	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
986	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.FUNCTION)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
987	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.removeChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChild(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
988	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyChild(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.applyChild(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.applyChild(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChild(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
989	[BUG]  [BUGGY]  newChild.addChildrenToFront(reducingRoot,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reducingRoot,  saving);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reducingRoot,  saving);	  newChild.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
990	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
991	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	62	None	replace
992	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	62	None	replace
993	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
994	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.apply(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.apply(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.apply(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
995	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reduction,  eliminatingRoot,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reduction,  eliminatingRoot,  contributingRoot);	  newChild.addChildToBack(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
996	[BUG]  [BUGGY]  if(reductions!=  null)  {  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reductions!=  null)  {  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reductions!=  null)  {  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
997	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
998	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)  ==  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)  ==  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)  ==  null)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
999	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  reductionGatherer)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  reductionGatherer)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  reductionGatherer)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1000	[BUG]  [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  reductionGatherer)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost  [CE]  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction.getNodeForCodeInsertion(null)!=  reductionGatherer)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction.getNodeForCodeInsertion(null)!=  reductionGatherer)  {  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  	80	None	replace
1001	[BUG]  [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  pruningRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  pruningRoot.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1002	[BUG]  [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :reducings.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1003	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =reducings.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =reducings.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =reducings.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1004	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =reducing.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =reducing.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =reducing.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1005	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1006	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
1007	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.CATCH)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.CATCH)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT  ||  reduction.getType()  ==  Token.CATCH)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
1008	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  contributingRoot.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  contributingRoot.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  contributingRoot.getNodeForCodeInsertion(null,  reduction);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    contributingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1009	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
1010	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
1011	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	31	None	replace
1012	[BUG]  [BUGGY]  Node  helpingCodeCost  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingCodeCost  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingCodeCost  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1013	[BUG]  [BUGGY]  reductions.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.addChildToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.addChildToFront(reduction);	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1014	[BUG]  [BUGGY]  reductions.addChildrenToFront(addingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reductions.addChildrenToFront(addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reductions.addChildrenToFront(addingRoot);	  reductions.add(reduction);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1015	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildrenToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildrenToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducing.addChildrenToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
1016	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1017	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1018	[BUG]  [BUGGY]  newChild.addChildBefore(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildBefore(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildBefore(reduction,  addingRoot);	  newChild.addChildToBack(addedRoot);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1019	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  savingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  savingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.addChildToFront(reduction,  savingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
1020	[BUG]  [BUGGY]  reducers.add(reduction,  contributingRoot,  helping);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.add(reduction,  contributingRoot,  helping);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.add(reduction,  contributingRoot,  helping);	  reducers.add(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1021	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	95	None	replace
1022	[BUG]  [BUGGY]  newChild.addChildToBack(reducingRoot,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(reducingRoot,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(reducingRoot,  addingRoot);	  newChild.addChildToBack(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1023	[BUG]  [BUGGY]  Node  savingRoot  =  addingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  addingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  addingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1024	[BUG]  [BUGGY]  Node  savingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1025	[BUG]  [BUGGY]  SavingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  SavingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	SavingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(savings);	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1026	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyTo(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.applyTo(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.applyTo(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.removeChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
1027	[BUG]  [BUGGY]  newChild.addChildrenToBack(reducing);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToBack(reducing);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToBack(reducing);	  newChild.addChildrenToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1028	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1029	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.applyTo(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
1030	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.apply(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reducer.apply(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reducer.apply(reduction);  compiler.reportCodeChange();  }	  Pentru(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	170	None	replace
1031	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  helping);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  contributingRoot,  helping);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  contributingRoot,  helping);	  newChild.addChildrenToFront(reduction,    contributingRoot);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1032	[BUG]  [BUGGY]  Node  helpingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1033	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1034	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.CATCH)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.CATCH)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.CATCH)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
1035	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
1036	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
1037	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reduced.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1038	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1039	[BUG]  [BUGGY]  for(Reduction  reduced  :  reductions.values())  {  reduced.addChildrenToFront(helperCode);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduced  :  reductions.values())  {  reduced.addChildrenToFront(helperCode);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduced  :  reductions.values())  {  reduced.addChildrenToFront(helperCode);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1040	[BUG]  [BUGGY]  for(Reduction  reduced  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduced  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduced  :  addingRoot.values())  {  reduced.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1041	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()!=    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
1042	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()!=  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()!=  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN  ||  reduction.getType()!=  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()!=    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
1043	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(addedRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(addedRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(addedRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1044	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(addedRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1045	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1046	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1047	[BUG]  [BUGGY]  saving.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  saving.addChildToBack(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	saving.addChildToBack(reduction);	  for(Reduction    reduction    :    reductions.values())    {    saving.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1048	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.keySet())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  addingRoot.keySet())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  addingRoot.keySet())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    addingRoot.values())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
1049	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(mappingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(mappingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(mappingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(helperCode);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1050	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1051	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1052	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1053	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1054	[BUG]  [BUGGY]  reducer.addChildrenToFront(savedRoot);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToFront(savedRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToFront(savedRoot);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1055	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.applyTo(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCode.applyTo(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCode.applyTo(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.applyTo(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1056	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.addChildToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1057	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  helperCode.removeChild(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCode.removeChild(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  ')'  expected	171	None	replace
1058	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildrenToFront(reduction);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1059	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.removeChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1060	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  ReductionGatherer  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1061	[BUG]  [BUGGY]  ReductionGatherer  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1062	[BUG]  [BUGGY]  ReductionGatherer  helpingRootCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helpingRootCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helpingRootCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1063	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1064	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reducingRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.addChildrenToFront(reducingRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.addChildrenToFront(reducingRoot);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1065	[BUG]  [BUGGY]  aiderCode.replaceChild(reduction,  addingRoot);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode.replaceChild(reduction,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode.replaceChild(reduction,  addingRoot);  compiler.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1066	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getInitializingGatherer();  reducers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  helperCodeCost  =  reduction.getInitializingGatherer();  reducers.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  helperCodeCost  =  reduction.getInitializingGatherer();  reducers.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1067	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  reducers.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    reducers.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1068	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  reducer.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1069	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1070	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1071	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1072	[BUG]  [BUGGY]  reducer  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1073	[BUG]  [BUGGY]  reduction  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();	  reductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1074	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  helpingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  helpingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  helpingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1075	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	RecductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  RecductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1076	[BUG]  [BUGGY]  Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Integer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);	  For(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1077	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  SavingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    SavingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1078	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1079	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1080	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.VAR)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EMPTY)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1081	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction!=  null)  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  }	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1082	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1083	[BUG]  [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	if(reduction!=  null)  {  helperCodeCost.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  }	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1084	[BUG]  [BUGGY]  reducer.addChildAfter(reduction,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildAfter(reduction,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildAfter(reduction,  addingRoot);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1085	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1086	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list())  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.list())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.list())  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.keySet())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1087	[BUG]  [BUGGY]  reducer.addChildrenToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.addChildrenToBack(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.addChildrenToBack(reduction);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1088	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  helpingRoot);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  helpingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildToBack(reduction,  helpingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    savingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1089	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EXPR_RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1090	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.EXPR_RESULT)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1091	[BUG]  [BUGGY]  reducer.removeChild(reducing);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(reducing);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(reducing);	  reducer.removeChild(reduction);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1092	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducing.addChildrenToFront(reduction,  addingRoot);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    addingRoot);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1093	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducingr.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducingr.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducingr.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1094	[BUG]  [BUGGY]  for(Reduction  reduction  :  prunings.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  prunings.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  prunings.values())  {  reducer.addChildToBack(reduction,  addingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildToBack(reduction,    addingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1095	[BUG]  [BUGGY]  reducer.removeChild(reducing);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducer.removeChild(reducing);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducer.removeChild(reducing);  compiler.reportCodeChange();	  reducer.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1096	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1097	[BUG]  [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	CorrectionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);	  CorrectionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1098	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESTURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESTURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESTURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.GETPROP)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1099	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1100	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1101	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1102	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	77	None	replace
1103	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction);  addingRoot.addChildrenToFront(helperCodeCost);	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
1104	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	int  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  int    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
1105	[BUG]  [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  helpingerCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildAfter(reduction,  addingRoot,  helpingerCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildAfter(reduction,  addingRoot,  helpingerCode);	  newChild.addChildAfter(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
1106	[BUG]  [BUGGY]  ajutarCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ajutarCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ajutarCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
1107	[BUG]  [BUGGY]  ajutăerCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ajutăerCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ajutăerCodeCost.addChildrenToFront(reduction);	  if(reduction!=    null)    {    helperCodeCost.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
1108	[BUG]  [BUGGY]  reducing.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducing.addChildToBack(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducing.addChildToBack(reduction);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1109	[BUG]  [BUGGY]  reduction.addChildToBack(reducing);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reduction.addChildToBack(reducing);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reduction.addChildToBack(reducing);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1110	[BUG]  [BUGGY]  Savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Savings.addChildrenToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Savings.addChildrenToFront(reduction);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1111	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
1112	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  reducer.addChildrenToFront(reduction);  }	  Pentru(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	147	None	replace
1113	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1114	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducedr.removeChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.removeChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1115	[BUG]  [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),reducing);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),reducing);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(new  ReductionGatherer(),reducing);	  newChild.addChildToBack(new    ReductionGatherer());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1116	[BUG]  [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),  reductions);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildToBack(new  ReductionGatherer(),  reductions);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildToBack(new  ReductionGatherer(),  reductions);	  newChild.addChildToBack(new    ReductionGatherer());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1117	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  reduced.addChildrenToFront(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildrenToFront(reduction,    contributingRoot);    }    	non-compiled	[CE]  ')'  expected	93	None	replace
1118	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	29	None	replace
1119	[BUG]  [BUGGY]  newChild.addChildrenToFront(reducingRoot,  eliminatingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reducingRoot,  eliminatingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reducingRoot,  eliminatingRoot);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1120	[BUG]  [BUGGY]  newChild.addChildrenToFront(adjingRoot,  reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(adjingRoot,  reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(adjingRoot,  reduction);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1121	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  contributingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  eliminatingRoot,  contributingRoot);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1122	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  helperCode);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reduction,  eliminatingRoot,  helperCode);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reduction,  eliminatingRoot,  helperCode);	  newChild.addChildrenToFront(reduction,    eliminatingRoot);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1123	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESTURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESTURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESTURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1124	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	145	None	replace
1125	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FOR  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FOR  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FOR  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN    ||    reduction.getType()    ==    Token.COST)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1126	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Saving);  savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1127	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null,  savingRoot);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1128	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1129	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1130	[BUG]  [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  1);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  1);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reductions.getNodeForCodeInsertion(null  +  1);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reductions.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1131	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  addingRoot.addChildrenToFront(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
1132	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToBack(reduction,  contributingRoot);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToBack(reduction,  contributingRoot);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducing.addChildToBack(reduction,  contributingRoot);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    contributingRoot);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1133	[BUG]  [BUGGY]  Node  helpingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1134	[BUG]  [BUGGY]  Node  helpingRoot  =  addingRoot.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  addingRoot.getNodeForCodeInsertion(null);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  addingRoot.getNodeForCodeInsertion(null);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1135	[BUG]  [BUGGY]  Node  helpingRoot  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helpingRoot  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helpingRoot  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1136	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  For(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	166	None	replace
1137	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  saving);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  saving.addChildToBack(reduction,  saving);  }	  for(Reduction    reduction    :    reductions.values())    {    reduced.addChildToBack(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
1138	[BUG]  [BUGGY]  Node  savingRoot  =  addingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  addingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  addingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1139	[BUG]  [BUGGY]  Node  savingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  contributingRoot.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1140	[BUG]  [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  savingRoot  =  reduction.getNodeForCodeInsertion(null);  savingRoot.addChildrenToFront(reduction);  compiler.reportCodeChange();	  Node    savingRoot    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1141	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  NodeHelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    NodeHelperCode    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1142	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1143	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  contributingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1144	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helpingRoot  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingRoot    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1145	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Saver  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1146	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  HelperCode  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1147	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  Savings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    Savings.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1148	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  assisterCode.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  assisterCode.addChildToBack(reduction);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  assisterCode.addChildToBack(reduction);  }	  for(Reduction    reduction    :    reductions.values())    {    réduir.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
1149	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  helping);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  helping);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  helping);  }	  for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction,    saving);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1150	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getReductionGatherer();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1151	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImmediateParentNode();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImmediateParentNode();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getImmediateParentNode();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1152	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1153	[BUG]  [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  1);  savingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    savingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1154	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reduction;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reduction;  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reduction;	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1155	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.size()  >  0?  reductions.iterator().next()  :  reduction;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.size()  >  0?  reductions.iterator().next()  :  reduction;  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.size()  >  0?  reductions.iterator().next()  :  reduction;	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1156	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reductions.iterator();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reductions.iterator();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reductions.iterator();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1157	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reductions.iterator().next();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reductions.iterator().next();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.size()  >  1?  reductions.iterator().next()  :  reductions.iterator().next();	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1158	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Reducer  reducer  =  reductions.size()  -  1;  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Reducer  reducer  =  reductions.size()  -  1;	  Reducer    reducer    =    reductions.iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1159	[BUG]  [BUGGY]  Node  helperCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  Node  helperCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	Node  helperCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);	  Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
1160	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	HelperCode  helperCode  =  reductions.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1161	[BUG]  [BUGGY]  aiderCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  aiderCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	aiderCode  =  reduction.getHelperCode();  if(helperCode!=  null)  {  return;  }	  for(Reduction    reduction    :    reductions.values())    {    HelperCode    helperCode    =    reduction.getHelperCode();    if(helperCode!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1162	[BUG]  [BUGGY]  reducers.clear();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.clear();  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.clear();	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1163	[BUG]  [BUGGY]  reducers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  reducers.addChildToFront(reduction);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	reducers.addChildToFront(reduction);	  reducers.remove(reduction);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1164	[BUG]  [BUGGY]  for(Reduction  savingRoot  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  savingRoot  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  savingRoot  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savingRoot);  savingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savingRoot);    savingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange    	non-compiled	[CE]  not  a  statement	175	None	replace
1165	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	For(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingRoot);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helpingRoot);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  ')'  expected	161	None	replace
1166	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  reduction.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1167	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  ReductionGatherer  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    ReductionGatherer    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1168	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1169	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  contributingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	139	None	replace
1170	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1171	[BUG]  [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  helpingCodeCost  :  reductions.values())  {  Node  helpingCodeCost  =  pruning.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helpingCodeCost    =    reduction.getNodeForCodeInsertion(null);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1172	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
1173	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helping);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helping);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helping);  addingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1174	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Saving);  addingRoot.addChildrenToFront(helperCodeCost);  }  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	for(Reduction  reduction  :  reductions.values())  {  Node  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Saving);  addingRoot.addChildrenToFront(helperCodeCost);  }	  for(Reduction    reduction    :    reductions.values())    {    Node    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    savings);    addingRoot.addChildrenToFront(helperCodeCost);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1175	[BUG]  [BUGGY]  newChild.addChildrenToFront(reducingRoot,  addingRoot);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }      [BUGGY]  newChild.addChildrenToFront(reducingRoot,  addingRoot);  [BUGGY]      }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	newChild.addChildrenToFront(reducingRoot,  addingRoot);	  newChild.addChildrenToFront(reduction,    addingRoot);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
