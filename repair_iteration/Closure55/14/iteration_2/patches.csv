bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  reducingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	115	None	replace
2	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	115	None	replace
3	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  pruningRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	115	None	replace
4	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
5	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(helperCodeCost);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
6	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(reduction);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(reduction);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
7	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  NodeHelper  compiler  =  reductions.get(helperCodeCost);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
8	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(index);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(index);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(index);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
9	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(savings);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(savings);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
10	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    increasingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	125	None	replace
11	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getLastChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getLastChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getLastChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
12	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
13	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()  ==  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()  ==  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()  ==  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
14	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
15	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getLastChild()  ==  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getLastChild()  ==  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getLastChild()  ==  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
16	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction,  addingRoot);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction,  addingRoot);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction,  addingRoot);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	40	9	add
18	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	40	9	add
19	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]      RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	40	None	add
20	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(parent,  addingRoot);  [CE]  cannot  find  symbol  parent  [FE]        RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(parent,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(parent,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  parent	40	None	add
21	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(removingRoot,  addingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]          RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(removingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(removingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  removingRoot	40	None	add
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(root,  addingRoot);	  	compilable	  [FE]  RuntimeException  	40	9	add
23	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(root,  addingRoot);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(root,  addingRoot);	  	compilable	  [FE]  RuntimeException  	40	9	add
24	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]              RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  contributingRoot);	  	non-compiled	[CE]  cannot  find  symbol  contributingRoot	40	None	add
25	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	40	None	add
26	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                  RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	40	None	add
27	[BUG]  [BUGGY]  compiler.report(JSError.make(RESULT_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  RESULT_THRESHOLD  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(RESULT_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(RESULT_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  RESULT_THRESHOLD	146	None	replace
28	[BUG]  [BUGGY]  compiler.report(JSError.make(MOVED_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  MOVED_THRESHOLD  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(MOVED_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(MOVED_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  MOVED_THRESHOLD	146	None	replace
29	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	146	None	replace
30	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(int,int)  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(int,int)	146	None	replace
31	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
32	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
33	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  ')'  expected	189	None	replace
34	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  ')'  expected	189	None	replace
35	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
36	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
37	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
38	[BUG]  [BUGGY]  compiler.report(JSError.make(fACTORY_METHOD_NAME,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  fACTORY_METHOD_NAME  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(fACTORY_METHOD_NAME,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(fACTORY_METHOD_NAME,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  fACTORY_METHOD_NAME	59	None	replace
39	[BUG]  [BUGGY]  compiler.report(JSError.make(creatingRoot,  reduction,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  creatingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(creatingRoot,  reduction,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(creatingRoot,  reduction,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	59	None	replace
40	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducings.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducings  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducings.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducings.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,reducingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducings	191	None	replace
41	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	118	None	replace
42	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  addingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	118	None	replace
43	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	118	None	replace
44	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	118	None	replace
45	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
46	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reductions.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reductions.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reductions.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
47	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,reducingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,reducingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,reducingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
48	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
49	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	176	None	replace
50	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
51	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  savingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	176	None	replace
52	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savings,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savings,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savings,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    savings,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	7	None	replace
53	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  saving,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  saving,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  saving,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    savings,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  saving	7	None	replace
54	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  reduction	195	None	replace
55	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helping));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helping));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helping));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  reduction	195	None	replace
56	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
57	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HelperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HelperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HelperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  reduction	195	None	replace
58	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getFirstChild()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
59	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLastChild(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLastChild(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLastChild(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
60	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
61	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  contributingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  contributingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  contributingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
62	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  addingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
63	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
64	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
65	[BUG]  [BUGGY]  NodeGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
66	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  savings);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
67	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  addingRoot);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
68	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(savings);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(savings);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
69	[BUG]  [BUGGY]  NodeGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
70	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
71	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
72	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
73	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
74	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
75	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
76	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  addingRoot);  [CE]  cannot  find  symbol  parent  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(parent,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(parent,  addingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  parent	30	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	NodeUtil.removeChild(root,  addingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	compilable	  [FE]  AssertionFailedError  	30	9	replace
78	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  addingRoot);  [FE]  AssertionFailedError  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(root,  addingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	compilable	  [FE]  AssertionFailedError  	30	9	replace
79	[BUG]  [BUGGY]  NodeUtil.removeChild(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(reduction,  addingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
80	[BUG]  [BUGGY]  NodeUtil.removeChild(removingRoot,  addingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(removingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(removingRoot,  addingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	30	None	replace
81	[BUG]  [BUGGY]  NodeUtil.removeChild(adjustedRoot,  addingRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(adjustedRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(adjustedRoot,  addingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	30	None	replace
82	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addingRoot,  reduction);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
83	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducings,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducings  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducings,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducings,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducings	70	None	replace
84	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  helpingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  helpingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  helpingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	37	None	replace
85	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  helpingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	37	None	replace
86	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	37	None	replace
87	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	37	None	replace
88	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  contributingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  contributingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  contributingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	147	None	replace
89	[BUG]  [BUGGY]  compiler.report(JSError.make(DEPRECATED_THRESHOLD,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  DEPRECATED_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(DEPRECATED_THRESHOLD,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(DEPRECATED_THRESHOLD,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_THRESHOLD	147	None	replace
90	[BUG]  [BUGGY]  compiler.report(JSError.make(DEFAULT_THRESHOLD,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(DEFAULT_THRESHOLD,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(DEFAULT_THRESHOLD,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	147	None	replace
91	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask()));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask()));	  compiler.report(JSError.make(root,    contributingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
92	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask()));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getMask()));	  compiler.report(JSError.make(root,    contributingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	143	None	replace
93	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot.getMask()));  [CE]  cannot  find  symbol  savingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot.getMask()));	  compiler.report(JSError.make(root,    contributingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	143	None	replace
94	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask()));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getMask()));	  compiler.report(JSError.make(root,    contributingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	143	None	replace
95	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	158	None	replace
96	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  savings);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	158	None	replace
97	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	158	None	replace
98	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	158	None	replace
99	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  savingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	158	None	replace
100	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	94	None	replace
101	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  savings));  [CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  savings));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)	94	None	replace
102	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	94	None	replace
103	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_METHOD_NAME));  [CE]  cannot  find  symbol  HELPER_METHOD_NAME  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_METHOD_NAME));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_METHOD_NAME	94	None	replace
104	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot));  [CE]  cannot  find  symbol  contributingRoot  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  contributingRoot));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	94	None	replace
105	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  saving));  [CE]  cannot  find  symbol  saving  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  saving));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  saving	94	None	replace
106	[BUG]  [BUGGY]  NodeUtil.removeChild(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(growingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(growingRoot);	          NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	152	None	replace
107	[BUG]  [BUGGY]  NodeUtil.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(reduction);	          NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	152	None	replace
108	[BUG]  [BUGGY]  NodeUtil.removeChild(creatingRoot,  reduction);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(creatingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(creatingRoot,  reduction);	          NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	152	None	replace
109	[BUG]  [BUGGY]  NodeUtil.removeChild(removingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(removingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(removingRoot);	          NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	152	None	replace
110	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  &&  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  &&  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  &&  reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
111	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()!=  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()!=  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()!=  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
112	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
113	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  ')'  expected	190	None	replace
114	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
115	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
116	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
117	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  contributingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	15	None	replace
118	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductionMap.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductionMap.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductionMap.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
119	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.THRESHOLD));  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
120	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  SAVINGS_THRESHOLD));  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  ';'  expected	15	None	replace
121	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  helperCodeCost));  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  helperCodeCost));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
122	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	173	None	replace
123	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	173	None	replace
124	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  HELPER_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	173	None	replace
125	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	173	None	replace
126	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  contributingRoot  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	173	None	replace
127	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	173	None	replace
128	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN,  reduction));  [CE]  cannot  find  symbol  UNKNOWN  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	32	None	replace
129	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXPR_RESULT,  reduction));  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXPR_RESULT,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.EXPR_RESULT,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	32	None	replace
130	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RELATIVE,  reduction));  [CE]  cannot  find  symbol  RELATIVE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RELATIVE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.RELATIVE,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  RELATIVE	32	None	replace
131	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.DEFAULT_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.DEFAULT_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.DEFAULT_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	32	None	replace
132	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RESULT,  reduction));  [CE]  cannot  find  symbol  RESULT  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RESULT,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.RESULT,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  RESULT	32	None	replace
133	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	97	None	replace
134	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot,  savings));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	97	None	replace
135	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	97	None	replace
136	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  decreasingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  decreasingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  decreasingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	97	None	replace
137	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	149	None	replace
138	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  reduction,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	149	None	replace
139	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,reducing,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reducing  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,reducing,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,reducing,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reducing	149	None	replace
140	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  decreasing,  HELPER_SOURCE));  [CE]  cannot  find  symbol  decreasing  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  decreasing,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  decreasing,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  decreasing	149	None	replace
141	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
142	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  saving,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  saving,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  saving,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD,    savings));    	non-compiled	[CE]  cannot  find  symbol  saving	11	None	replace
143	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD,  savings));  [CE]  cannot  find  symbol  contributingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD,    savings));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	11	None	replace
144	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD,  savings));  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD,    savings));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	11	None	replace
145	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HelperCodeCost.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HelperCodeCost.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HelperCodeCost.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	174	None	replace
146	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  helperCodeCost));  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	174	None	replace
147	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  helperCodeCost));  [CE]  cannot  find  symbol  reducingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	174	None	replace
148	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  helperCodeCost));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	174	None	replace
149	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  savings));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    savings));    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
150	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  savings));  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    savings));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	79	None	replace
151	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  savings));  [CE]  cannot  find  symbol  reducingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    savings));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	79	None	replace
152	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	101	None	replace
153	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,reducingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,reducingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,reducingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	101	None	replace
154	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  contributingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	21	None	replace
155	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
156	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  addingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  addingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  addingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
157	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
158	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductionMap.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductionMap.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductionMap.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
159	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
160	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  aidCodeCost));  [CE]  ';'  expected  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  aidCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  aidCodeCost));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  ';'  expected	21	None	replace
161	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reductions));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reductions));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
162	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  addingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
163	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
164	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction.getName()));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
165	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  saving));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  saving));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
166	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  savings));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  savings));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
167	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot.getName()));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot.getName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
168	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot.getName()));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot.getName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
169	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getLocalName()));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getLocalName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getLocalName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
170	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  saving));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  saving));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
171	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
172	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	130	None	replace
173	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	130	None	replace
174	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
175	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
176	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
177	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  saverCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  saverCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  saverCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
178	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addingRoot,  contributingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	41	None	replace
179	[BUG]  [BUGGY]  NodeUtil.removeChild(growingRoot,  addingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]      RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(growingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(growingRoot,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	41	None	replace
180	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(reduction,  addingRoot);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeUtil.removeChild(reduction,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
181	[BUG]  [BUGGY]  NodeUtil.removeChild(creatingRoot,  contributingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(creatingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(creatingRoot,  contributingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	39	None	replace
182	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
183	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
184	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot.getMask()));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	80	None	replace
185	[BUG]  [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getMask()));  [CE]  cannot  find  symbol  growingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(growingRoot,  reduction.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  growingRoot	80	None	replace
186	[BUG]  [BUGGY]  compiler.report(JSError.make(compiler,  root,  addingRoot.getMask()));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(compiler,  root,  addingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(compiler,  root,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
187	[BUG]  [BUGGY]  compiler.report(JSError.make(compiler,  addingRoot.getMask()));  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(compiler,  addingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(compiler,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
188	[BUG]  [BUGGY]  compiler.report(JSError.make(namingRoot,  addingRoot.getMask()));  [CE]  cannot  find  symbol  namingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(namingRoot,  addingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(namingRoot,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  namingRoot	80	None	replace
189	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
190	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	135	None	replace
191	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  saving));  [CE]  cannot  find  symbol  ENGLISH  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savings));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	73	None	replace
192	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  contributingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savings));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	73	None	replace
193	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  addingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	73	None	replace
194	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
195	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  helperCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
196	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCodeCost));  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  ';'  expected	105	None	replace
197	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
198	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  helperCode));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
199	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	159	None	replace
200	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  addingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	159	None	replace
201	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reductions.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reductions.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reductions.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	159	None	replace
202	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  contributingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	159	None	replace
203	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	5	None	replace
204	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  saving);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
205	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  contributingRoot);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
206	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  decreasingRoot  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	5	None	replace
207	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD),  saving);  [CE]  cannot  find  symbol  reducingRoot  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD),  saving);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	5	None	replace
208	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  savings));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  savings));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	76	None	replace
209	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN,  reduction.getLocale()));  [CE]  cannot  find  symbol  UNKNOWN  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	76	None	replace
210	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXPR_RESULT,  reduction.getLocale()));  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXPR_RESULT,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.EXPR_RESULT,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	76	None	replace
211	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ERROR,  reduction.getLocale()));  [CE]  cannot  find  symbol  ERROR  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ERROR,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ERROR,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ERROR	76	None	replace
212	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.NAME,  reduction.getLocale()));  [CE]  cannot  find  symbol  NAME  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.NAME,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.NAME,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  NAME	76	None	replace
213	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  ENGLISH  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	76	None	replace
214	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	34	None	replace
215	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction));  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	34	None	replace
216	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.INVALID_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  INVALID_THRESHOLD  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.INVALID_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.INVALID_THRESHOLD,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  INVALID_THRESHOLD	34	None	replace
217	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTENDS_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  EXTENDS_THRESHOLD  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTENDS_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTENDS_THRESHOLD,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXTENDS_THRESHOLD	34	None	replace
218	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTENDS,  reduction));  [CE]  cannot  find  symbol  EXTENDS  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTENDS,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTENDS,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXTENDS	34	None	replace
219	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  EXTERN_THRESHOLD  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTERN_THRESHOLD,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_THRESHOLD	34	None	replace
220	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helperCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
221	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
222	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
223	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
224	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD),  helperCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
225	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME),  helperCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
226	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
227	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
228	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot),  savings));  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  ';'  expected	78	None	replace
229	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
230	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot.getLocale(),  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot.getLocale(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot.getLocale(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	78	None	replace
231	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helping));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helping));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helping));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	77	None	replace
232	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	77	None	replace
233	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving),  contributingRoot));  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  ';'  expected	77	None	replace
234	[BUG]  [BUGGY]  compiler.report(JSError.make(saverCodeCost,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  saverCodeCost  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(saverCodeCost,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(saverCodeCost,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	148	None	replace
235	[BUG]  [BUGGY]  compiler.report(JSError.make(SAVINGS_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(SAVINGS_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(SAVINGS_THRESHOLD,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	148	None	replace
236	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(int,Collection<FunctionRewriter.Reduction>,int)  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  reductions,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(int,Collection<FunctionRewriter.Reduction>,int)	148	None	replace
237	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	66	None	replace
238	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	66	None	replace
239	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.toString()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.toString()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.toString()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	66	None	replace
240	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	66	None	replace
241	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING));  [CE]  cannot  find  symbol  HELPER_WARNING  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_WARNING	66	None	replace
242	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.length));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.length));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.length));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	66	None	replace
243	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
244	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
245	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
246	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aidCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
247	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
248	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
249	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
250	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
251	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.EXPR_RESULT)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
252	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
253	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
254	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
255	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(savings);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
256	[BUG]  [BUGGY]  addingRoot.addChildToFront(savings);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(savings);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
257	[BUG]  [BUGGY]  AddingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  AddingRoot.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	AddingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
258	[BUG]  [BUGGY]  addingRoot.addChildrenToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToBack(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToBack(reduction);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
259	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aidCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aidCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
260	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
261	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
262	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingCode);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
263	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	114	None	replace
264	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aidCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aidCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
265	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  savings);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
266	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  reductions);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  reductions);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	50	None	replace
267	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost,  reductions);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	50	None	replace
268	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  savings);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	50	None	replace
269	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  savings);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	50	None	replace
270	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
271	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
272	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
273	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	113	None	replace
274	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	113	None	replace
275	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	113	None	replace
276	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  savingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	113	None	replace
277	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
278	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingRoot));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reduction	193	None	replace
279	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
280	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	193	None	replace
281	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
282	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	171	None	replace
283	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	171	None	replace
284	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	171	None	replace
285	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helpingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helpingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	171	None	replace
286	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	3	None	replace
287	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	3	None	replace
288	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  savingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	3	None	replace
289	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  FACTORY_METHOD_NAME);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  FACTORY_METHOD_NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  FACTORY_METHOD_NAME);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
290	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  decreasingRoot  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	3	None	replace
291	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	3	None	replace
292	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	133	None	replace
293	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  helpingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	133	None	replace
294	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	133	None	replace
295	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	124	None	replace
296	[BUG]  [BUGGY]  compiler.report(JSError.make(RESULT_THRESHOLD,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  RESULT_THRESHOLD  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(RESULT_THRESHOLD,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(RESULT_THRESHOLD,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  RESULT_THRESHOLD	124	None	replace
297	[BUG]  [BUGGY]  compiler.report(JSError.make(MOVED_THRESHOLD,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  MOVED_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(MOVED_THRESHOLD,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(MOVED_THRESHOLD,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  MOVED_THRESHOLD	124	None	replace
298	[BUG]  [BUGGY]  compiler.report(JSError.make(RESULT_WARNING,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  RESULT_WARNING  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(RESULT_WARNING,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(RESULT_WARNING,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  RESULT_WARNING	124	None	replace
299	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	116	None	replace
300	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.US,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.US,  addingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.US,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	116	None	replace
301	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	116	None	replace
302	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reductions.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reductions.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reductions.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	116	None	replace
303	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  savingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  savingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
304	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot,  contributingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot,  contributingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
305	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot,  reduction);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot,  reduction);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
306	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
307	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  savingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  savingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
308	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	83	None	replace
309	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getFirstChild()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	83	None	replace
310	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	83	None	replace
311	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getFirstChild()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	83	None	replace
312	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	83	None	replace
313	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot),  SAVINGS_THRESHOLD);  [CE]  no  suitable  method  found  for  make(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    savingRoot),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node)	128	None	replace
314	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  contributingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    savingRoot),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	128	None	replace
315	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    savingRoot),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	128	None	replace
316	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  decreasingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    savingRoot),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	128	None	replace
317	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(saver);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(saver);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saver	23	None	replace
318	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildrenToFront(null);	          addingRoot.addChildrenToFront(reduction);    	compilable	  [FE]  NullPointerException  	23	9	replace
319	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(null);  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(null);	          addingRoot.addChildrenToFront(reduction);    	compilable	  [FE]  NullPointerException  	23	9	replace
320	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(saving);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	23	None	replace
321	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(creatingRoot);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	23	None	replace
322	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(reducing);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(reducing);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	23	None	replace
323	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
324	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	161	None	replace
325	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLocale(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLocale(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
326	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getName()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
327	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
328	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
329	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
330	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
331	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
332	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  contributingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  contributingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	58	None	replace
333	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  aiderCode));  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  aiderCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  aiderCode));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
334	[BUG]  [BUGGY]  addingRoot.addChildToBack(savings);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(savings);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	31	None	replace
335	[BUG]  [BUGGY]  addingRoot.addChildToBack(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(savedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(savedRoot);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	31	None	replace
336	[BUG]  [BUGGY]  addingRoot.addChildToBack(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(adjustedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(adjustedRoot);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	31	None	replace
337	[BUG]  [BUGGY]  addingRoot.addChildToBack(saving);  [CE]  cannot  find  symbol  saving  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(saving);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	31	None	replace
338	[BUG]  [BUGGY]  addingRoot.addChildToBack(saver);  [CE]  cannot  find  symbol  saver  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(saver);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(saver);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saver	31	None	replace
339	[BUG]  [BUGGY]  addingRoot.addChildToBack(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(reduction,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(reduction,  reduction);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	31	None	replace
340	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(compiler,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(compiler,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	151	None	replace
341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(externs,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	NodeUtil.removeChild(externs,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	compilable	  [FE]  RuntimeException  	151	9	replace
342	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  addingRoot);  [FE]  RuntimeException  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(externs,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(externs,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	compilable	  [FE]  RuntimeException  	151	9	replace
343	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
344	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
345	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
346	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
347	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
348	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
349	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving);  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  ')'  expected	87	None	replace
350	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
351	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  saving,  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  saving,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  saving,  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
352	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  saving);  [CE]  ')'  expected  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  ')'  expected	87	None	replace
353	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild()),  saving);  [CE]  cannot  find  symbol  ENGLISH  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild()),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild()),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	87	None	replace
354	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    decreasingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	92	None	replace
355	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  savingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    contributingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	112	None	replace
356	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	89	None	replace
357	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reducingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	89	None	replace
358	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  savings));  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  savings));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	89	None	replace
359	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  savings));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  savings));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	102	None	replace
360	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	102	None	replace
361	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  HELPER_SOURCE));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  HELPER_SOURCE));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	102	None	replace
362	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  HELPER_THRESHOLD));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	102	None	replace
363	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
364	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
365	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild()),  reduction);  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild()),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild()),  reduction);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
366	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  contributingRoot);  [CE]  ')'  expected  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  ')'  expected	88	None	replace
367	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  contributingRoot,  saving);  [CE]  cannot  find  symbol  Locale  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  contributingRoot,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  contributingRoot,  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
368	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot,  savings));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot,  savings));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    increasingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	122	None	replace
369	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  decreasingRoot,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    increasingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	122	None	replace
370	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot,  savings));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot,  savings));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
371	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  reduction);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  reduction);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
372	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
373	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  savings);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  savings);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
374	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  helperCodeCost));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
375	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  helperCodeCost));  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	16	None	replace
376	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction.getLastChild()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	86	None	replace
377	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXPR_RESULT,  reduction.getLastChild()));  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXPR_RESULT,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXPR_RESULT,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	86	None	replace
378	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction.getLastChild()));  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	86	None	replace
379	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  saving));  [CE]  cannot  find  symbol  ENGLISH  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  saving));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
380	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  savings));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  savings));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
381	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.NAME,  reduction.getLastChild()));  [CE]  cannot  find  symbol  NAME  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.NAME,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.NAME,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
382	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reduction.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	replace
383	[BUG]  [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  growingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(growingRoot,  reduction.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  growingRoot	53	None	replace
384	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	53	None	replace
385	[BUG]  [BUGGY]  compiler.report(JSError.make(compiler,  addingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(compiler,  addingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(compiler,  addingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
386	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
387	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
388	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  addingRoot);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
389	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  réduir.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  réduir.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
390	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  savingRoot);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
391	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction,  contributingRoot);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	178	None	replace
393	[BUG]  [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  COST  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  COST	178	None	replace
394	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	178	None	replace
395	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	178	None	replace
396	[BUG]  [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
397	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	178	None	replace
398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	28	9	add
399	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	28	9	add
400	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  addedRoot  [FE]      RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildrenToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildrenToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	28	None	add
401	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChild(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChild(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChild(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
402	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	28	9	add
403	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	28	9	add
404	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]            RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  contributingRoot);	  	non-compiled	[CE]  cannot  find  symbol  contributingRoot	28	None	add
405	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildrenToFront(savings);  [CE]  cannot  find  symbol  addedRoot  [FE]              RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildrenToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  addedRoot.addChildrenToFront(savings);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	28	None	add
406	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  reductions.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(addingRoot,  addingRoot);  reductions.addChildrenToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(addingRoot,  addingRoot);  reductions.addChildrenToFront(helperCode);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
407	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost);	  compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	47	None	replace
408	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(adjustedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(adjustedRoot);	  compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	47	None	replace
409	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(creatingRoot);	  compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	47	None	replace
410	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	72	None	replace
411	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	72	None	replace
412	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	72	None	replace
413	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	72	None	replace
414	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	72	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	139	None	replace
416	[BUG]  [BUGGY]  compiler.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.traverse(compiler,  root,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.traverse(compiler,  root,  reduction);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	139	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  savings);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	139	None	replace
418	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  saving);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  saving);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	139	None	replace
420	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  addingRoot,  reduction);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  addingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  addingRoot,  reduction);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
421	[BUG]  [BUGGY]  compiler.traverse(compiler,  root,  saving);  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.traverse(compiler,  root,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.traverse(compiler,  root,  saving);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	139	None	replace
422	[BUG]  [BUGGY]  newChild.addChildToBack(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(reduction,  addingRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
423	[BUG]  [BUGGY]  newChild.addChildToBack(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(creatingRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	25	None	replace
424	[BUG]  [BUGGY]  newChild.addChildToBack(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(reducingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(reducingRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	25	None	replace
425	[BUG]  [BUGGY]  newChild.addChildToBack(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(adjustedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(adjustedRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	25	None	replace
426	[BUG]  [BUGGY]  newChild.addChildToBack(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(savedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(savedRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	25	None	replace
427	[BUG]  [BUGGY]  newChild.addChildToBack(adjustingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(adjustingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(adjustingRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	25	None	replace
428	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
429	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot),  reduction);  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot),  reduction);	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
430	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reductions));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
431	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot),  savings);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot),  savings);	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
432	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  savings));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
433	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  addingRoot.getName()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  addingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  addingRoot.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
434	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction.getName()));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	98	None	replace
435	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot.getName()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
436	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getLocalName()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getLocalName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getLocalName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
437	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.getName()));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	98	None	replace
438	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	add
439	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(savings);	  	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	48	None	add
440	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  AddingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  AddingRoot.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    AddingRoot.addChildrenToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	add
441	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	add
442	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]            IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(saver);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(saver);	  	non-compiled	[CE]  cannot  find  symbol  saver	48	None	add
443	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildToBack(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildToBack(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	add
444	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(reduction.getParent());  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(reduction.getParent());	  	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	add
445	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(adjustingRoot);  [CE]  cannot  find  symbol  adjustingRoot  [FE]                  IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(adjustingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(adjustingRoot);	  	non-compiled	[CE]  cannot  find  symbol  adjustingRoot	48	None	add
446	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_RESULT,  reduction));  [CE]  cannot  find  symbol  HELPER_RESULT  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_RESULT,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_RESULT,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_RESULT	156	None	replace
447	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_COST,  reduction));  [CE]  cannot  find  symbol  HELPER_COST  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_COST,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_COST,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_COST	156	None	replace
448	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RESULT_CONSTRUCTOR,  reduction));  [CE]  cannot  find  symbol  RESULT_CONSTRUCTOR  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RESULT_CONSTRUCTOR,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.RESULT_CONSTRUCTOR,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  RESULT_CONSTRUCTOR	156	None	replace
449	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
450	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	replace
451	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    contributingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	14	None	replace
452	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.SOURCE_METHOD_NAME,  reduction));  [CE]  cannot  find  symbol  SOURCE_METHOD_NAME  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.SOURCE_METHOD_NAME,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.SOURCE_METHOD_NAME,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  SOURCE_METHOD_NAME	95	None	replace
453	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction.getMask()));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction.getMask()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	95	None	replace
454	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  addingRoot));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	95	None	replace
455	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reductions));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	95	None	replace
456	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  aiderCodeCost));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  aiderCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
457	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  aidCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  aidCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  aidCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	replace
458	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  aiderCodeCost));  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  aiderCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	82	None	replace
459	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  helpingCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  helpingCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  helpingCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	replace
460	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCodeCost.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCodeCost.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HelperCodeCost.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	82	None	replace
461	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  saving);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addingRoot,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addingRoot,  saving);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  saving	45	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	179	None	replace
463	[BUG]  [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Preconditions  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	179	None	replace
464	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	179	None	replace
465	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	179	None	replace
466	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	179	None	replace
467	[BUG]  [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)	138	None	replace
469	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)	138	None	replace
470	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)	138	None	replace
471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  contributingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	138	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helpingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	138	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	138	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	138	None	replace
475	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	172	None	replace
476	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	172	None	replace
477	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	172	None	replace
478	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  savingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	172	None	replace
479	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  increasingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	172	None	replace
480	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	84	None	replace
481	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot),  contributingRoot));  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    savingRoot));    	non-compiled	[CE]  ';'  expected	84	None	replace
482	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	84	None	replace
483	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	194	None	replace
484	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	194	None	replace
485	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
486	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HELPER_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HELPER_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  HELPER_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	194	None	replace
487	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	71	None	replace
488	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	71	None	replace
489	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	71	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  reduction	180	None	replace
491	[BUG]  [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  Preconditions  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	180	None	replace
492	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  reduction	180	None	replace
493	[BUG]  [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
494	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  reduction	180	None	replace
495	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()!=  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()!=  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()!=  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  reduction	180	None	replace
496	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
497	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
498	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helping));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helping));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helping));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
499	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving),  contributingRoot));  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  ';'  expected	85	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  Preconditions  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	42	None	replace
501	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	replace
502	[BUG]  [BUGGY]  NodeHelper.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  NodeHelper  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeHelper.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeHelper.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  NodeHelper	42	None	replace
503	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(savings!=  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(savings!=  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(savings!=  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(savings!=  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(savings!=  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(savings!=  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	42	None	replace
505	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  savings);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  savings);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  savings);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	42	None	replace
506	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
507	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
508	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
509	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
510	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helpingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  helpingRoot));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
511	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
512	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  aiderCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  aiderCodeCost));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
513	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	129	None	replace
514	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.US,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.US,  addingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.US,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	129	None	replace
515	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	129	None	replace
516	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  reductions,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  reductions,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
517	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE);  [CE]  ')'  expected  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
518	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  reductions,  HELPER_SOURCE);  [CE]  ')'  expected  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  reductions,  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  reductions,  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
519	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  savings,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  savings,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  savings,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
520	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
521	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  pruningRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  pruningRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  pruningRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
522	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
523	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  addingRoot));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	96	None	replace
524	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.getMask()));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.getMask()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	96	None	replace
525	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reductions));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	96	None	replace
526	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
527	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
528	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot),  aidCodeCost));  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot),  aidCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot),  aidCodeCost));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  ';'  expected	120	None	replace
529	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(savings);  [CE]  cannot  find  symbol  reducingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingRoot.addChildrenToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingRoot.addChildrenToFront(savings);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	153	None	replace
530	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingRoot.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingRoot.addChildrenToFront(reduction);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	153	None	replace
531	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducer.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducer.addChildrenToFront(reduction);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	153	None	replace
532	[BUG]  [BUGGY]  reducer.addChildrenToFront(root);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducer.addChildrenToFront(root);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducer.addChildrenToFront(root);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
533	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingRoot.addChildrenToFront(saver);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingRoot.addChildrenToFront(saver);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  saver	153	None	replace
534	[BUG]  [BUGGY]  reducings.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducings.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducings.addChildrenToFront(reduction);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	153	None	replace
535	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(creator);  [CE]  cannot  find  symbol  creator  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingRoot.addChildrenToFront(creator);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingRoot.addChildrenToFront(creator);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  creator	153	None	replace
536	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	93	None	replace
537	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	93	None	replace
538	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	93	None	replace
539	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	93	None	replace
540	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	93	None	replace
541	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	93	None	replace
542	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	93	None	replace
543	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  pruningRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    contributingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	22	None	replace
544	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    contributingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	22	None	replace
545	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getFirstChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
546	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  savings.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  savings.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  savings.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
547	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
548	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  contributingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  contributingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    reduction);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	68	None	replace
549	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  saving);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  saving);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    reduction);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	68	None	replace
550	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  savings);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  savings);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    reduction);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	68	None	replace
551	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  addingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction,  addingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    reduction);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	68	None	replace
552	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  saving);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  saving);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    reduction);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	68	None	replace
553	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
554	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	13	None	replace
555	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
556	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
557	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  aiderCodeCost));  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  aiderCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  ';'  expected	13	None	replace
558	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	140	None	replace
559	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	140	None	replace
560	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	140	None	replace
561	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	140	None	replace
562	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
563	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  aiderCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  aiderCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
564	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  savingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  savingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  savingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	145	None	replace
565	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,reducingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,reducingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,reducingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	145	None	replace
566	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  contributingRoot,  savings));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  contributingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  contributingRoot,  savings));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	145	None	replace
567	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(root,    contributingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	4	None	replace
568	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aidCode);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aidCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
569	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
570	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aidCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aidCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
571	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aidCode);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aidCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
572	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingCode);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
573	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
574	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RESULT_WARNING,  reduction));  [CE]  cannot  find  symbol  RESULT_WARNING  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.RESULT_WARNING,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.RESULT_WARNING,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,    reduction));    	non-compiled	[CE]  cannot  find  symbol  RESULT_WARNING	100	None	replace
575	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WARNING,  reduction));  [CE]  cannot  find  symbol  WARNING  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WARNING,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.WARNING,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,    reduction));    	non-compiled	[CE]  cannot  find  symbol  WARNING	100	None	replace
576	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction.getLocale()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.HELPER_SOURCE,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	74	None	replace
577	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.NAME,  reduction.getLocale()));  [CE]  cannot  find  symbol  NAME  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.NAME,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.NAME,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  NAME	74	None	replace
578	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  savings));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  savings));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	74	None	replace
579	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction.getLocale()));  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.SYNTHETIC,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	74	None	replace
580	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTENDS,  reduction.getLocale()));  [CE]  cannot  find  symbol  EXTENDS  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTENDS,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTENDS,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  EXTENDS	74	None	replace
581	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
582	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	165	None	replace
583	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
584	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	165	None	replace
585	[BUG]  [BUGGY]  writer.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  writer.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	writer.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	165	None	replace
586	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reducing  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducing.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducing	165	None	replace
587	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
588	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
589	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.EXPR_RESULT)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
590	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
591	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
592	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  reduction	181	None	replace
594	[BUG]  [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	181	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction.getNodeForCodeInsertion(null));  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction.getNodeForCodeInsertion(null));  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  reduction.getNodeForCodeInsertion(null));  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  reduction	181	None	replace
596	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  reduction	181	None	replace
597	[BUG]  [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
598	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  reduction	181	None	replace
599	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  saving));  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	33	None	replace
600	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  saving));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	33	None	replace
601	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  savings));  [CE]  cannot  find  symbol  ENGLISH  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	33	None	replace
602	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	33	None	replace
603	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  savings));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	33	None	replace
604	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  savingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	142	None	replace
605	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  savingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	142	None	replace
606	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	142	None	replace
607	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  savingRoot,  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  savingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  savingRoot,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	142	None	replace
608	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	142	None	replace
609	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot,  savings);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
610	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot,  helperCode);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
611	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot,  reduction);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
612	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  saver);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  saver);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot,  saver);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
613	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot,  saving);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
614	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
615	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	166	None	replace
616	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
617	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	166	None	replace
618	[BUG]  [BUGGY]  writer.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  writer.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	writer.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	166	None	replace
619	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  reducing  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducing.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducing	166	None	replace
620	[BUG]  [BUGGY]  NodeUtil.removeChild(removingRoot,  contributingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(removingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(removingRoot,  contributingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	29	None	replace
621	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Compiler.reportCodeChange();  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Compiler.reportCodeChange();	  compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
622	[BUG]  [BUGGY]  Compiler.reportCodeChange();  [CE]  non-static  method  reportCodeChange()  cannot  be  referenced  from  a  static  context  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler.reportCodeChange();	  compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();    	non-compiled	[CE]  non-static  method  reportCodeChange()  cannot  be  referenced  from  a  static  context	44	None	replace
623	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  reduction);  Compiler.reportCodeChange();  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  reduction);  Compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  reduction);  Compiler.reportCodeChange();	  compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
624	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Compiler.reportCodeChange();  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);  Compiler.reportCodeChange();	  compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
625	[BUG]  [BUGGY]  compiler.addChildToBack(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(reduction,  addingRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
626	[BUG]  [BUGGY]  compiler.addChildToBack(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(creatingRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	51	None	replace
627	[BUG]  [BUGGY]  compiler.addChildToBack(reduction,  savingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(reduction,  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(reduction,  savingRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
628	[BUG]  [BUGGY]  compiler.addChildToBack(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(reduction,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(reduction,  contributingRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
629	[BUG]  [BUGGY]  compiler.addChildToBack(reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(reduction,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(reduction,  saving);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
630	[BUG]  [BUGGY]  compiler.addChildToBack(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(savedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(savedRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	51	None	replace
631	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  ENGLISH  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	164	None	replace
632	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
633	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	164	None	replace
634	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
635	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
636	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
637	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  Locale  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
638	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
639	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
640	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
641	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  saverCode));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  saverCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  saverCode));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
642	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  saver));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  saver));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  saver));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
643	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()!=  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()!=  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()!=  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
644	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  &&  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  &&  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  &&  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
645	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
646	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
647	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	For(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  ')'  expected	188	None	replace
648	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
649	[BUG]  [BUGGY]  addingRoot.addChildToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(saving);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	27	None	replace
650	[BUG]  [BUGGY]  addingRoot.addChildToFront(saver);  [CE]  cannot  find  symbol  saver  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(saver);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(saver);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saver	27	None	replace
651	[BUG]  [BUGGY]  addingRoot.addChildToFront(saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(saverCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(saverCodeCost);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	27	None	replace
652	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildToFront(null);	          addingRoot.addChildToFront(reduction);    	compilable	  [FE]  NullPointerException  	27	9	replace
653	[BUG]  [BUGGY]  addingRoot.addChildToFront(null);  [FE]  NullPointerException  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(null);	          addingRoot.addChildToFront(reduction);    	compilable	  [FE]  NullPointerException  	27	9	replace
654	[BUG]  [BUGGY]  addingRoot.addChildToFront(adjustedRoot);  [CE]  cannot  find  symbol  adjustedRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(adjustedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(adjustedRoot);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  adjustedRoot	27	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	177	None	replace
656	[BUG]  [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  Preconditions  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	177	None	replace
657	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	177	None	replace
658	[BUG]  [BUGGY]  provisioningRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  provisioningRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  provisioningRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	provisioningRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  provisioningRoot	177	None	replace
659	[BUG]  [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  reductions.getCompiler();  Preconditions.checkState(compiler.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
660	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reduction);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	177	None	replace
661	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  contributingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	192	None	replace
662	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  savingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	192	None	replace
663	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	192	None	replace
664	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasing,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  decreasing  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasing,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasing,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  decreasing	192	None	replace
665	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	160	None	replace
666	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	160	None	replace
667	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getNode()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getNode()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getNode()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	160	None	replace
668	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  savingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
669	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
670	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  savingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
671	[BUG]  [BUGGY]  compiler.report(JSError.make(reductions,  savingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reductions,  savingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reductions,  savingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	106	None	replace
672	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  pruningRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  pruningRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  pruningRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
673	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
674	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getFirstChild()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
675	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	119	None	replace
676	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,reducingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,reducingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,reducingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
677	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
678	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
679	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction.getName()));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
680	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  addingRoot));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
681	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  HARD_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_THRESHOLD	167	None	replace
682	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction.getMask()));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction.getMask()));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
683	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	163	None	replace
684	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getName()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	163	None	replace
685	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getNode()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getNode()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getNode()));	  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	163	None	replace
686	[BUG]  [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  growingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(growingRoot,  reduction.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  growingRoot	17	None	replace
687	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reduction.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
688	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  reduction.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	17	None	replace
689	[BUG]  [BUGGY]  compiler.report(JSError.make(namingRoot,  addingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  namingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(namingRoot,  addingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(namingRoot,  addingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  namingRoot	17	None	replace
690	[BUG]  [BUGGY]  compiler.report(JSError.make(compiler,  root.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(compiler,  root.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(compiler,  root.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
691	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  NodeUtil.removeChild(creatingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  NodeUtil.removeChild(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);  NodeUtil.removeChild(creatingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
692	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
693	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(reduction);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	43	None	replace
694	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	43	None	replace
695	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(growingRoot);  [CE]  cannot  find  symbol  growingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(growingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(growingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  growingRoot	43	None	replace
696	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  saving));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    saving));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
697	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  saving));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    saving));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
698	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  helping));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  helping));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  helping));	  compiler.report(JSError.make(root,    reduction.getMask(),    saving));    	non-compiled	[CE]  cannot  find  symbol  reduction	81	None	replace
699	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
700	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
701	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
702	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
703	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
704	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
705	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
706	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
707	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getName()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	131	None	replace
708	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getName()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	131	None	replace
709	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
710	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
711	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
712	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	75	None	replace
713	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  savingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	75	None	replace
714	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	75	None	replace
715	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	75	None	replace
716	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	75	None	replace
717	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	132	None	replace
718	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
719	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
720	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
721	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
722	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
723	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  contributingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	35	None	replace
724	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot,  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	35	None	replace
725	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	35	None	replace
726	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  contributingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	35	None	replace
727	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
728	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  saverCode));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  saverCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  saverCode));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
729	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.hELPER_THRESHOLD));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.hELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.hELPER_THRESHOLD));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	103	None	replace
730	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving),  aidCodeCost);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving),  aidCodeCost);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	36	None	replace
731	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  savingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	121	None	replace
732	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savingRoot,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savingRoot,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	121	None	replace
733	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,    savingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
734	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducings,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  reducings  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducings,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducings,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,    savingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	2	None	replace
735	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  saving),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  saving),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  saving),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  saving	127	None	replace
736	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  addingRoot));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
737	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
738	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  savings));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  savings));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
739	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reductions));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reductions));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
740	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  saving));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  saving));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
741	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reduction.getName()));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
742	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
743	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
744	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  contributingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  contributingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  contributingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
745	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reductions.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reductions.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reductions.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
746	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
747	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  savings));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	168	None	replace
748	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  savings));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	168	None	replace
749	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	168	None	replace
750	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  reductions));  [CE]  cannot  find  symbol  HELPER_WARNING  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_WARNING	168	None	replace
751	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  addingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction,  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	38	None	replace
752	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  addingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction,  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	38	None	replace
753	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	38	None	replace
754	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	38	None	replace
755	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	38	None	replace
756	[BUG]  [BUGGY]  newChild.addChildrenToFront(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(creatingRoot);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creatingRoot	26	None	replace
757	[BUG]  [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(reduction,  addingRoot);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	26	None	replace
758	[BUG]  [BUGGY]  newChild.addChildrenToFront(addingRoot);  [CE]  cannot  find  symbol  newChild  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(addingRoot);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  newChild	26	None	replace
759	[BUG]  [BUGGY]  newChild.addChildrenToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(reducing);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(reducing);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	26	None	replace
760	[BUG]  [BUGGY]  newChild.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(addedRoot);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	26	None	replace
761	[BUG]  [BUGGY]  newChild.addChildrenToFront(savings);  [CE]  cannot  find  symbol  newChild  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(savings);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  newChild	26	None	replace
762	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  root,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  root,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  root,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
763	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE);  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
764	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  reduction,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
765	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  savings);  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  savings);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
766	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  savings);  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  savings);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
767	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.savings));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	99	None	replace
768	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  reduction);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  reduction);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	154	None	replace
769	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  savings);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  savings);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	154	None	replace
770	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  saving);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  saving);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	154	None	replace
771	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),reducingRoot,  contributingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),reducingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),reducingRoot,  contributingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	154	None	replace
772	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
773	[BUG]  [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  growingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(growingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(growingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  growingRoot	12	None	replace
774	[BUG]  [BUGGY]  compiler.report(JSError.make(savedRoot,  addingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savedRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(savedRoot,  addingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(savedRoot,  addingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savedRoot	12	None	replace
775	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	12	None	replace
776	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
777	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
778	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
779	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aidCodeCost);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  aidCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
780	[BUG]  [BUGGY]  newChild.addChildToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(addedRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	25	None	replace
781	[BUG]  [BUGGY]  newChild.addChildToBack(addingRoot);  [CE]  cannot  find  symbol  newChild  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(addingRoot);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  newChild	25	None	replace
782	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
783	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
784	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_RESULT,  reduction.getLastChild()));  [CE]  cannot  find  symbol  EXTERN_RESULT  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_RESULT,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTERN_RESULT,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_RESULT	86	None	replace
785	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.HELP,  reduction.getLastChild()));  [CE]  cannot  find  symbol  HELP  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.HELP,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.HELP,  reduction.getLastChild()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  HELP	86	None	replace
786	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  savingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild(),  savingRoot));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
787	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	20	None	replace
788	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  addingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
789	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  saving));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	103	None	replace
790	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	103	None	replace
791	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	33	None	replace
792	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	33	None	replace
793	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
794	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD,  helperCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
795	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	142	None	replace
796	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  FACTORY_METHOD_NAME);  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  FACTORY_METHOD_NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  FACTORY_METHOD_NAME);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	158	None	replace
797	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	181	None	replace
798	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	181	None	replace
799	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	181	None	replace
800	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  creator  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  creator	181	None	replace
801	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME));  [CE]  cannot  find  symbol  WEAK_METHOD_NAME  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  WEAK_METHOD_NAME	66	None	replace
802	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	66	None	replace
803	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNCHRONIZER));  [CE]  cannot  find  symbol  UNKNOWN_SYNCHRONIZER  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNCHRONIZER));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNCHRONIZER));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNCHRONIZER	66	None	replace
804	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_ERROR));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_ERROR));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_ERROR));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR	66	None	replace
805	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  addingRoot);  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  addingRoot);	  	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	40	None	add
806	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]      RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	40	None	add
807	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
808	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
809	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  reducingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingRoot.addChildrenToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingRoot.addChildrenToFront(helperCode);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	153	None	replace
810	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingRoot.addChildrenToFront(saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingRoot.addChildrenToFront(saving);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  saving	153	None	replace
811	[BUG]  [BUGGY]  NodeUtil.removeChild(namingRoot,  addingRoot);  [CE]  cannot  find  symbol  namingRoot  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(namingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(namingRoot,  addingRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  namingRoot	151	None	replace
812	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  pruningRoot);  [CE]  cannot  find  symbol  pruningRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addingRoot,  pruningRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addingRoot,  pruningRoot);	          NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	151	None	replace
813	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    savings,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
814	[BUG]  [BUGGY]  compiler.report(JSError.make(externs,  root,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(externs,  root,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(externs,  root,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    savings,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	7	None	replace
815	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  addingRoot));  [CE]  cannot  find  symbol  HELPER_CONSTRUCTOR  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_CONSTRUCTOR	156	None	replace
816	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_CONSTRUCTOR  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_CONSTRUCTOR	156	None	replace
817	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_METHOD_NAME,  reduction));  [CE]  cannot  find  symbol  HELPER_METHOD_NAME  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_METHOD_NAME,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_METHOD_NAME,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_METHOD_NAME	156	None	replace
818	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  incompatible  types  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  incompatible  types	139	None	replace
819	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  addingRoot);  [CE]  incompatible  types  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  incompatible  types	139	None	replace
820	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  addingRoot);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
821	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  increasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	72	None	replace
822	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	72	None	replace
823	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	135	None	replace
824	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	135	None	replace
825	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  revision.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  revision  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  revision.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  revision.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  revision	135	None	replace
826	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  decreasingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,reducingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	191	None	replace
827	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	42	None	replace
828	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	42	None	replace
829	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	42	None	replace
830	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  HELPER_SOURCE);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	42	None	replace
831	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  addingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
832	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	56	None	replace
833	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME,  reductions));  [CE]  cannot  find  symbol  WEAK_METHOD_NAME  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  WEAK_METHOD_NAME	168	None	replace
834	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reductions));  [CE]  cannot  find  symbol  HELPER_CONSTRUCTOR  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_CONSTRUCTOR	168	None	replace
835	[BUG]  [BUGGY]  compiler.addChildToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(addedRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	51	None	replace
836	[BUG]  [BUGGY]  compiler.addChildToBack(addingRoot);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(addingRoot);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
837	[BUG]  [BUGGY]  compiler.addChildToBack(reducing);  [CE]  cannot  find  symbol  reducing  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(reducing);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(reducing);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	51	None	replace
838	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot),  reduction);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot),  reduction);	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	97	None	replace
839	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot,  helperCode));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot,  helperCode));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	97	None	replace
840	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot),  aidCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot),  aidCodeCost);	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	97	None	replace
841	[BUG]  [BUGGY]  newChild.addChildrenToFront(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(reducingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(reducingRoot);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	26	None	replace
842	[BUG]  [BUGGY]  newChild.addChildrenToFront(creator);  [CE]  cannot  find  symbol  creator  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(creator);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(creator);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  creator	26	None	replace
843	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  contributingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	78	None	replace
844	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
845	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
846	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot.getLocale(),  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot.getLocale(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot.getLocale(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	78	None	replace
847	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.US,  contributingRoot.getLocale(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.US,  contributingRoot.getLocale(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.US,  contributingRoot.getLocale(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
848	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	71	None	replace
849	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	54	None	replace
850	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  savingRoot));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	121	None	replace
851	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  saving);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  saving);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	121	None	replace
852	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  increasingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    contributingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	112	None	replace
853	[BUG]  [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  contributingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  contributingRoot.values())  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	185	None	replace
854	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  decreasings  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  decreasings.values())  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol  decreasings	185	None	replace
855	[BUG]  [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  reducings  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :reducings.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :reducings.values())  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol  reducings	185	None	replace
856	[BUG]  [BUGGY]  for(Reduction  reduction  :  eliminatingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  eliminatingRoot.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  eliminatingRoot.values())  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	185	None	replace
857	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	133	None	replace
858	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale(),  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	133	None	replace
859	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale(),  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	133	None	replace
860	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
861	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  helperCode);  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  helperCode);	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
862	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  aidCode);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  aidCode);	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
863	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  pruningRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  pruningRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  pruningRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
864	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
865	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reducer.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reducer.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reducer.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	117	None	replace
866	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	175	None	replace
867	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	19	None	replace
868	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
869	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	19	None	replace
870	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  decreasing,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  decreasing  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  decreasing,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  decreasing,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  decreasing	148	None	replace
871	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,reducing,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducing  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,reducing,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,reducing,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducing	148	None	replace
872	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  saving,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  saving,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  saving,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  saving	148	None	replace
873	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getParent(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getParent(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getParent(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	134	None	replace
874	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getName(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getName(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getName(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
875	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMeanError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMeanError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMeanError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
876	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	113	None	replace
877	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  reducing  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducing.getMask(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducing	113	None	replace
878	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	113	None	replace
879	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot,  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	35	None	replace
880	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	35	None	replace
881	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  réduction));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  réduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  réduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	35	None	replace
882	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  elimination));  [CE]  cannot  find  symbol  Locale  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  elimination));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  elimination));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	35	None	replace
883	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	118	None	replace
884	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	118	None	replace
885	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,reducingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,reducingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,reducingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	99	None	replace
886	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost,  addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost,  addingRoot);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	52	None	replace
887	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  addingRoot);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	52	None	replace
888	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode,  addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode,  addingRoot);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	52	None	replace
889	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  addingRoot);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	52	None	replace
890	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(addingRoot,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(addingRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(addingRoot,  reduction);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
891	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(addedRoot);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	23	None	replace
892	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(savedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(savedRoot);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	23	None	replace
893	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot),  HELPER_SOURCE);  [CE]  cannot  find  symbol  Locale  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot),  HELPER_SOURCE);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	38	None	replace
894	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot),  aiderCode));  [CE]  ';'  expected  [FE]                                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot),  aiderCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot),  aiderCode));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  ';'  expected	38	None	replace
895	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	13	None	replace
896	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  pruningRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	13	None	replace
897	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reducing  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducing.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducing	13	None	replace
898	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	13	None	replace
899	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELP_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  HELP_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELP_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELP_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELP_THRESHOLD	96	None	replace
900	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_ERROR,  reduction));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_ERROR,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_ERROR,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_ERROR	96	None	replace
901	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_THRESHOLD	96	None	replace
902	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode,  reduction);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
903	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  reduction);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
904	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  saving));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    saving));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	81	None	replace
905	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  saving));  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    saving));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	81	None	replace
906	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD,  savings));  [CE]  no  suitable  method  found  for  make(Node,Node,int,int)  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD,    savings));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int,int)	11	None	replace
907	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
908	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
909	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
910	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  revision.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  revision  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  revision.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  revision.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  revision	17	None	replace
911	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reductions.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reductions.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reductions.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	159	None	replace
912	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  null);  NodeUtil.removeChild(addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  null);  NodeUtil.removeChild(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  null);  NodeUtil.removeChild(addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	45	None	replace
913	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root,  reduction);  NodeUtil.removeChild(addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root,  reduction);  NodeUtil.removeChild(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root,  reduction);  NodeUtil.removeChild(addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	45	None	replace
914	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	45	None	replace
915	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  NodeUtil.removeChild(addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  NodeUtil.removeChild(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  NodeUtil.removeChild(addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	45	None	replace
916	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot),  reduction);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot),  reduction);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    reduction);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	68	None	replace
917	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildToFront(helperCode);	          addingRoot.addChildToFront(reduction);    	compilable	  [FE]  IllegalArgumentException  	27	9	replace
918	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCode);  [FE]  IllegalArgumentException  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(helperCode);	          addingRoot.addChildToFront(reduction);    	compilable	  [FE]  IllegalArgumentException  	27	9	replace
919	[BUG]  [BUGGY]  addingRoot.addChildToFront(helperCodeCost);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(helperCodeCost);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	27	None	replace
920	[BUG]  [BUGGY]  addingRoot.addChildToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(problemCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(problemCodeCost);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	27	None	replace
921	[BUG]  [BUGGY]  compiler.traverse(compiler,  root,  reductions);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.traverse(compiler,  root,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.traverse(compiler,  root,  reductions);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
922	[BUG]  [BUGGY]  nodeForCodeInsertion(null,  contributingRoot);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  cannot  find  symbol  contributingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null,  contributingRoot);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null,  contributingRoot);  NodeTraversal.traverse(compiler,  root,  reductions);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	138	None	replace
923	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  reductions);  [CE]  cannot  find  symbol  nodeTraversal  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeTraversal.traverse(compiler,  root,  reductions);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	138	None	replace
924	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(root);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(root);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  compiler.getCompiler(root);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
925	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCurrentCompiler();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Compiler  compiler  =  compiler.getCurrentCompiler();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Compiler  compiler  =  compiler.getCurrentCompiler();	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
926	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(root,    contributingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	22	None	replace
927	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  contributingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  contributingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
928	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  saving);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  saving);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	155	None	replace
929	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE),  savingRoot);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE),  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE),  savingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    savingRoot);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	155	None	replace
930	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(helperCode);	  	compilable	  [FE]  IllegalArgumentException  	48	9	add
931	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(helperCode);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(helperCode);	  	compilable	  [FE]  IllegalArgumentException  	48	9	add
932	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(null);	  	compilable	  [FE]  IllegalArgumentException  	48	9	add
933	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(null);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(null);	  	compilable	  [FE]  IllegalArgumentException  	48	9	add
934	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]        IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	48	None	add
935	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot.getMask()));  [CE]  cannot  find  symbol  increasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot.getMask()));	  compiler.report(JSError.make(root,reducingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	144	None	replace
936	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
937	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  reduction);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()),  reduction);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
938	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild()),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild()),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild()),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
939	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
940	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
941	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
942	[BUG]  [BUGGY]  compiler.report(JSError.make(externs,  reduction,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(externs,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(externs,  reduction,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
943	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD);  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
944	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  0);  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  0);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  0);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
945	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  addingRoot);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
946	[BUG]  [BUGGY]  RecductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  RecductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	RecductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
947	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  contributingRoot);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  contributingRoot);	  compiler.getNodeForCodeInsertion(null);    ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
948	[BUG]  [BUGGY]  compiler.report(JSError.make(FACTORY_METHOD_NAME,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(FACTORY_METHOD_NAME,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(FACTORY_METHOD_NAME,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	146	None	replace
949	[BUG]  [BUGGY]  compiler.report(JSError.make(HelperCode,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(HelperCode,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(HelperCode,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HelperCode	146	None	replace
950	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  savingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
951	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  helpingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  helpingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
952	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  increasingRoot.getName()));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  increasingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  increasingRoot.getName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
953	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getLocale()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	76	None	replace
954	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  addingRoot.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	76	None	replace
955	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HEELPER_SOURCE,  reduction.getLocale()));  [CE]  cannot  find  symbol  HEELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HEELPER_SOURCE,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HEELPER_SOURCE,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  HEELPER_SOURCE	76	None	replace
956	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXTERN_RESULT,  reduction.getLocale()));  [CE]  cannot  find  symbol  EXTERN_RESULT  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXTERN_RESULT,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.EXTERN_RESULT,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_RESULT	76	None	replace
957	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK,  reduction.getLocale()));  [CE]  cannot  find  symbol  WEAK  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.WEAK,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  WEAK	76	None	replace
958	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction.getLocale()));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction.getLocale()));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	76	None	replace
959	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  aidCodeCost));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  aidCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  aidCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
960	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  helpingCodeCost));  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  helpingCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  helpingCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
961	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  assistanceCodeCost));  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  assistanceCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  assistanceCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
962	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
963	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
964	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,reducingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,reducingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,reducingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
965	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
966	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  réduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  réduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  réduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	169	None	replace
967	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
968	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	59	None	replace
969	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	59	None	replace
970	[BUG]  [BUGGY]  compiler.report(JSError.make(DEPRECATED_WARNING,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  DEPRECATED_WARNING  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(DEPRECATED_WARNING,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(DEPRECATED_WARNING,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_WARNING	59	None	replace
971	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  null);  Compiler.reportCodeChange();  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  null);  Compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  null);  Compiler.reportCodeChange();	  compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reduction	44	None	replace
972	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(creator,  null);  Compiler.reportCodeChange();  [CE]  cannot  find  symbol  creator  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(creator,  null);  Compiler.reportCodeChange();  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(creator,  null);  Compiler.reportCodeChange();	  compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  creator	44	None	replace
973	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	195	None	replace
974	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  SAVINGS_THRESHOLD,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,int,int)  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  SAVINGS_THRESHOLD,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  SAVINGS_THRESHOLD,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    HELPER_SOURCE,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,int,int)	150	None	replace
975	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
976	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	173	None	replace
977	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  increasingRoot));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  increasingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  increasingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
978	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  decreasing));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  decreasing));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  decreasing));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	123	None	replace
979	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.DEFAULT_THRESHOLD,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.DEFAULT_THRESHOLD,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.DEFAULT_THRESHOLD,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	166	None	replace
980	[BUG]  [BUGGY]  compiler.report(JSError.make(DEFAULT_THRESHOLD,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(DEFAULT_THRESHOLD,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(DEFAULT_THRESHOLD,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	166	None	replace
981	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	166	None	replace
982	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	166	None	replace
983	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  NON_SYNTHETIC_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  NON_SYNTHETIC_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  NON_SYNTHETIC_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
984	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  NON_SYNTHETIC_RESULT));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  NON_SYNTHETIC_RESULT));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  NON_SYNTHETIC_RESULT));	  compiler.report(JSError.make(reduction,    addingRoot,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
985	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD,  helperCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
986	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	105	None	replace
987	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  increasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	127	None	replace
988	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasing),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  decreasing  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasing),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasing),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  decreasing	127	None	replace
989	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction),  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction),  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reduction),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	127	None	replace
990	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  saving));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	36	None	replace
991	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  saving));  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	36	None	replace
992	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  saving,  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  saving,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  saving,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	36	None	replace
993	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	178	None	replace
994	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	178	None	replace
995	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  creator  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  creator	178	None	replace
996	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getMask()));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reduction.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	80	None	replace
997	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask()));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  reduction.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	80	None	replace
998	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  contributingRoot.getMask()));  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  contributingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  contributingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	80	None	replace
999	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  addingRoot.getMask()));  [CE]  cannot  find  symbol  reducingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  addingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	80	None	replace
1000	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  addingRoot,  HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	182	None	replace
1001	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aidCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aidCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME,  HELPER_SOURCE),  aidCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
1002	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getFirstChild()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	83	None	replace
1003	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getFirstChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getFirstChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	83	None	replace
1004	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    savingRoot),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	128	None	replace
1005	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	171	None	replace
1006	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  HELPER_SOURCE));  [CE]  cannot  find  symbol  savingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	171	None	replace
1007	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  helperCodeCost));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	16	None	replace
1008	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  helperCodeCost));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getMask(),  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	16	None	replace
1009	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild(),  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
1010	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  aiderCode));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  aiderCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  aiderCode));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
1011	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
1012	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	141	None	replace
1013	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	141	None	replace
1014	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
1015	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	61	None	replace
1016	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
1017	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  HELPER_SOURCE,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  addingRoot,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    savings));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	61	None	replace
1018	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1019	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helpingCode);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helpingCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helpingCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1020	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1021	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1022	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1023	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(root,    reductions.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1024	[BUG]  [BUGGY]  compiler  =  reductions.getNodeForCodeInsertion(null);  [CE]  cannot  assign  a  value  to  final  variable  compiler  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler  =  reductions.getNodeForCodeInsertion(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler  =  reductions.getNodeForCodeInsertion(null);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  compiler	46	None	replace
1025	[BUG]  [BUGGY]  compiler  =  reductions.get(helperCodeCost);  [CE]  cannot  assign  a  value  to  final  variable  compiler  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler  =  reductions.get(helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler  =  reductions.get(helperCodeCost);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  compiler	46	None	replace
1026	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  savingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	75	None	replace
1027	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.INVALID_THRESHOLD,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  INVALID_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.INVALID_THRESHOLD,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.INVALID_THRESHOLD,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  INVALID_THRESHOLD	165	None	replace
1028	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	165	None	replace
1029	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	165	None	replace
1030	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  root.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  root.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  root.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	165	None	replace
1031	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reducer.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reducer.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reducer.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	129	None	replace
1032	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  increasingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  increasingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  increasingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	129	None	replace
1033	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  HELPER_SOURCE);  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD),  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	3	None	replace
1034	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  increasingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	3	None	replace
1035	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	3	None	replace
1036	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	93	None	replace
1037	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	93	None	replace
1038	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildToBack(null);	          addingRoot.addChildToBack(reduction);    	compilable	  [FE]  NullPointerException  	31	9	replace
1039	[BUG]  [BUGGY]  addingRoot.addChildToBack(null);  [FE]  NullPointerException  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(null);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(null);	          addingRoot.addChildToBack(reduction);    	compilable	  [FE]  NullPointerException  	31	9	replace
1040	[BUG]  [BUGGY]  addingRoot.addChildToBack(saved);  [CE]  cannot  find  symbol  saved  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(saved);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(saved);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saved	31	None	replace
1041	[BUG]  [BUGGY]  addingRoot.addChildToBack(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(addedRoot);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	31	None	replace
1042	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
1043	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLastChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
1044	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild(),  saving));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	85	None	replace
1045	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	180	None	replace
1046	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	180	None	replace
1047	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  creator  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  creator	180	None	replace
1048	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	180	None	replace
1049	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  NodeUtil.removeChild(creatingRoot,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	39	None	replace
1050	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(creatingRoot,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	39	None	replace
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	compilable	  [FE]  AssertionFailedError  	39	9	replace
1052	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);  [FE]  AssertionFailedError  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(root,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	compilable	  [FE]  AssertionFailedError  	39	9	replace
1053	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getName()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
1054	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getName()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
1055	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName(),  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  Locale	131	None	replace
1056	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  aiderCode));  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  aiderCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  aiderCode));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
1057	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
1058	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	140	None	replace
1059	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	176	None	replace
1060	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE),  helpingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	176	None	replace
1061	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  SAVINGS_THRESHOLD,  helperCodeCost));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  SAVINGS_THRESHOLD,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  SAVINGS_THRESHOLD,  helperCodeCost));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1062	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1063	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	55	None	replace
1064	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  HELPER_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  HELPER_THRESHOLD);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
1065	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  helperCode);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  helperCode);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
1066	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  aidCodeCost);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  aidCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  aidCodeCost);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
1067	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  aiderCode);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  aiderCode);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
1068	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	163	None	replace
1069	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getName()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  contributingRoot.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	163	None	replace
1070	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME,  reduction));  [CE]  cannot  find  symbol  WEAK_METHOD_NAME  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.WEAK_METHOD_NAME,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  WEAK_METHOD_NAME	95	None	replace
1071	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELP_METHOD_NAME,  reduction));  [CE]  cannot  find  symbol  HELP_METHOD_NAME  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELP_METHOD_NAME,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELP_METHOD_NAME,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELP_METHOD_NAME	95	None	replace
1072	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	177	None	replace
1073	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	177	None	replace
1074	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  creator  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  creator	177	None	replace
1075	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reductionRoot.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reductionRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reductionRoot.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reductionRoot.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reductionRoot	177	None	replace
1076	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1077	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.GETPROP)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.GETPROP)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.GETPROP)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1078	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1079	[BUG]  [BUGGY]  for(Reduction  reduction  :reducings.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :reducings.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :reducings.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1080	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  increasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,reducingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	136	None	replace
1081	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1082	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1083	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot),  helperCodeCost);  [CE]  cannot  find  symbol  Locale  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot),  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot),  helperCodeCost);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    helpingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	37	None	replace
1084	[BUG]  [BUGGY]  compiler.report(JSError.make(FACTORY_METHOD_NAME,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(FACTORY_METHOD_NAME,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(FACTORY_METHOD_NAME,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	124	None	replace
1085	[BUG]  [BUGGY]  compiler.report(JSError.make(HelperCode,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(HelperCode,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(HelperCode,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HelperCode	124	None	replace
1086	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
1087	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
1088	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  addingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	145	None	replace
1089	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  contributingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	145	None	replace
1090	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  decreasingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  decreasingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  decreasingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	145	None	replace
1091	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  eliminatingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  eliminatingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  eliminatingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	145	None	replace
1092	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  savings));  [CE]  no  suitable  method  found  for  make(int,Node,int)  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  addingRoot,  savings));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(int,Node,int)	145	None	replace
1093	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	77	None	replace
1094	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	77	None	replace
1095	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  saving));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	77	None	replace
1096	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	94	None	replace
1097	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild(),  contributingRoot));  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLastChild(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	120	None	replace
1098	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getFirstChild(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getFirstChild(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getFirstChild(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
1099	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLastChild(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
1100	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCode);	  compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	47	None	replace
1101	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(addedRoot);	  compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	47	None	replace
1102	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(newChild);  [CE]  cannot  find  symbol  newChild  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(newChild);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(newChild);	  compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  cannot  find  symbol  newChild	47	None	replace
1103	[BUG]  [BUGGY]  NodeUtil.removeChild(addedRoot,  reduction);  [CE]  cannot  find  symbol  addedRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addedRoot,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addedRoot,  reduction);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	30	None	replace
1104	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1105	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	18	None	replace
1106	[BUG]  [BUGGY]  for(Reduction  reduction  :  remainingRoots.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  remainingRoots.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  remainingRoots.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1107	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1108	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  contributingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot,  contributingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	154	None	replace
1109	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  savings);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  addingRoot,  savings);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	154	None	replace
1110	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
1111	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
1112	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot.getLocale(),  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
1113	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	132	None	replace
1114	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()!=  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1115	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1116	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.EXPR_RESULT)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.EXPR_RESULT)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.EXPR_RESULT)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1117	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()!=  Token.COST)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1118	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1119	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  savingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  savingRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCodeCost,  savingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  savingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	149	None	replace
1120	[BUG]  [BUGGY]  NodeUtil.removeChild(root);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(root);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(root);	          NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	152	None	replace
1121	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  savingRoot));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
1122	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction,  contributingRoot));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
1123	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1124	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToFront(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToFront(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChildToFront(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
1125	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToBack(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToBack(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChildToBack(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
1126	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildrenToFront(addingRoot,  addingRoot);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildrenToFront(addingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChildrenToFront(addingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
1127	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(removingRoot,  addingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]          RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(removingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(removingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  removingRoot	28	None	add
1128	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToBack(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]            RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildToBack(reduction,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChildToBack(reduction,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
1129	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildrenToFront(addingRoot);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.addChildrenToFront(addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.addChildrenToFront(addingRoot);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
1130	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCodeCost,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCodeCost,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCodeCost,  savings);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
1131	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getNameNode()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getNameNode()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getNameNode()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	160	None	replace
1132	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reducer.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reducer.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reducer.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	116	None	replace
1133	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  increasingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  increasingRoot,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  increasingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	116	None	replace
1134	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoot.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1135	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1136	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RESULT)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1137	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
1138	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
1139	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
1140	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  savingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  savingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  savingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	106	None	replace
1141	[BUG]  [BUGGY]  compiler.report(JSError.make(buffer,  savingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  buffer  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(buffer,  savingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(buffer,  savingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  buffer	106	None	replace
1142	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(creatingRoot);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(creatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  NodeUtil.removeChild(creatingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	43	None	replace
1143	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(namingRoot);  [CE]  cannot  find  symbol  namingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(namingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(namingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  namingRoot	43	None	replace
1144	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(removingRoot);  [CE]  cannot  find  symbol  removingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(removingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(removingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  removingRoot	43	None	replace
1145	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  eliminatingRoot);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addingRoot,  eliminatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addingRoot,  eliminatingRoot);	          NodeUtil.removeChild(addingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	29	None	replace
1146	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.NAME,  reduction));  [CE]  cannot  find  symbol  NAME  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.NAME,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.NAME,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  NAME	34	None	replace
1147	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXTERN_RESULT,  reduction));  [CE]  cannot  find  symbol  EXTERN_RESULT  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXTERN_RESULT,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.EXTERN_RESULT,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_RESULT	34	None	replace
1148	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXTERN_SOURCE_ERROR,  reduction));  [CE]  cannot  find  symbol  EXTERN_SOURCE_ERROR  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.EXTERN_SOURCE_ERROR,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.EXTERN_SOURCE_ERROR,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_SOURCE_ERROR	34	None	replace
1149	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
1150	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HEELPER_SOURCE,  reduction));  [CE]  cannot  find  symbol  HEELPER_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HEELPER_SOURCE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HEELPER_SOURCE,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HEELPER_SOURCE	32	None	replace
1151	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNCHRONIZED,  reduction));  [CE]  cannot  find  symbol  UNKNOWN_SYNCHRONIZED  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNCHRONIZED,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNCHRONIZED,  reduction));	  compiler.report(JSError.make(ReductionGatherer.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNCHRONIZED	32	None	replace
1152	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  helperCodeCost));  [CE]  cannot  find  symbol  savingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	174	None	replace
1153	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  helperCodeCost));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	174	None	replace
1154	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  COMMA_METHOD_NAME));  [CE]  cannot  find  symbol  COMMA_METHOD_NAME  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  COMMA_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  COMMA_METHOD_NAME));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  COMMA_METHOD_NAME	89	None	replace
1155	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  NON_GLOBAL_SOURCE));  [CE]  cannot  find  symbol  NON_GLOBAL_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  NON_GLOBAL_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  NON_GLOBAL_SOURCE));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_SOURCE	89	None	replace
1156	[BUG]  [BUGGY]  compiler.report(JSError.make(externs,  reductions,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(externs,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(externs,  reductions,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
1157	[BUG]  [BUGGY]  compiler.report(JSError.make(externs,  root,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(externs,  root,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(externs,  root,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
1158	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	73	None	replace
1159	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getLocale(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	73	None	replace
1160	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  COMMA_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  COMMA_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  COMMA_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
1161	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  SAVINGS_THRESHOLD,  helperCode));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
1162	[BUG]  [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  addingRoots.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
1163	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
1164	[BUG]  [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getLastChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getLastChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  decreasings.values())  {  if(reduction.getLastChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
1165	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  savingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
1166	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  increasingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  increasingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  increasingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	157	None	replace
1167	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	84	None	replace
1168	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  savingRoot.getLastChild(),  reduction));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  savingRoot.getLastChild(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  savingRoot.getLastChild(),  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    savingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	84	None	replace
1169	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  addingRoot));  [CE]  cannot  find  symbol  HELPER_WARNING  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_WARNING	100	None	replace
1170	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_WARNING,  reduction));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_WARNING  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_WARNING,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC_WARNING,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC_WARNING	100	None	replace
1171	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  savingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  savingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
1172	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  addingRoot.getName()));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  addingRoot.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  addingRoot.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	98	None	replace
1173	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reduction.getName()));  [CE]  cannot  find  symbol  HELPER_CONSTRUCTOR  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_CONSTRUCTOR	98	None	replace
1174	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  reduction));  [CE]  cannot  find  symbol  contributingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  reduction));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	193	None	replace
1175	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	193	None	replace
1176	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  reduction));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE,  reduction));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1177	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	193	None	replace
1178	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  reducing  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducing.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducing.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reducing	193	None	replace
1179	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  addingRoot.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	74	None	replace
1180	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_RESULT,  reduction.getLocale()));  [CE]  cannot  find  symbol  EXTERN_RESULT  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_RESULT,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTERN_RESULT,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_RESULT	74	None	replace
1181	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_INIT_ERROR,  reduction.getLocale()));  [CE]  cannot  find  symbol  EXTERN_INIT_ERROR  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXTERN_INIT_ERROR,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXTERN_INIT_ERROR,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  EXTERN_INIT_ERROR	74	None	replace
1182	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  increasingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	192	None	replace
1183	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	57	None	replace
1184	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1185	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  root,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(helperCode,  root,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  root,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	147	None	replace
1186	[BUG]  [BUGGY]  compiler.report(JSError.make(FACTORY_METHOD_NAME,  contributingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(FACTORY_METHOD_NAME,  contributingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(FACTORY_METHOD_NAME,  contributingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	147	None	replace
1187	[BUG]  [BUGGY]  compiler.report(JSError.make(DEBUGGER_SOURCE,  contributingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  DEBUGGER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(DEBUGGER_SOURCE,  contributingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(DEBUGGER_SOURCE,  contributingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  DEBUGGER_SOURCE	147	None	replace
1188	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
1189	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
1190	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getName()));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getName()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  reduction.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
1191	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,reducingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,reducingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,reducingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
1192	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(helperCodeCost);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	179	None	replace
1193	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(root);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	179	None	replace
1194	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  creator  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(creator.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  creator	179	None	replace
1195	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  increasingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	5	None	replace
1196	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  savingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(root,    savingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	2	None	replace
1197	[BUG]  [BUGGY]  addingRoot.addReduction(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addReduction(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addReduction(reduction);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
1198	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  reductionCodeCost));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  reductionCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  reductionCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1199	[BUG]  [BUGGY]  NodeUtil.removeChild(reducingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(reducingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(reducingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	43	None	replace
1200	[BUG]  [BUGGY]  compiler.report(JSError.make(reductionRoot,  reductions,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reductionRoot,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reductionRoot,  reductions,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
1201	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  eliminatingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  eliminatingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  eliminatingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	6	None	replace
1202	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
1203	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  helperCode));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
1204	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    reduction,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
1205	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducingRoot.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducingRoot.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducingRoot.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1206	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  compiler.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1207	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducingr.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  reducingr.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  reducingr.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1208	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction));	  compiler.report(JSError.make(root,    reduction),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	127	None	replace
1209	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_STANDARD,  reduction));  [CE]  cannot  find  symbol  HELPER_STANDARD  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_STANDARD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_STANDARD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_STANDARD	100	None	replace
1210	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HALF_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  HALF_THRESHOLD  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HALF_THRESHOLD,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HALF_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HALF_THRESHOLD	100	None	replace
1211	[BUG]  [BUGGY]  addingRoot.addChildToBack(reducing);  [CE]  cannot  find  symbol  reducing  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToBack(reducing);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToBack(reducing);	          addingRoot.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	31	None	replace
1212	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot),  HELPER_SOURCE);  [CE]  cannot  find  symbol  Locale  [FE]                                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot),  HELPER_SOURCE);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	38	None	replace
1213	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  helpingerCode));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  helpingerCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions,  helpingerCode));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	102	None	replace
1214	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1215	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1216	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1217	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildrenToFront(reduction);    }    	non-compiled	[CE]  ')'  expected	183	None	replace
1218	[BUG]  [BUGGY]  NodeUtil.removeChild(addedRoot,  contributingRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addedRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addedRoot,  contributingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	30	None	replace
1219	[BUG]  [BUGGY]  NodeUtil.removeChild(addedRoot,  eliminatingRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addedRoot,  eliminatingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addedRoot,  eliminatingRoot);	          NodeUtil.removeChild(addedRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	30	None	replace
1220	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1221	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.FUNCTION)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1222	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.BLOCK)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1223	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	187	None	replace
1224	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  savings));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	174	None	replace
1225	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  saving));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  saving));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	174	None	replace
1226	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  contributingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	174	None	replace
1227	[BUG]  [BUGGY]  Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
1228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	178	None	replace
1229	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  addedRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.COST);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.COST);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	178	None	replace
1230	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  improvingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  improvingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  improvingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  improvingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    increasingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  improvingRoot	110	None	replace
1231	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  aiderCode));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  aiderCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  HELPER_SOURCE,  aiderCode));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	124	None	replace
1232	[BUG]  [BUGGY]  compiler.report(JSError.make(LCURLY_METHOD_NAME,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  LCURLY_METHOD_NAME  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(LCURLY_METHOD_NAME,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(LCURLY_METHOD_NAME,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  LCURLY_METHOD_NAME	124	None	replace
1233	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(helperCode,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	124	None	replace
1234	[BUG]  [BUGGY]  NodeUtil.removeChild(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addedRoot);	          NodeUtil.removeChild(creatingRoot);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	152	None	replace
1235	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getFirstChild()),  reduction);  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getFirstChild()),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot.getFirstChild()),  reduction);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  Locale	88	None	replace
1236	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot,  savings);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	113	None	replace
1237	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	113	None	replace
1238	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot,  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot,  saving);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	113	None	replace
1239	[BUG]  [BUGGY]  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1240	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(saved);  [CE]  cannot  find  symbol  saved  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(saved);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(saved);	          addingRoot.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saved	23	None	replace
1241	[BUG]  [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1242	[BUG]  [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1243	[BUG]  [BUGGY]  Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	177	None	replace
1245	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  savingRoot,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
1246	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  HELPER_SOURCE);  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  reduction,  HELPER_SOURCE);	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  ')'  expected	1	None	replace
1247	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.DEFAULT_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	166	None	replace
1248	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  reduction	192	None	replace
1249	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingerCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingerCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  helpingerCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
1250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	138	None	replace
1251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingerCode);  [CE]  cannot  find  symbol  helpingerCode  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helpingerCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helpingerCode);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	138	None	replace
1252	[BUG]  [BUGGY]  compiler.report(JSError.make(reducingr,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducingr  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reducingr,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reducingr,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingr	145	None	replace
1253	[BUG]  [BUGGY]  addingRoot.addChildToFront(reducing);  [CE]  cannot  find  symbol  reducing  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(reducing);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(reducing);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	27	None	replace
1254	[BUG]  [BUGGY]  addingRoot.addChildToFront(saved);  [CE]  cannot  find  symbol  saved  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildToFront(saved);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildToFront(saved);	          addingRoot.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saved	27	None	replace
1255	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD,  helperCode));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
1256	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
1257	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  saving);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
1258	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
1259	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reductions));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reductions));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	167	None	replace
1260	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.THRESHOLD)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.THRESHOLD)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.THRESHOLD)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1261	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.SOURCE,  reduction));  [CE]  cannot  find  symbol  SOURCE  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.SOURCE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.SOURCE,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,    reduction));    	non-compiled	[CE]  cannot  find  symbol  SOURCE	95	None	replace
1262	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helpingCode);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helpingCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helpingCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
1263	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME),  aiderCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	182	None	replace
1264	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helperCode));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helperCode));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	168	None	replace
1265	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helperCodeCost));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helperCodeCost));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	168	None	replace
1266	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helpingerCode));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helpingerCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions,  helpingerCode));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reductions));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	168	None	replace
1267	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE  +  helperCodeCost);  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE  +  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE  +  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  ')'  expected	56	None	replace
1268	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(reducingRoot,  addingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  NodeUtil.removeChild(reducingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    NodeUtil.removeChild(reducingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  reducingRoot	40	None	add
1269	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)  [FE]      RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);        NodeUtil.removeChild(addingRoot,    addingRoot);    Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  contributingRoot);	  	non-compiled	[CE]  variable  addingRoot  is  already  defined  in  method  process(Node,Node)	40	None	add
1270	[BUG]  [BUGGY]  Node  helpingCode  =  reduction.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helpingCode  =  reduction.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helpingCode  =  reduction.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	179	None	replace
1271	[BUG]  [BUGGY]  Node  helpingCode  =  reduction.getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helpingCode  =  reduction.getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helpingCode  =  reduction.getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	179	None	replace
1272	[BUG]  [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1273	[BUG]  [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helpingCode  =  reductions.get(0).getNodeForCodeInsertion(null);  Preconditions.checkState(workingRoot.getType()  ==  Token.NAME);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1274	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  reduction));  [CE]  cannot  find  symbol  contributingRoot  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  reduction));	  compiler.report(JSError.make(root,    reduction.getMask(),    aiderCodeCost));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	82	None	replace
1275	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  HELPER_SOURCE);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot),  HELPER_SOURCE);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	69	None	replace
1276	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  aiderCode);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()),  aiderCode);	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
1277	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  savingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  savingRoot,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  savingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	119	None	replace
1278	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
1279	[BUG]  [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]    RuntimeException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]          NodeUtil.removeChild(addingRoot,  addingRoot);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	                NodeUtil.removeChild(addingRoot,    addingRoot);    Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	add
1280	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  savings));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getMask(),  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    savings));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	79	None	replace
1281	[BUG]  [BUGGY]  addingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.removeChild(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.removeChild(reduction);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
1282	[BUG]  [BUGGY]  removingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  removingRoot.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	removingRoot.addChildrenToFront(reduction);	  addingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
1283	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HALF_SOURCE,  addingRoot));  [CE]  cannot  find  symbol  HALF_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HALF_SOURCE,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HALF_SOURCE,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  HALF_SOURCE	99	None	replace
1284	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.SOURCE,  addingRoot));  [CE]  cannot  find  symbol  SOURCE  [FE]                                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.SOURCE,  addingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.SOURCE,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  SOURCE	99	None	replace
1285	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helping);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helping);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helping);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
1286	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(saved);  [CE]  cannot  find  symbol  saved  [FE]    IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildrenToFront(saved);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildrenToFront(saved);	  	non-compiled	[CE]  cannot  find  symbol  saved	48	None	add
1287	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  savings.add(reduction);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  savings.add(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    savings.add(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	add
1288	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildToFront(savings);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  addingRoot.addChildrenToFront(helperCode);  addingRoot.addChildToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);    addingRoot.addChildToFront(savings);	  	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	48	None	add
1289	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingerCode));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingerCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingerCode));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	194	None	replace
1290	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingerCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingerCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helpingerCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	194	None	replace
1291	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	36	None	replace
1292	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName(),  HELPER_SOURCE));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	67	None	replace
1293	[BUG]  [BUGGY]  reducingr.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducingr.addChildrenToFront(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducingr.addChildrenToFront(reduction);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	153	None	replace
1294	[BUG]  [BUGGY]  reducer.addChildrenToFront(savings);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  reducer.addChildrenToFront(savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	reducer.addChildrenToFront(savings);	          reducer.addChildrenToFront(addedRoot);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1295	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  contributingRoot,  reductions.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  contributingRoot,  reductions.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  contributingRoot,  reductions.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	163	None	replace
1296	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingRoot,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingRoot,  savings);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helpingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	176	None	replace
1297	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot,  reductions.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot,  reductions.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  contributingRoot,  reductions.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    decreasingRoot,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	162	None	replace
1298	[BUG]  [BUGGY]  newChild.addChildToBack(reducing);  [CE]  cannot  find  symbol  reducing  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildToBack(reducing);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildToBack(reducing);	          newChild.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	25	None	replace
1299	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale(),  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    savings));    	non-compiled	[CE]  cannot  find  symbol  Locale	73	None	replace
1300	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
1301	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getString(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getString(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getString(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	85	None	replace
1302	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeTraversal.traverse(compiler,  root,  reduction);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	139	None	replace
1303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  root,  contributingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	139	None	replace
1304	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reduction));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	89	None	replace
1305	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  COMMA_SOURCE));  [CE]  cannot  find  symbol  COMMA_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  COMMA_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  COMMA_SOURCE));	  compiler.report(JSError.make(root,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  COMMA_SOURCE	89	None	replace
1306	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  addingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  addingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  addingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1307	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helpingerCode));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helpingerCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE,  helpingerCode));	  compiler.report(JSError.make(root,    reductions.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1308	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.EXPR_RESULT,  reduction));  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.EXPR_RESULT,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.EXPR_RESULT,  reduction));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	34	None	replace
1309	[BUG]  [BUGGY]  NodeUtil.removeChild(reducingRoot,  addingRoot);  [CE]  cannot  find  symbol  reducingRoot  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(reducingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(reducingRoot,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	39	None	replace
1310	[BUG]  [BUGGY]  NodeUtil.removeChild(workingRoot,  addingRoot);  [CE]  cannot  find  symbol  workingRoot  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(workingRoot,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(workingRoot,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  workingRoot	39	None	replace
1311	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	93	None	replace
1312	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	93	None	replace
1313	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	18	None	replace
1314	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  reduction));  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  reduction));	  compiler.report(JSError.make(root,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	90	None	replace
1315	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reductions,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  reductions,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  reductions,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	9	None	replace
1316	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  aiderCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  aiderCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  HELPER_SOURCE,  aiderCodeCost));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	149	None	replace
1317	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helpingerCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helpingerCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  HELPER_SOURCE,  helpingerCodeCost));	  compiler.report(JSError.make(helperCodeCost,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	149	None	replace
1318	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot),  HELPER_SOURCE);  [CE]  cannot  find  symbol  savingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot),  HELPER_SOURCE);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot),  HELPER_SOURCE);	  compiler.report(JSError.make(root,    savingRoot),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	128	None	replace
1319	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()),    saving);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
1320	[BUG]  [BUGGY]  compiler.report(JSError.make(LCURLY_METHOD_NAME,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  LCURLY_METHOD_NAME  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(LCURLY_METHOD_NAME,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(LCURLY_METHOD_NAME,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  LCURLY_METHOD_NAME	146	None	replace
1321	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD,  helperCode));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	146	None	replace
1322	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  SAVINGS_THRESHOLD,  helperCodeCost));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	146	None	replace
1323	[BUG]  [BUGGY]  compiler.report(JSError.make(DEBUGGER_SOURCE,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  DEBUGGER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(DEBUGGER_SOURCE,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(DEBUGGER_SOURCE,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  DEBUGGER_SOURCE	146	None	replace
1324	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  helpingCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  helpingCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE),  helpingCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE),    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	55	None	replace
1325	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	172	None	replace
1326	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  contributingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reduction	172	None	replace
1327	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getFirstChild()!=    null)    {    reducer.addChildToBack(reduction);    }    	non-compiled	[CE]  ')'  expected	186	None	replace
1328	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	148	None	replace
1329	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  savings,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  savings,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  savings,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCodeCost,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	148	None	replace
1330	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.UNKNOWN,  reduction.getLocale()));  [CE]  cannot  find  symbol  UNKNOWN  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.UNKNOWN,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.UNKNOWN,  reduction.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	74	None	replace
1331	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	74	None	replace
1332	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  NON_GLOBAL_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  NON_GLOBAL_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  NON_GLOBAL_SOURCE));	  compiler.report(JSError.make(reduction,    addingRoot,    helperCodeCost));    	non-compiled	[CE]  cannot  find  symbol  reduction	107	None	replace
1333	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    savings,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	7	None	replace
1334	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD),  savings);	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	165	None	replace
1335	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD,  savings));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD,  savings));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    HelperCode.INVALID_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	165	None	replace
1336	[BUG]  [BUGGY]  NodeUtil.removeChild(addingRoot,  savingRoot);  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(addingRoot,  savingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(addingRoot,  savingRoot);	  compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	45	None	replace
1337	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot,  reduction.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	160	None	replace
1338	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getChildCount()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getChildCount()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getChildCount()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	160	None	replace
1339	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  contributingRoot);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
1340	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot,  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot,  helperCodeCost);	  compiler.getNodeForCodeInsertion(reduction,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
1341	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  eliminatingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  eliminatingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  eliminatingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
1342	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  pruningRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  pruningRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  pruningRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(reduction,    savingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	106	None	replace
1343	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot,  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
1344	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLocale(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	78	None	replace
1345	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helpingerCode));  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helpingerCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helpingerCode));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE,    helperCode));    	non-compiled	[CE]  cannot  find  symbol  reduction	173	None	replace
1346	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot,  reduction.getLastChild()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  addingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    contributingRoot,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	170	None	replace
1347	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
1348	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
1349	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  saving);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
1350	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  helperCode);  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  helperCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE),  helperCode);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  Locale	164	None	replace
1351	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1352	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1353	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.BLOCK)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.BLOCK)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.BLOCK)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1354	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.THRESHOLD)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.THRESHOLD)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.THRESHOLD)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1355	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(savings,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(savings,  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(savings,  reduction);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
1356	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(savings,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(savings,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(savings,  contributingRoot);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	50	None	replace
1357	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null,  reductions);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null,  reductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null,  reductions);	  compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	50	None	replace
1358	[BUG]  [BUGGY]  nodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(reduction);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  nodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	nodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(reduction);	  compiler.getNodeForCodeInsertion(null);    NodeHelper    compiler    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
1359	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,    savingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	2	None	replace
1360	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  saving));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD,  saving));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD,    savings));    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
1361	[BUG]  [BUGGY]  newChild.addChildrenToFront(savedRoot);  [CE]  cannot  find  symbol  savedRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  newChild.addChildrenToFront(savedRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	newChild.addChildrenToFront(savedRoot);	          newChild.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  savedRoot	26	None	replace
1362	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reductions.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reductions.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reductions.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
1363	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  pruningRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  pruningRoot,  reduction.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot,  reduction.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	17	None	replace
1364	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reductions.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reductions.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reductions.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1365	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  pruningRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  pruningRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	12	None	replace
1366	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot,  reduction.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	12	None	replace
1367	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale(),    saving));    	non-compiled	[CE]  cannot  find  symbol  Locale	77	None	replace
1368	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
1369	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  helpingCode));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  helpingCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot,  helpingCode));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
1370	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLastChild(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLastChild(),  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot.getLastChild(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild(),    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	120	None	replace
1371	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN));  [CE]  cannot  find  symbol  UNKNOWN  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	66	None	replace
1372	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  helperCodeCost));  [CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  helperCodeCost));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  helperCodeCost));	  compiler.report(JSError.make(root,    reductions,    HELPER_SOURCE));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)	94	None	replace
1373	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
1374	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(reduction,    contributingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	104	None	replace
1375	[BUG]  [BUGGY]  compiler.addToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addToBack(reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addToBack(reduction);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
1376	[BUG]  [BUGGY]  compiler.addChildToBack(allReductions);  [CE]  cannot  find  symbol  allReductions  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.addChildToBack(allReductions);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(allReductions);	  compiler.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  allReductions	51	None	replace
1377	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()),  contributingRoot);  [CE]  cannot  find  symbol  ENGLISH  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()),  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()),  contributingRoot);	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
1378	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()),  helpingRoot);  [CE]  cannot  find  symbol  ENGLISH  [FE]                          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()),  helpingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()),  helpingRoot);	  compiler.report(JSError.make(Reduction.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	86	None	replace
1379	[BUG]  [BUGGY]  compiler.report(JSError.make(fixerCodeCost,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  fixerCodeCost  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(fixerCodeCost,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(fixerCodeCost,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  fixerCodeCost	59	None	replace
1380	[BUG]  [BUGGY]  compiler.report(JSError.make(buffer,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  buffer  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(buffer,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(buffer,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    FACTORY_METHOD_NAME));    	non-compiled	[CE]  cannot  find  symbol  buffer	59	None	replace
1381	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot),  reduction);  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot),  reduction);	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	140	None	replace
1382	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction),  addingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction),  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction),  addingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot));    	non-compiled	[CE]  cannot  find  symbol  Locale	140	None	replace
1383	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE  +  helperCodeCost);  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE  +  helperCodeCost);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE  +  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    helperCodeCost);    	non-compiled	[CE]  ')'  expected	20	None	replace
1384	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  eliminatingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  eliminatingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  eliminatingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
1385	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  contributingRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    contributingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	161	None	replace
1386	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	42	None	replace
1387	[BUG]  [BUGGY]  Preconditions.checkState(reductions  ==  SAVINGS_THRESHOLD);  [CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Preconditions.checkState(reductions  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Preconditions.checkState(reductions  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  incomparable  types:  Collection<FunctionRewriter.Reduction>  and  int	42	None	replace
1388	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	42	None	replace
1389	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent();  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getParent();  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helperCodeCost  =  addingRoot.getParent();  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	42	None	replace
1390	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getFirstChild();  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getFirstChild();  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helperCodeCost  =  addingRoot.getFirstChild();  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	42	None	replace
1391	[BUG]  [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  helperCodeCost  =  addingRoot.getNodeForCodeInsertion(helperCode);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings    ==    SAVINGS_THRESHOLD);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	42	None	replace
1392	[BUG]  [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Pentru(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	          for(Reduction    reduction    :    reductions.values())    {    if(reduction.getType()    ==    Token.CATCH    ||    reduction.getType()    ==    Token.RETURN)    {    return;    }    	non-compiled	[CE]  ')'  expected	188	None	replace
1393	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reductions.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  reductions.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  reductions.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
1394	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot,  reduction.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  pruningRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  pruningRoot,  reduction.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot,  reduction.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    addingRoot.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	53	None	replace
1395	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  addingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  addingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  addingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1396	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  mapping.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  mapping  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  mapping.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  mapping.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  mapping	15	None	replace
1397	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductionMap.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductionMap.getMask(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductionMap.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reductions.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1398	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.toString()));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.toString()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction.toString()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	96	None	replace
1399	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving),  reduction);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving),  reduction);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    saving));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	103	None	replace
1400	[BUG]  [BUGGY]  compiler.report(JSError.make(fixerCodeCost,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  fixerCodeCost  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(fixerCodeCost,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(fixerCodeCost,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(helperCode,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  fixerCodeCost	147	None	replace
1401	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot,  savings);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot,  savings);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	135	None	replace
1402	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot,  contributingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot,  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE),    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	135	None	replace
1403	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  contributingRoot,  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reduction	193	None	replace
1404	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  reducingRoot  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	193	None	replace
1405	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  contributingRoot),  FACTORY_METHOD_NAME);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  contributingRoot),  FACTORY_METHOD_NAME);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  contributingRoot),  FACTORY_METHOD_NAME);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE,    contributingRoot));    	non-compiled	[CE]  cannot  find  symbol  reduction	193	None	replace
1406	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  saving));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  saving));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
1407	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  helpingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  helpingRoot));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName(),  helpingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction.getName()));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
1408	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  pruningRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  pruningRoot.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  pruningRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	159	None	replace
1409	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reducer.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reducer.getLocale()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot,  reducer.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction,    addingRoot.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	159	None	replace
1410	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  saving));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot.getMask(),  saving));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot.getMask(),  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    saving));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	81	None	replace
1411	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  decreasingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    reduction,    FACTORY_METHOD_NAME),    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	158	None	replace
1412	[BUG]  [BUGGY]  writer.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  writer.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	writer.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    eliminatingRoot.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1413	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale(),  helperCode));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale(),  helperCode));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale(),  helperCode));	  compiler.report(JSError.make(Locale.ENGLISH,    addingRoot,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	130	None	replace
1414	[BUG]  [BUGGY]  Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	Node  reduction  =  reductions.get(0);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  reduction,  pruningRoot);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  reduction	181	None	replace
1416	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  addedRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.CATCH);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.CATCH);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.CATCH);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	181	None	replace
1417	[BUG]  [BUGGY]  NodeUtil.removeChild(cloneTree,  addingRoot);  [CE]  cannot  find  symbol  cloneTree  [FE]          IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeUtil.removeChild(cloneTree,  addingRoot);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeUtil.removeChild(cloneTree,  addingRoot);	          NodeUtil.removeChild(creatingRoot,    addingRoot);    	non-compiled	[CE]  cannot  find  symbol  cloneTree	24	None	replace
1418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  addingRoot);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	NodeTraversal.traverse(compiler,  reduction,  addingRoot);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  reduction	180	None	replace
1419	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  addedRoot  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(addedRoot.getType()  ==  Token.RETURN);	  compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  cannot  find  symbol  addedRoot	180	None	replace
1420	[BUG]  [BUGGY]  compiler.report(JSError.make(reducingRoot,  addingRoot.getMask()));  [CE]  cannot  find  symbol  reducingRoot  [FE]                    IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reducingRoot,  addingRoot.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reducingRoot,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	80	None	replace
1421	[BUG]  [BUGGY]  compiler.report(JSError.make(namingRoot,  reduction.getMask()));  [CE]  cannot  find  symbol  namingRoot  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(namingRoot,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(namingRoot,  reduction.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  namingRoot	80	None	replace
1422	[BUG]  [BUGGY]  compiler.report(JSError.make(compiler,  root,  reduction.getMask()));  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(compiler,  root,  reduction.getMask()));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(compiler,  root,  reduction.getMask()));	  compiler.report(JSError.make(root,    addingRoot.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	80	None	replace
1423	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCode);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD),  aiderCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
1424	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_THRESHOLD));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	105	None	replace
1425	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE),  reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                            IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  HELPER_SOURCE),  reduction);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	5	None	replace
1426	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD),  reduction);  [CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                              IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,reducingRoot,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)	5	None	replace
1427	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HALF_CONSTRUCTOR,  reduction));  [CE]  cannot  find  symbol  HALF_CONSTRUCTOR  [FE]                      IllegalStateException      [CONTEXT]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);      [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HALF_CONSTRUCTOR,  reduction));  [BUGGY]      }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HALF_CONSTRUCTOR,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HALF_CONSTRUCTOR	156	None	replace
