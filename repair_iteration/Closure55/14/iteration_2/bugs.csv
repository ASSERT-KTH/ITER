bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  ')'  expected	13	None	replace
2	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	13	None	replace
3	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
4	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	13	None	replace
5	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD),  reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD),  reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD),  reduction);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	13	None	replace
6	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD);  [CE]  ')'  expected  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  ')'  expected	13	None	replace
7	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savings,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,int,int)  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  savings,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savings,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,int,int)	9	None	replace
8	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	9	None	replace
9	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Collection<FunctionRewriter.Reduction>,int)	9	None	replace
10	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	9	None	replace
11	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  SAVINGS_THRESHOLD,  savings));  [CE]  no  suitable  method  found  for  make(Node,int,int)  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  SAVINGS_THRESHOLD,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  SAVINGS_THRESHOLD,  savings));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,int,int)	9	None	replace
12	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
13	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	16	None	replace
14	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	16	None	replace
15	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
16	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  helperCodeCost));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  helperCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	16	None	replace
17	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
18	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
19	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  savings);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
20	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helperCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
21	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
22	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	17	None	replace
23	[BUG]  [BUGGY]      addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      addingRoot.addChildrenToFront(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        addingRoot.addChildrenToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	add
24	[BUG]  [BUGGY]      NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	7	None	add
25	[BUG]  [BUGGY]      newChild.addChildToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      newChild.addChildToBack(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        newChild.addChildToBack(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	add
26	[BUG]  [BUGGY]      newChild.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      newChild.addChildrenToFront(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        newChild.addChildrenToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	add
27	[BUG]  [BUGGY]      addingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      addingRoot.addChildToFront(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        addingRoot.addChildToFront(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	add
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	        NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	7	9	add
29	[BUG]  [BUGGY]      NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	7	9	add
30	[BUG]  [BUGGY]      NodeUtil.removeChild(addedRoot,  addingRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      NodeUtil.removeChild(addedRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        NodeUtil.removeChild(addedRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	7	None	add
31	[BUG]  [BUGGY]      addingRoot.addChildToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      addingRoot.addChildToBack(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        addingRoot.addChildToBack(reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	add
32	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	6	None	replace
33	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savings));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
34	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction));  [CE]  cannot  find  symbol  ENGLISH  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	6	None	replace
35	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
36	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving));  [CE]  cannot  find  symbol  Locale  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
37	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  helpingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
38	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
39	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot,  addingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	19	None	add
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	19	9	add
41	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  addingRoot);  [FE]  RuntimeException  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot,  addingRoot);	  	compilable	  [FE]  RuntimeException  	19	9	add
42	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  Preconditions  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(savings  ==  SAVINGS_THRESHOLD);	  	non-compiled	[CE]  cannot  find  symbol  Preconditions	19	None	add
43	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(creatingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(creatingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	19	None	add
44	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Compiler.reportCodeChange();  [CE]  non-static  method  reportCodeChange()  cannot  be  referenced  from  a  static  context  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Compiler.reportCodeChange();  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Compiler.reportCodeChange();	  	non-compiled	[CE]  non-static  method  reportCodeChange()  cannot  be  referenced  from  a  static  context	19	None	add
45	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeUtil.removeChild(addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	19	None	add
46	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeHelper  compiler  =  reductions.get(helperCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeHelper  compiler  =  reductions.get(helperCodeCost);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
47	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction);	  compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
48	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  addingRoot.addChildrenToFront(helperCode);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	addingRoot.addChildrenToFront(helperCode);	  compiler.getNodeForCodeInsertion(null);    	compilable	  [FE]  IllegalArgumentException  	20	9	replace
49	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  [FE]  IllegalArgumentException  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  addingRoot.addChildrenToFront(helperCode);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	addingRoot.addChildrenToFront(helperCode);	  compiler.getNodeForCodeInsertion(null);    	compilable	  [FE]  IllegalArgumentException  	20	9	replace
50	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(savings);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(savings);	  compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	20	None	replace
51	[BUG]  [BUGGY]  compiler.addChildToBack(reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.addChildToBack(reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.addChildToBack(reduction);	  compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
52	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(reduction,  addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(reduction,  addingRoot);	  compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
53	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
54	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
55	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
56	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helperCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
57	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  savings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  savings);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  savings);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
58	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
59	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
60	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
61	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
62	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  helperCodeCost));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  helperCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
63	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  helperCode));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
64	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  helperCodeCost);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
65	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savings));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savings));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	5	None	replace
66	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	5	None	replace
67	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName()));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	5	None	replace
68	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  reduction);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	5	None	replace
69	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	5	None	replace
70	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  savingRoot  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	11	None	replace
71	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	11	None	replace
72	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
73	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savings));  [CE]  cannot  find  symbol  Locale  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savings));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
74	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	2	None	replace
75	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
76	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.ENGLISH,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	2	None	replace
77	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
78	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
79	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  savings));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  savings));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
80	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask()));  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  addingRoot.getMask()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot.getMask()));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
81	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  saving));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  saving));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  saving));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
82	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  aiderCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  aiderCodeCost));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  aiderCodeCost));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
83	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getFirstChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
84	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
85	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  saving));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
86	[BUG]  [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()));  [CE]  cannot  find  symbol  ENGLISH  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Reduction.ENGLISH,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  ENGLISH	4	None	replace
87	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  saving);  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  saving);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  saving);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
88	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  contributingRoot);  [CE]  cannot  find  symbol  Locale  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  contributingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild()),  contributingRoot);	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
89	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  addingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	12	None	replace
90	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	12	None	replace
91	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  savingRoot	12	None	replace
92	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  decreasingRoot  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	12	None	replace
93	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  aiderCodeCost);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE),  aiderCodeCost);	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
94	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reductions,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	12	None	replace
95	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction));  [CE]  cannot  find  symbol  HELPER_NAME  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_NAME,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_NAME	14	None	replace
96	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	14	None	replace
97	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
98	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName()));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reduction.getName()));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
99	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  addingRoot));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  addingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
100	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  reduction));  [CE]  cannot  find  symbol  HELPER_WARNING  [FE]                            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_WARNING,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_WARNING	14	None	replace
101	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  addingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	3	None	replace
102	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  reductions));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	3	None	replace
103	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  saving));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	3	None	replace
104	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  contributingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
105	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
106	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  savingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  savingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
107	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  helperCodeCost));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  helperCodeCost));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
108	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	16	None	replace
109	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  pruningRoot  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  pruningRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  pruningRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	16	None	replace
110	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  increasingRoot  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	12	None	replace
111	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_SOURCE));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot,  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	12	None	replace
112	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  contributingRoot  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	15	None	replace
113	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
114	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aiderCode);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
115	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getMask(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	15	None	replace
116	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
117	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
118	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
119	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getLastChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
120	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLastChild(),  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
121	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  savingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	3	None	replace
122	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  increasingRoot));  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  increasingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,  increasingRoot));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	3	None	replace
123	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reduction));  [CE]  cannot  find  symbol  UNKNOWN_THRESHOLD  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_THRESHOLD,  reduction));	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_THRESHOLD	3	None	replace
124	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
125	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  increasingRoot  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  increasingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  increasingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  increasingRoot	11	None	replace
126	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  decreasingRoot  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  decreasingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  decreasingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  decreasingRoot	11	None	replace
127	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction),  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
128	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  savingRoot),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  savingRoot),  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  savingRoot),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	13	None	replace
129	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
130	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
131	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getName()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
132	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
133	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction.getLocale(),  helpingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
134	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  eliminatingRoot  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  eliminatingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	17	None	replace
135	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  contributingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
136	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getStandardError(),  HELPER_SOURCE));  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getStandardError(),  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getStandardError(),  HELPER_SOURCE));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	17	None	replace
137	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	19	None	add
138	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,  root,  reductions);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	19	None	add
139	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    NodeTraversal.traverse(compiler,  root,  reduction);	  	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	add
140	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  addingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  addingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
141	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
142	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot));  [CE]  cannot  find  symbol  Locale  [FE]                      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  savingRoot));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
143	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask()));  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  contributingRoot.getMask()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  contributingRoot.getMask()));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	18	None	replace
144	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask()));  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask()));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	18	None	replace
145	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(int,Node,int)  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(helperCodeCost,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(int,Node,int)	1	None	replace
146	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(helperCode,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  reduction,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
147	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  SAVINGS_THRESHOLD));  [CE]  no  suitable  method  found  for  make(Node,Node,int)  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(helperCode,  addingRoot,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCode,  addingRoot,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(reduction,    addingRoot,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  no  suitable  method  found  for  make(Node,Node,int)	1	None	replace
148	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  reduction,  SAVINGS_THRESHOLD));	  compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
149	[BUG]  [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(helperCodeCost,  reduction,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(helperCodeCost,  reduction,  HELPER_SOURCE));	  compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
150	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  HELPER_SOURCE,  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  HELPER_SOURCE,  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
151	[BUG]  [BUGGY]      NodeUtil.removeChild(addingRoot);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      NodeUtil.removeChild(addingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        NodeUtil.removeChild(addingRoot);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	7	None	add
152	[BUG]  [BUGGY]      NodeUtil.removeChild(creatingRoot);  [CE]  cannot  find  symbol  creatingRoot  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      NodeUtil.removeChild(creatingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        NodeUtil.removeChild(creatingRoot);	  	non-compiled	[CE]  cannot  find  symbol  creatingRoot	7	None	add
153	[BUG]  [BUGGY]      reducer.addChildrenToFront(addedRoot);  [CE]  cannot  find  symbol  addedRoot  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      reducer.addChildrenToFront(addedRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        reducer.addChildrenToFront(addedRoot);	  	non-compiled	[CE]  cannot  find  symbol  addedRoot	7	None	add
154	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  contributingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	5	None	replace
155	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot);  [CE]  cannot  find  symbol  UNKNOWN_SOURCE  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE),  savingRoot);	  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SOURCE	5	None	replace
156	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reduction));  [CE]  cannot  find  symbol  HELPER_CONSTRUCTOR  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_CONSTRUCTOR,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_CONSTRUCTOR	14	None	replace
157	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction));  [CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.UNKNOWN_SYNTHETIC,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_SYNTHETIC	14	None	replace
158	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME),  SAVINGS_THRESHOLD);	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	13	None	replace
159	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
160	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
161	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
162	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  decreasingRoot,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
163	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  addingRoot.getLocale()));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  addingRoot.getLocale()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,reducingRoot,  addingRoot.getLocale()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLocale()));    	non-compiled	[CE]  cannot  find  symbol  Locale	2	None	replace
164	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE));  [CE]  cannot  find  symbol  Locale  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  HELPER_SOURCE));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction));    	non-compiled	[CE]  cannot  find  symbol  Locale	6	None	replace
165	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.INVALID_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
166	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HelperCode.DEFAULT_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask()));    	non-compiled	[CE]  cannot  find  symbol  reduction	18	None	replace
167	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction));  [CE]  cannot  find  symbol  HARD_SOURCE  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HARD_SOURCE,  reduction));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HARD_SOURCE	14	None	replace
168	[BUG]  [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions));  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,  reductions));	  compiler.report(JSError.make(ReductionGatherer.HELPER_SOURCE,    reduction));    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
169	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLastChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  reduction,  contributingRoot.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
170	[BUG]  [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()));  [CE]  cannot  find  symbol  Locale  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(Locale.ENGLISH,  contributingRoot,  reduction.getLastChild()));	  compiler.report(JSError.make(Locale.ENGLISH,    reduction.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  Locale	4	None	replace
171	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
172	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
173	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helperCode));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
174	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  helperCodeCost));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  helperCodeCost));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  helperCodeCost));	  compiler.report(JSError.make(root,    reduction,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
175	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  savings));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  savings));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE,  savings));	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
176	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingRoot);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getStandardError(),  HELPER_SOURCE),  helpingRoot);	  compiler.report(JSError.make(root,    reduction.getStandardError(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
177	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	add
178	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()  ==  Token.COST);	  	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	add
179	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	add
180	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.RETURN);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	add
181	[BUG]  [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.getNodeForCodeInsertion(null);  Preconditions.checkState(reduction.getType()  ==  Token.CATCH);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.getNodeForCodeInsertion(null);    Preconditions.checkState(reduction.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	add
182	[BUG]  [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aiderCode);  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(reduction,  addingRoot,  HELPER_SOURCE),  aiderCode);	  compiler.report(JSError.make(reduction,    addingRoot,    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
183	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildrenToFront(reduction);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
184	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
185	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  reducer.addChildrenToFront(reduction);  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
186	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getFirstChild()!=  null)  {  reducer.addChildToBack(reduction);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
187	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.RETURN)  {  reducer.addChildToBack(reduction);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
188	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.RETURN)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
189	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.NAME)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
190	[BUG]  [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]      for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	        for(Reduction  reduction  :  reductions.values())  {  if(reduction.getType()  ==  Token.CATCH  ||  reduction.getType()  ==  Token.NAME)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
191	[BUG]  [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  SAVINGS_THRESHOLD));  [CE]  cannot  find  symbol  reducingRoot  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,reducingRoot.getMask(),  SAVINGS_THRESHOLD));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,reducingRoot.getMask(),  SAVINGS_THRESHOLD));	  compiler.report(JSError.make(root,    reduction.getMask(),    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	16	None	replace
192	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME));  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction,  FACTORY_METHOD_NAME));	  compiler.report(JSError.make(root,    SAVINGS_THRESHOLD));    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
193	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  contributingRoot));  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  contributingRoot));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  contributingRoot));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
194	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helperCode));  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helperCode));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  helperCode));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
195	[BUG]  [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  saving));  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]      if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);    [BUGGY]  compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  saving));  [BUGGY]    }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	compiler.report(JSError.make(root,  reduction.getMask(),  HELPER_SOURCE,  saving));	  compiler.report(JSError.make(root,    reduction.getMask(),    HELPER_SOURCE));    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
