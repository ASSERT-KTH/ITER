bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	3	None	replace
2	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
3	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	3	None	replace
4	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                  IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	3	None	replace
5	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
6	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
7	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
8	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
9	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  SAVINGS_THRESHOLD);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  SAVINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
10	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
11	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCode);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCode);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCode);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	12	None	replace
12	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCode);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
13	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCode);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCode);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	12	None	replace
14	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction;  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction;  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction;	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  ')'  expected	1	None	replace
15	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  null);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  null);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    null);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	9	None	replace
16	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
17	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  savings);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	5	None	replace
18	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
19	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	5	None	replace
20	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  parent);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  parent);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  parent);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
21	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  savings);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  savings);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
22	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saver);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saver);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saver);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
23	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMINGS_THRESHOLD);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
24	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
25	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
26	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(saving);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	10	None	replace
27	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	2	None	replace
28	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	2	None	replace
29	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  aiderCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  aiderCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
30	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helping);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helping);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helping);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
31	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  helperCode  =  reduction.getHelper();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelper();	      	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	replace
32	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getHelper();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  NodeHelper  code  =  reduction.getHelper();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reduction.getHelper();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
34	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Reduction  helperCode  =  reduction.getHelper();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHelper();	      	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	replace
35	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Reduction  helperCode  =  reduction.getReduction();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getReduction();	      	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	replace
36	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction.getHelperCode();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
38	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
39	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	5	None	replace
40	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(newChild,  reduction);  [CE]  cannot  find  symbol  newChild  [FE]              IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(newChild,  reduction);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(newChild,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  cannot  find  symbol  newChild	4	None	replace
41	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  elimination);  [CE]  cannot  find  symbol  elimination  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  elimination);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  elimination);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  cannot  find  symbol  elimination	4	None	replace
42	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getReductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  ReductionGatherer  helperCode  =  reduction.getReductionGatherer();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getReductionGatherer();	      	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	replace
43	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCode();  [CE]  cannot  find  symbol  [FE]                        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCode();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reduction.getHelperCode();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
44	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSymbol();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  helperCode  =  reduction.getSymbol();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getSymbol();	      	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	replace
45	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getReductionStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  helperCode  =  reduction.getReductionStatement();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getReductionStatement();	      	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	8	None	replace
46	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(window);  [CE]  cannot  find  symbol  window  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(window);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(window);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  window	10	None	replace
47	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reducer);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reducer);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	2	None	replace
48	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  réduction);  [CE]  cannot  find  symbol  r  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  réduction);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  réduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root);    	non-compiled	[CE]  cannot  find  symbol  r	2	None	replace
49	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  this);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  this);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  this);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	9	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
52	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions.getHelperCode();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
53	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	5	None	replace
54	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
55	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
56	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCode);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCode);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
57	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  root);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  root);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
58	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	1	None	replace
59	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }    [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE);  [BUGGY]    addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
