bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getInitializingStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getInitializingStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
2	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
3	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getFunctionStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getFunctionStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getFunctionStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
4	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getImmediateParentStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getImmediateParentStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getImmediateParentStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
5	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getImmediateStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getImmediateStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getImmediateStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
6	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
7	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
8	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reducer);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
9	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
10	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reducer);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reducer);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	47	None	replace
11	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reducer);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reducer);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	47	None	replace
12	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  reducer);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  reducer);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	47	None	replace
13	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingRoot);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingRoot);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingRoot);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
14	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.NAME);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  rededuction  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.NAME);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(rededuction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  rededuction	33	None	replace
20	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NON_SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  reduction	24	None	replace
21	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NON_SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  reduction	24	None	replace
22	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NON_SYNTHETIC);  [CE]  cannot  find  symbol  NON_SYNTHETIC  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NON_SYNTHETIC);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NON_SYNTHETIC);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NON_SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  NON_SYNTHETIC	24	None	replace
23	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NON_SYNTHETIC,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NON_SYNTHETIC);    	non-compiled	[CE]  cannot  find  symbol  reduction	24	None	replace
24	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
25	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
26	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  saver);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  saver);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  saver);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
27	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  root);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	1	None	replace
28	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
29	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	1	None	replace
30	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  helperCodeCost);  [CE]  cannot  find  symbol  parent  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  parent	1	None	replace
31	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
32	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductionMap.getHelperCode();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductionMap.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductionMap.getHelperCode();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
33	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(savings);  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(savings);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
34	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeCost();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions.getHelperCodeCost();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
35	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions,  compiler.getHelperCode();  [CE]  ';'  expected  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductions,  compiler.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions,  compiler.getHelperCode();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  ';'  expected	52	None	replace
36	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	53	None	replace
37	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  helperCode);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	53	None	replace
38	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reductions);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reductions);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reductions);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	53	None	replace
39	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reductions,  root);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reductions,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reductions,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	53	None	replace
40	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  roots);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  roots);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  roots);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	53	None	replace
41	[BUG]  [BUGGY]  NodeAddingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction);  [CE]  cannot  find  symbol  NodeAddingRoot  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeAddingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeAddingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  NodeAddingRoot	4	None	replace
42	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionStatement);  [CE]  cannot  find  symbol  reductionStatement  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionStatement);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionStatement);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reductionStatement	4	None	replace
43	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduced);  [CE]  cannot  find  symbol  reduced  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduced);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduced);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduced	4	None	replace
44	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    helpingerCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
45	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingerCodeCost,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    helpingerCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	55	None	replace
46	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCode);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
47	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  HelperCodeCost);  [CE]  cannot  find  symbol  parent  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  HelperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  HelperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  parent	3	None	replace
48	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
49	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reductions.getHelperCode();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  reductions.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reductions.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
50	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperCode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	43	None	replace
51	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
52	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCode(savings);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCode(savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reduction.getHelperCode(savings);	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
53	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCodeCost();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reduction.getHelperCodeCost();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
54	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
55	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
56	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
57	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
58	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.parent,  root);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.parent,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.parent,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
59	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.oldChild);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.oldChild);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.oldChild);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
60	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction.parent);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction.parent);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
61	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
62	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD,  reduction.class);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD,  reduction.class);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD,  reduction.class);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	58	None	replace
63	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.class);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.class);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.class);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
64	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.parent);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.parent);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
65	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.class,  helperCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.class,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.class,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
66	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.getChildCount());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.getChildCount());  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.getChildCount());	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
67	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  ReductionGatherer.class);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  ReductionGatherer.class);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  ReductionGatherer.class);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	58	None	replace
68	[BUG]  [BUGGY]  NodeHelper  helperCode  =  reduction.getHelper();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  helperCode  =  reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  helperCode  =  reduction.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
69	[BUG]  [BUGGY]  NodeHelper  code  =  reductions.getHelper();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  code  =  reductions.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reductions.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
70	[BUG]  [BUGGY]  NodeHelper  body  =  reduction.getHelper();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  body  =  reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  body  =  reduction.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
71	[BUG]  [BUGGY]  NodeHelper  body  =  reductions.getHelper();  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  body  =  reductions.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  body  =  reductions.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
72	[BUG]  [BUGGY]  NodeHelper  keyCode  =  reduction.getHelper();  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  keyCode  =  reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  keyCode  =  reduction.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
73	[BUG]  [BUGGY]  NodeHelper  aidCode  =  reduction.getHelper();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  aidCode  =  reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  aidCode  =  reduction.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
74	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  rootduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  rootduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  rootduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
75	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction;  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction;  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction;	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    réduction);    	non-compiled	[CE]  ')'  expected	48	None	replace
76	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  poverty);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  poverty);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  poverty);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
77	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  parent,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  parent,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  parent,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    parent);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
78	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingStatement);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingStatement);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingStatement);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	29	None	replace
79	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helpingerCode);  [CE]  cannot  find  symbol  helpingerCode  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helpingerCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helpingerCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    helpingerCode);    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	56	None	replace
80	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getHelper();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
81	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getReductionGatherer(),  savings);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getReductionGatherer(),  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getReductionGatherer(),  savings);	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  ';'  expected	42	None	replace
82	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
83	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
84	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getConstantReductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getConstantReductionGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getConstantReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
85	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getImmediateReductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getImmediateReductionGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getImmediateReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
86	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reductions);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	19	None	replace
87	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.cloneTree());  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.cloneTree());  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.cloneTree());	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	14	None	replace
88	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	14	None	replace
89	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	16	None	replace
90	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	16	None	replace
91	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionCost);  [CE]  cannot  find  symbol  reductionCost  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reductionCost	13	None	replace
92	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  saving);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  saving	13	None	replace
93	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(rededuction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(rededuction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(window);    	non-compiled	[CE]  cannot  find  symbol  rededuction	46	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  rededuction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(rededuction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  rededuction	50	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(addingRoot.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  addingRoot  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(addingRoot.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(addingRoot.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	50	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  deduction  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(deduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  deduction	50	None	replace
99	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
100	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
101	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  SAVINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
102	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  SAVINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
103	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
104	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHELPER_SOURCE();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHELPER_SOURCE();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHELPER_SOURCE();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
105	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSymbol(),  savings);  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getSymbol(),  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getSymbol(),  savings);	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  ';'  expected	44	None	replace
106	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNameNode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getNameNode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getNameNode();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
107	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSeconds();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getSeconds();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getSeconds();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
108	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSecond();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getSecond();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getSecond();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
109	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  savings);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
110	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
111	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  reduction.parent);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  reduction.parent);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
112	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
113	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.problemCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.problemCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.problemCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
114	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NUMINGS_THRESHOLD);  [CE]  cannot  find  symbol  NUMINGS_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NUMINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NUMINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NUMINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  NUMINGS_THRESHOLD	23	None	replace
115	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(savings);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(savings);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
116	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
117	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]                                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
118	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction,  reduction.getHelperCode();  [CE]  ';'  expected  [FE]                                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reduction,  reduction.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction,  reduction.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  ';'  expected	36	None	replace
119	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  root);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	27	None	replace
120	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	27	None	replace
121	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHelperCost();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getHelperCost();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHelperCost();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	34	None	replace
122	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHelper(),  savings);  [CE]  ';'  expected  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getHelper(),  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHelper(),  savings);	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  ';'  expected	34	None	replace
123	[BUG]  [BUGGY]  Reduction  helperCodeCost  =  reduction.getHelper();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCodeCost  =  reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCodeCost  =  reduction.getHelper();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	34	None	replace
124	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHelperIn();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getHelperIn();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHelperIn();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	34	None	replace
125	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	11	None	replace
126	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  helperCode);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCode);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	11	None	replace
127	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  helperCode);  [CE]  cannot  find  symbol  parent  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  root,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  parent	11	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()!=  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  rededuction  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(rededuction.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  rededuction	51	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  reduction	51	None	replace
134	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	replace
135	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NUMBER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
136	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NUMBER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
137	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  forgiveness);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  forgiveness);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  forgiveness);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(newChild,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
138	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  prevention);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  prevention);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  prevention);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(newChild,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
139	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCodeCost,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  helperCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	39	None	replace
140	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
141	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
142	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost,  savings);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	39	None	replace
143	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
144	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCodeCost,  savings);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCodeCost,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  aiderCodeCost,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	39	None	replace
145	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	39	None	replace
146	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  elimination);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  elimination);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  elimination);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    elimination);    	non-compiled	[CE]  cannot  find  symbol  reduction	41	None	replace
147	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
148	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  null);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
149	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  null);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	15	None	replace
150	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
151	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getInitializingReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getInitializingReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getInitializingReduction();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
152	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getInitializingRoot();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getInitializingRoot();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getInitializingRoot();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
153	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHELPER_SOURCE();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getHELPER_SOURCE();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHELPER_SOURCE();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
154	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getInitializingStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getInitializingStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getInitializingStatement();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
155	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getSeconds();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getSeconds();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getSeconds();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
156	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  this);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  this);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  this);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    this);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	49	None	replace
157	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
158	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
159	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
160	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
161	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  saver);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  saver);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  saver);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
162	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperCost();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperCost();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperCost();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
163	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper(),  savings);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelper(),  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelper(),  savings);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  ';'  expected	31	None	replace
164	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getAssignedHelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getAssignedHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getAssignedHelper();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
165	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper(savings);  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelper(savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelper(savings);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
166	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperIn();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperIn();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperIn();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
167	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  tooltip);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  tooltip);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  tooltip);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
168	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  pruning);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  pruning);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  pruning);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
169	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  root,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	17	None	replace
170	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	17	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reduction  [FE]                                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  rededuction  [FE]                                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.COST);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(rededuction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  rededuction	37	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
176	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  aiderCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  aiderCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	53	None	replace
177	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  aiderCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductions,  aiderCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	53	None	replace
178	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  HELPER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  HELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
179	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  saves);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  saves);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root,  saves);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
180	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
181	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  HELPER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  HELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	10	None	replace
182	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HELPER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	10	None	replace
183	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  helperCode);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCode);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	11	None	replace
184	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(node,  root,  helperCode);  [CE]  cannot  find  symbol  node  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(node,  root,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(node,  root,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  node	11	None	replace
185	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.root);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(window);    	non-compiled	[CE]  cannot  find  symbol  reduction	46	None	replace
186	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
187	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getImplicitReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getImplicitReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getImplicitReduction();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
188	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHeaderReductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHeaderReductionGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getHeaderReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
189	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReduction();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
190	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  SAVINGS_THRESHOLD);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  SAVINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	9	None	replace
191	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  SAVINGS_THRESHOLD);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  SAVINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    SAVINGS_THRESHOLD);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	9	None	replace
192	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
193	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  aidCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  aidCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  aidCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	29	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reduction	37	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  deduction  [FE]                                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.COST);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(deduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  deduction	37	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(creator.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  creator  [FE]                                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(creator.getType()  ==  Token.COST);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(creator.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  creator	37	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  deduction  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.NAME);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(deduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  deduction	33	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(addingRoot.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  addingRoot  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(addingRoot.getType()  ==  Token.NAME);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(addingRoot.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	33	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(creator.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  creator  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(creator.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(creator.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  creator	50	None	replace
202	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction,  compiler.getHelperCode();  [CE]  ';'  expected  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reduction,  compiler.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction,  compiler.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  ';'  expected	36	None	replace
203	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductionUtil.getHelperCode();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductionUtil.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductionUtil.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
204	[BUG]  [BUGGY]  HelperCode  helperCode  =  elimination.getHelperCode();  [CE]  cannot  find  symbol  [FE]                                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  elimination.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  elimination.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
205	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reduction.reduction.getHelperCode();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  reduction.reduction.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reduction.reduction.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
206	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  elimination.getHelperCode();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  elimination.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  elimination.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
207	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NUMBER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
208	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NUMBER_SOURCE);  [CE]  cannot  find  symbol  NUMBER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NUMBER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  NUMBER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NUMBER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_SOURCE	59	None	replace
209	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost;  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost;  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost;	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction;    	non-compiled	[CE]  ')'  expected	14	None	replace
210	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.addChildrenToFront(helperCode);  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.addChildrenToFront(helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.addChildrenToFront(helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction;    	non-compiled	[CE]  ')'  expected	14	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  deduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(deduction.getType()  ==  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(deduction.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  deduction	51	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.BLOCK);  [CE]  int  cannot  be  dereferenced  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(savings.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  int  cannot  be  dereferenced	51	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(creator.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  creator  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(creator.getType()  ==  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(creator.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  creator	51	None	replace
214	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  HelperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  HelperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
215	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	1	None	replace
216	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReductionStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getInitializingReductionStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getInitializingReductionStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
217	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getInitializingReduction();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
218	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSingleReturnStatement();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getSingleReturnStatement();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getSingleReturnStatement();	  Node    helperCode    =    reduction.getReductionStatement();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	45	None	replace
219	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  aiderCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  aiderCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
220	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  HELPER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  HELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
221	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  aiderCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reduction,  aiderCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
222	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHelper(helperCodeCost);  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getHelper(helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHelper(helperCodeCost);	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	34	None	replace
223	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getHelperReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getHelperReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getHelperReduction();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	34	None	replace
224	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.gethelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.gethelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.gethelper();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	34	None	replace
225	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.HEELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.HEELPER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.HEELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
226	[BUG]  [BUGGY]  Node  contributingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  contributingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  contributingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
227	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingRoot();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getInitializingRoot();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getInitializingRoot();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
228	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getNode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getNode();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
229	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getImplicitReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getImplicitReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getImplicitReduction();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
230	[BUG]  [BUGGY]  Reduction  helperCode  =  reduction.getImmediateParentNode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reduction.getImmediateParentNode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reduction.getImmediateParentNode();	  Reduction    helperCode    =    reduction.getReduction();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	35	None	replace
231	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  root,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	replace
232	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper(helperCodeCost);  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelper(helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelper(helperCodeCost);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
233	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperNode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperNode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperNode();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
234	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperReduction();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperReduction();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperReduction();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
235	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperInfo();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperInfo();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperInfo();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
236	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  HelperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  HelperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	3	None	replace
237	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  HelperCodeCost);  [CE]  cannot  find  symbol  parent  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  HelperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  HelperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  parent	3	None	replace
238	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeStatement);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeStatement);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeStatement);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
239	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(externs,  root,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	17	None	replace
240	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  mitigation);  [CE]  cannot  find  symbol  mitigation  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  mitigation);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  mitigation);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  mitigation	13	None	replace
241	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  HelperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	38	None	replace
242	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	38	None	replace
243	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	38	None	replace
244	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
245	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(DEFAULT_THRESHOLD,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(DEFAULT_THRESHOLD,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(DEFAULT_THRESHOLD,  HelperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	38	None	replace
246	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(problemCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(problemCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(problemCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	38	None	replace
247	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  saver);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  saver);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.problemCodeCost,  saver);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
248	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction;  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction;  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction;	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    elimination);    	non-compiled	[CE]  ')'  expected	41	None	replace
249	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  réduction);  [CE]  cannot  find  symbol  r  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  réduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  réduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    elimination);    	non-compiled	[CE]  cannot  find  symbol  r	41	None	replace
250	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  mitigation);  [CE]  cannot  find  symbol  mitigation  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  mitigation);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  mitigation);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    elimination);    	non-compiled	[CE]  cannot  find  symbol  mitigation	41	None	replace
251	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reductions,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	replace
252	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.reduction.getHelper();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  code  =  reduction.reduction.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reduction.reduction.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
253	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.computeHelper(root,  reduction.getHelper());  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  code  =  reduction.computeHelper(root,  reduction.getHelper());  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reduction.computeHelper(root,  reduction.getHelper());	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
254	[BUG]  [BUGGY]  NodeHelper  code  =  reductionUtil.getHelper();  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  code  =  reductionUtil.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reductionUtil.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
255	[BUG]  [BUGGY]  NodeHelper  code  =  reduction,  compiler.getHelper();  [CE]  ';'  expected  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  code  =  reduction,  compiler.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reduction,  compiler.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  ';'  expected	32	None	replace
256	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  root,  null);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  root,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  root,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	15	None	replace
257	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  parent);  [CE]  cannot  find  symbol  parent  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  parent);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  parent);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    parent);    	non-compiled	[CE]  cannot  find  symbol  parent	20	None	replace
258	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  reduction);  [CE]  cannot  find  symbol  parent  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(parent,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    parent);    	non-compiled	[CE]  cannot  find  symbol  parent	20	None	replace
259	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.RELATIVE_THRESHOLD,  reduction);  [CE]  cannot  find  symbol  RELATIVE_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.RELATIVE_THRESHOLD,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.RELATIVE_THRESHOLD,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    parent);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_THRESHOLD	20	None	replace
260	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.reductions);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.reductions);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.reductions);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
261	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.class,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.class,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.class,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
262	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.type);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.type);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.class,  reduction.type);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
263	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  oldChild);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  oldChild);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  oldChild);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(newChild,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
264	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  trimming);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  trimming);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  trimming);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(newChild,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	40	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  reducing  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reducing.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reducing	50	None	replace
266	[BUG]  [BUGGY]  NodeHelper  helperCode  =  reductions.getHelper();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  helperCode  =  reductions.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  helperCode  =  reductions.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
267	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.reductions.getHelper();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodeHelper  code  =  reduction.reductions.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodeHelper  code  =  reduction.reductions.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
268	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reductions.getReductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reductions.getReductionGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reductions.getReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
269	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getImmediateParentNode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getImmediateParentNode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getImmediateParentNode();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
270	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getConductionGatherer();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getConductionGatherer();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionGatherer  helperCode  =  reduction.getConductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getReductionGatherer();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	42	None	replace
271	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
272	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCode(reduction);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  reduction.getHelperCode(reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reduction.getHelperCode(reduction);	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
273	[BUG]  [BUGGY]  NodehelperCode  helperCode  =  reduction.reductions.getHelperCode();  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  NodehelperCode  helperCode  =  reduction.reductions.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	NodehelperCode  helperCode  =  reduction.reductions.getHelperCode();	  NodehelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
274	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
275	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  null);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  null);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
276	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getHelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reductions.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reductions.getHelper();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
277	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperStructure();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getHelperStructure();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getHelperStructure();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	31	None	replace
278	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HELPER_SOURCE,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  reducing  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.BLOCK);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reducing.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  reducing	51	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  reducing  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.NAME);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reducing.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reducing	33	None	replace
281	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(node,  root,  helperCodeCost);  [CE]  cannot  find  symbol  node  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(node,  root,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(node,  root,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  node	1	None	replace
282	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD,  reduction);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD,  reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(ReductionGatherer.DEFAULT_THRESHOLD,  reduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(ReductionGatherer.class);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	58	None	replace
283	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(savings,  helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(savings,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(savings,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(helperCodeCost,    savings);    	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	39	None	replace
284	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  deduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  deduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  deduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	29	None	replace
285	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingState);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingState);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helpingState);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	29	None	replace
286	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  saving);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    elimination);    	non-compiled	[CE]  cannot  find  symbol  saving	41	None	replace
287	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
288	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributingRoot,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    contributingRoot);    	non-compiled	[CE]  cannot  find  symbol  reduction	54	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  reducing  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Preconditions.checkState(reducing.getType()  ==  Token.COST);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Preconditions.checkState(reducing.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  reducing	37	None	replace
290	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  reducer);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode,  reduction,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
291	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  reducer);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction,  reducer);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
292	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  saving);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  saving);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction,  saving);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
293	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  pruning,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  pruning,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  pruning,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    root,    savings);    	non-compiled	[CE]  cannot  find  symbol  reduction	21	None	replace
294	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  HELPER_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  NUMBER_SOURCE,  HELPER_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    NUMBER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	59	None	replace
295	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(compiler,  reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(compiler,  reduction,  root);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(compiler,  reduction,  root);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(null,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	28	None	replace
296	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionduction);  [CE]  cannot  find  symbol  reductionduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root,  reductionduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reductionduction	48	None	replace
297	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductionduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductionduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductionduction);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
298	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(reduction);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(reduction);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
299	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.findHelperCode(helperCodeCost,  reductions);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reductions.findHelperCode(helperCodeCost,  reductions);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reductions.findHelperCode(helperCodeCost,  reductions);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
300	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(reduction);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(reduction);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(reduction);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
301	[BUG]  [BUGGY]  HelperCode  helperCode  =reducings.getHelperCode();  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  HelperCode  helperCode  =reducings.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	HelperCode  helperCode  =reducings.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
302	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  savings);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reductions,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	16	None	replace
303	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  Savings);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  Savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  Savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	12	None	replace
304	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving,  helperCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving,  helperCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    saving);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
305	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving,  helperCode);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  saving,  helperCode);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    saving);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
306	[BUG]  [BUGGY]  Reduction  helperCode  =  reductions.getHelper();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Reduction  helperCode  =  reductions.getHelper();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Reduction  helperCode  =  reductions.getHelper();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	34	None	replace
307	[BUG]  [BUGGY]  ReductionhelperCode  =  reduction.getHelperCode();  [CE]  cannot  find  symbol  ReductionhelperCode  [FE]                                  IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  ReductionhelperCode  =  reduction.getHelperCode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	ReductionhelperCode  =  reduction.getHelperCode();	  Reduction    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  cannot  find  symbol  ReductionhelperCode	34	None	replace
308	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.cloneTree());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.cloneTree());  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.cloneTree());	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
309	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.children);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.children);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction.parent,  reduction.children);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.parent,    root);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
310	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeSOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeSOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeSOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
311	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCode_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCode_SOURCE);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  HelperCode_SOURCE);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(root,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
312	[BUG]  [BUGGY]  Node  addingRoot  =  reduction.compiler.getNodeForCodeInsertion(compiler.problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  reduction.compiler.getNodeForCodeInsertion(compiler.problemCodeCost);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  reduction.compiler.getNodeForCodeInsertion(compiler.problemCodeCost);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction.problemCodeCost);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	25	None	replace
313	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getImmediateParentNode();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reduction.getImmediateParentNode();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reduction.getImmediateParentNode();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
314	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getSymbol();  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  helperCode  =  reductions.getSymbol();  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  helperCode  =  reductions.getSymbol();	  Node    helperCode    =    reduction.getSymbol();    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	44	None	replace
315	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributing);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributing);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  contributing);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    helping);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
316	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helping,  savings);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }      [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helping,  savings);  [BUGGY]      addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  helping,  savings);	  Node    addingRoot    =    compiler.getNodeForCodeInsertion(reduction,    helping);    	non-compiled	[CE]  cannot  find  symbol  reduction	30	None	replace
