bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
2	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]      IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(root);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(root);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	23	None	replace
3	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]        IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	23	None	replace
4	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null,  reduction);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
5	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(savings);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]            IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(savings);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(savings);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	23	None	replace
6	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  reduction);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
7	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  addingRoot  [FE]                  IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]    [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	  	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  addingRoot	23	None	replace
9	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  null);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  null);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
10	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]      IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(problemCodeCost);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(problemCodeCost);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	23	None	replace
11	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(reduction,  root);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
12	[BUG]  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode);  [CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;  [FE]    IllegalStateException  [CONTEXT]  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [BUGGY]  Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	Node  addingRoot  =  compiler.getNodeForCodeInsertion(helperCode);	Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  	non-compiled	[CE]  method  getNodeForCodeInsertion  in  class  AbstractCompiler  cannot  be  applied  to  given  types;	23	None	replace
