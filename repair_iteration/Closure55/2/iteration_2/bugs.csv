bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
2	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
4	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
5	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	17	1	replace
6	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	17	1	replace
7	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	17	1	replace
8	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [FE]  IllegalStateException  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	17	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
10	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
12	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
13	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.isSupported())  {  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.isSupported())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.isSupported())  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.isSupported())  {  [CE]  cannot  find  symbol  aiderCode  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.isSupported())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.isSupported())  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	12	None	replace
15	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.isSupported())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.isSupported())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCodeCost.isSupported())  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	12	None	replace
16	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	12	None	replace
17	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                  IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	12	None	replace
18	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported())  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	12	None	replace
19	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
20	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "   "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
21	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
22	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "   "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( " "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
24	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( " "))  {  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( " "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
25	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/ "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "/ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
26	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/ "))  {  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/ "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "/ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "/ "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "/ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
28	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "/ "))  {  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "/ "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "/ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  AssertionFailedError  	11	8	replace
29	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "- "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
30	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "- "))  {  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "- "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reductions);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helperCode,  reductions);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  reductions);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
34	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  helperCode);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  helperCode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
36	[BUG]  [BUGGY]  NodeUtil.removeChild(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeUtil.removeChild(helperCode);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(helperCode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reductions);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
38	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
39	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
40	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
41	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
42	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
43	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
45	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
47	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
48	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  aiderCode  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	8	None	replace
49	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.isEmpty())  {  [CE]  cannot  find  symbol  aiderCode  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.isEmpty())  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	4	None	replace
50	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isEmpty(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isEmpty(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	4	None	replace
51	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.isEmpty())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCodeCost.isEmpty())  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	4	None	replace
52	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isEmpty())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isEmpty())  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	4	None	replace
53	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
54	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
55	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
56	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  	7	None	add
57	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
58	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
59	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
60	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.isEmpty())  {  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.isEmpty())  {	  if(helperCode!=    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
61	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.isEmpty())  {  [CE]  cannot  find  symbol  aiderCode  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  aiderCode.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.isEmpty())  {	  if(helperCode!=    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	3	None	replace
62	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isEmpty(helperCode))  {	  if(helperCode!=    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	3	None	replace
63	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isEmpty())  {	  if(helperCode!=    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	3	None	replace
64	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
65	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
66	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
67	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
68	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  	16	None	add
69	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
70	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
71	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
72	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
73	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  [CE]  [FE]        IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    If(helperCode  ==  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  	10	None	add
74	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    if(helperCode  ==  null  ||  HelperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
75	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ".   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
77	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
78	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	14	1	replace
79	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	14	1	replace
80	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	14	1	replace
81	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	14	1	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
83	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
85	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
86	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
87	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
88	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
89	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	5	None	add
90	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
91	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
92	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
93	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.isQuoted())  {  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.isQuoted())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.isQuoted())  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
94	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	15	None	replace
95	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.isQuoted())  {  [CE]  cannot  find  symbol  aiderCode  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.isQuoted())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.isQuoted())  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	15	None	replace
96	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.isQuoted())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.isQuoted())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCodeCost.isQuoted())  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	15	None	replace
97	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                  IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	15	None	replace
98	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode).isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode).isQuoted())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode).isQuoted())  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	15	None	replace
99	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
100	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode  ==  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
101	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  If(helperCode!=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    If(helperCode!=  null)  {	  	non-compiled	[CE]  	1	None	add
102	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode  >=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
103	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode  >>  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
104	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode  [BUGGY]  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode  [BUGGY]  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode  [BUGGY]  null)  {	  	non-compiled	[CE]  	1	None	add
105	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode  [Delete]  null)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode  [Delete]  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode  [Delete]  null)  {	  	non-compiled	[CE]  	1	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
107	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
109	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
110	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
111	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
112	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
113	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
114	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  	13	None	add
115	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
116	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
117	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	6	1	replace
118	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	6	1	replace
119	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	6	1	replace
120	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	6	1	replace
121	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  aiderCode  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	6	None	replace
122	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  aiderCode  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	6	None	replace
123	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted())  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	15	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
125	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	2	8	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  ReductionGatherer());  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  new  ReductionGatherer());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode,  reducer);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCode,  reducer);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode,  new  ReductionGatherer());  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCode,  new  ReductionGatherer());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
129	[BUG]  [BUGGY]  reducerCode.addChildToFront(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  reducerCode.addChildToFront(helperCode);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToFront(helperCode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
130	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isEmpty(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isEmpty(helperCode))  {	  if(helperCode!=    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	3	None	replace
131	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "* "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
132	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "* "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "* "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
133	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	replace
134	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
135	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	4	None	replace
136	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	4	None	replace
137	[BUG]  [BUGGY]  if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
138	[BUG]  [BUGGY]  if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(helper);  if(helperCode!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(helper);  if(helperCode!=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    Node  helperCode  =  parseHelperCode(helper);  if(helperCode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
139	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode.isEmpty())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode!=  null  ||  helperCode.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
140	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode!=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode!=  null  ||  helperCode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
141	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
142	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
143	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	17	None	replace
144	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
145	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
146	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	8	1	replace
147	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals( "))  {  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals( "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    if(helperCode  ==  null  ||  helperCode.equals( "))  {	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
148	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
149	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
150	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
151	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.restrictByNotNullOrUndefined())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
152	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getSourceName()))  {  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getSourceName()))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reduction.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
153	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.isSupported())  {  [CE]  cannot  find  symbol  helpingerCode  [FE]          IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.isSupported())  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingerCode.isSupported())  {	  if(helperCode    ==    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	12	None	replace
154	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getName()))  {  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getName()))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reduction.getName()))  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
155	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getFirstChild()))  {  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getFirstChild()))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reduction.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
156	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(HelperCode!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null)  {  if(HelperCode!=  null)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null)    {    if(HelperCode!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
157	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	14	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
159	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	14	8	replace
160	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  Node  addingRoot  =  reducer.getLastChild();  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getLastChild();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
161	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  Node  addingRoot  =  reductions.get(helperCode);  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(helperCode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
162	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  Node  addingRoot  =  reducer.getParent();  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getParent();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer());  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
164	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  IllegalStateException  	2	1	replace
165	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  IllegalStateException  	2	1	replace
166	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  IllegalStateException  	2	1	replace
167	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode!=    null)    {    	compilable	  [FE]  IllegalStateException  	2	1	replace
168	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reducer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  &&  reducer.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reducer.getType()  ==  Token.NAME)  {	  if(helperCode!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
169	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	6	None	replace
170	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCode  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	6	None	replace
171	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "n "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "n "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
172	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "n "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "n "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "n "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	11	1	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
174	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	17	8	replace
175	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  aiderCode  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.RETURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	17	None	replace
176	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RESTURN)  {  [CE]  cannot  find  symbol  RESTURN  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RESTURN)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RESTURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  RESTURN	17	None	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
178	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	8	8	replace
179	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  HelperCode  [FE]      AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	8	None	replace
180	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  aiderCode  [FE]        AssertionFailedError    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.GETPROP)  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	8	None	replace
181	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);    [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "   "))  {  [BUGGY]    continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "   "))    {    if(HelperCode  ==  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
